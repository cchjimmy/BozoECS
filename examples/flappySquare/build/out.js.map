{
  "version": 3,
  "sources": ["../../../src/pool.ts", "../../../src/entity.ts", "../../../src/component.ts", "../../../src/world.ts", "../config.json", "../src/main.ts"],
  "sourcesContent": ["export class ObjectPoolMap<K, V> {\n  private storage: V[] = [];\n  private indices: Map<K, number> = new Map();\n  private objectFactory: () => V;\n  private size = 0;\n\n  constructor(objectFactory: () => V) {\n    this.objectFactory = objectFactory;\n  }\n\n  len() {\n    return this.size;\n  }\n\n  add(key: K): V {\n    const index = this.indices.get(key);\n    if (index != undefined) return this.storage[index];\n    if (this.size >= this.storage.length)\n      this.storage.push(this.objectFactory());\n    this.indices.set(key, this.size);\n    this.size++;\n    return this.storage[this.size - 1];\n  }\n\n  remove(key: K): boolean {\n    const index = this.indices.get(key) ?? -1;\n    if (index < 0 || index >= this.size) return false;\n    const removed = this.storage[index];\n    // swap with last to maintain packed\n    this.storage[index] = this.storage[this.size - 1];\n    this.storage[this.size - 1] = removed;\n    for (const [k, v] of this.indices) {\n      if (v != this.size - 1) continue;\n      this.indices.set(k, index);\n      break;\n    }\n    this.indices.delete(key);\n    this.size--;\n    return true;\n  }\n\n  get(key: K): V {\n    const index = this.indices.get(key) ?? -1;\n    if (index < 0 || index >= this.size) throw new Error(\"Index out of range.\");\n    return this.storage[index];\n  }\n\n  has(key: K): boolean {\n    return this.indices.has(key);\n  }\n}\n", "export type entityT = number;\nexport function newEntity(): entityT {\n  return Math.random();\n}\n", "import { ObjectPoolMap } from \"./pool.ts\";\nimport { entityT, newEntity } from \"./entity.ts\";\n\nexport class ComponentManager {\n  private static pools: Map<object, unknown> = new Map();\n  private static idMap: Map<object, number> = new Map();\n\n  static register<T extends object>(component: T) {\n    if (ComponentManager.pools.has(component)) return;\n    ComponentManager.idMap.set(component, ComponentManager.idMap.size);\n    ComponentManager.pools.set(\n      component,\n      new ObjectPoolMap<entityT, T>(() => ({ ...component })),\n    );\n  }\n\n  static getId<T extends object>(component: T): number {\n    return ComponentManager.idMap.get(component) ?? -1;\n  }\n\n  static add<T extends object>(entity: entityT, component: T): T {\n    return Object.assign(\n      (ComponentManager.pools.get(component) as ObjectPoolMap<entityT, T>).add(\n        entity,\n      ),\n      component,\n    );\n  }\n\n  static remove<T extends object>(entity: entityT, component: T): boolean {\n    return (\n      ComponentManager.pools.get(component) as ObjectPoolMap<entityT, T>\n    ).remove(entity);\n  }\n\n  static get<T extends object>(entity: entityT, component: T): T {\n    return (\n      ComponentManager.pools.get(component) as ObjectPoolMap<entityT, T>\n    ).get(entity);\n  }\n\n  static len<T extends object>(component: T): number {\n    return (\n      ComponentManager.pools.get(component) as ObjectPoolMap<entityT, T>\n    ).len();\n  }\n\n  static delete(entity: entityT) {\n    for (const entry of this.pools) {\n      const p = entry[1] as ObjectPoolMap<entityT, object>;\n      p.has(entity) && p.remove(entity);\n    }\n  }\n\n  static copy(entity: entityT): entityT {\n    const copied = newEntity();\n    for (const entry of this.pools) {\n      const p = entry[1] as ObjectPoolMap<entityT, object>;\n      p.has(entity) && Object.assign(p.add(copied), p.get(entity));\n    }\n    return copied;\n  }\n}\n", "import { ComponentManager } from \"./component.ts\";\nimport { newEntity, type entityT } from \"./entity.ts\";\n\nexport type queryT = Partial<Record<\"and\" | \"not\", object[]>>;\n\nexport class World {\n  private static maskMap: Map<number, number> = new Map();\n  private static archetypeMap: Map<number, Set<entityT>> = new Map();\n  private static worlds: World[] = [];\n  private static entitiesToDelete: entityT[] = [];\n\n  private localEntities: Set<entityT> = new Set();\n\n  constructor() {\n    World.worlds.push(this);\n  }\n\n  static createEntity(): entityT {\n    const entity = newEntity();\n    World.maskMap.set(entity, 0);\n    World.getArchetype(0).add(entity);\n    return entity;\n  }\n\n  static copyEntity(entity: entityT): entityT {\n    const copy = ComponentManager.copy(entity);\n    const mask = this.maskMap.get(entity) ?? 0;\n    this.maskMap.set(copy, mask);\n    this.getArchetype(mask).add(copy);\n    return copy;\n  }\n\n  private static getArchetype(mask: number): Set<entityT> {\n    const a = World.archetypeMap.get(mask) ?? new Set();\n    World.archetypeMap.set(mask, a);\n    return a;\n  }\n\n  static deleteEntity(entity: entityT) {\n    World.entitiesToDelete.push(entity);\n  }\n\n  addEntity(entity: entityT = World.createEntity()): entityT {\n    this.localEntities.add(entity);\n    return entity;\n  }\n\n  removeEntity(entity: entityT) {\n    this.localEntities.delete(entity);\n  }\n\n  static registerComponent<T extends object>(component: T): typeof World {\n    ComponentManager.register(component);\n    return World;\n  }\n\n  static hasComponent<T extends object>(\n    entity: entityT,\n    component: T,\n  ): boolean {\n    return (\n      ((World.maskMap.get(entity) ?? 0) &\n        (1 << ComponentManager.getId(component))) >\n      0\n    );\n  }\n\n  static addComponent<T extends object>(\n    entity: entityT,\n    component: T,\n    values: Partial<T> = component,\n  ): T {\n    World.registerComponent(component);\n    let mask = World.maskMap.get(entity) ?? 0;\n    const compId = ComponentManager.getId(component);\n    if ((mask & (1 << compId)) != 0) {\n      return Object.assign(ComponentManager.get(entity, component), values);\n    }\n    World.getArchetype(mask).delete(entity);\n    mask |= 1 << compId;\n    World.maskMap.set(entity, mask);\n    World.getArchetype(mask).add(entity);\n    return Object.assign(ComponentManager.add(entity, component), values);\n  }\n\n  static removeComponent<T extends object>(\n    entity: entityT,\n    component: T,\n  ): boolean {\n    World.registerComponent(component);\n    let mask = World.maskMap.get(entity) ?? 0;\n    const compId = ComponentManager.getId(component);\n    if ((mask & (1 << compId)) == 0) return false;\n    World.getArchetype(mask).delete(entity);\n    mask &= ~(1 << compId);\n    World.maskMap.set(entity, mask);\n    World.getArchetype(mask).add(entity);\n    return ComponentManager.remove(entity, component);\n  }\n\n  static getComponent<T extends object>(entity: entityT, component: T): T {\n    return ComponentManager.get(entity, component);\n  }\n\n  update(...fns: ((world: World) => void)[]) {\n    for (let i = 0, l = fns.length; i < l; i++) fns[i](this);\n    while (World.entitiesToDelete.length) {\n      const entity = World.entitiesToDelete.pop() as entityT;\n      for (let i = 0, l = World.worlds.length; i < l; i++) {\n        World.worlds[i].localEntities.delete(entity);\n      }\n      ComponentManager.delete(entity);\n      const mask = World.maskMap.get(entity) ?? 0;\n      World.maskMap.delete(entity);\n      World.getArchetype(mask).delete(entity);\n    }\n  }\n\n  query(query: queryT): entityT[] {\n    let andMask = 0,\n      notMask = 0;\n    if (query.and) {\n      for (let i = 0, l = query.and.length; i < l; i++) {\n        andMask |= 1 << ComponentManager.getId(query.and[i]);\n      }\n    }\n    if (query.not) {\n      for (let i = 0, l = query.not.length; i < l; i++) {\n        notMask |= 1 << ComponentManager.getId(query.not[i]);\n      }\n    }\n    const res = [];\n    for (\n      let archetypes = World.archetypeMap.keys().toArray(),\n        l = archetypes.length,\n        i = 0;\n      i < l;\n      i++\n    ) {\n      const a = archetypes[i];\n      const set = World.getArchetype(a);\n      if (set.size == 0) continue;\n      (a & andMask) == andMask && (a & notMask) == 0 && res.push(...set);\n    }\n    return [...this.localEntities.intersection(new Set(res))];\n  }\n\n  entityCount(): number {\n    return this.localEntities.size;\n  }\n}\n", "{\n\t\"grav\": 981,\n\t\"hSpeedMult\": 1.001,\n\t\"pipe\": {\n\t\t\"gapHeight\": 80,\n\t\t\"baseSpeed\": 100,\n\t\t\"width\": 30,\n\t\t\"height\": 1000\n\t}\n}\n", "import { entityT, World } from \"../../../src/index.ts\";\nimport { default as config } from \"../config.json\" with { type: \"json\" };\n\n// singletons\nconst canvas = document.createElement(\"canvas\");\nif (!canvas) throw new Error(\"Cannot create canvas element.\");\ncanvas.style.imageRendering = \"pixelated\";\ndocument.body.appendChild(canvas);\nconst ctx = canvas.getContext(\"2d\");\nif (!ctx) throw new Error(\"Cannot initialize 2d context.\");\nconst Pointer = { isDown: false, justPressed: false, justReleased: false };\nconst Keys: Record<keyof typeof Pointer, Record<string, boolean>> = {\n  isDown: {},\n  justPressed: {},\n  justReleased: {},\n};\nconst GameState = {\n  currentScore: 0,\n  bestScore: 0,\n};\n\n// components\nconst Transform = { x: 0, y: 0, rad: 0, scaleX: 1, scaleY: 1 };\nconst Rect = { width: 10, height: 10 };\nconst Velocity = { x: 0, y: 0 };\nconst Acceleration = { x: 0, y: 0 };\nconst PlayerControl = {};\nconst Obstacle = { gapHeight: config.pipe.gapHeight };\n\n// systems\nfunction drawRect(\n  ctx: CanvasRenderingContext2D,\n  t: typeof Transform,\n  r: typeof Rect,\n  color = \"white\",\n) {\n  const s = Math.sin(t.rad);\n  const c = Math.cos(t.rad);\n  const oldF = ctx.fillStyle;\n  ctx.transform(c, s, -s, c, t.x, t.y);\n  ctx.fillStyle = color;\n  ctx.fillRect(\n    -r.width * 0.5,\n    -r.height * 0.5,\n    r.width * t.scaleX,\n    r.height * t.scaleY,\n  );\n  ctx.fillStyle = oldF;\n  ctx.transform(c, -s, s, c, c * -t.x + s * -t.y, -s * -t.x + c * -t.y);\n}\n\nfunction handleDrawing(world: World) {\n  if (!ctx) return;\n  drawBackground(ctx, \"green\");\n  world.query({ and: [Transform, Rect], not: [Obstacle] }).forEach((e) => {\n    const t = World.getComponent(e, Transform);\n    const r = World.getComponent(e, Rect);\n    drawRect(ctx, t, r);\n  });\n  world.query({ and: [Transform, Rect, Obstacle] }).forEach((e) => {\n    const t = World.getComponent(e, Transform);\n    const r = World.getComponent(e, Rect);\n    const o = World.getComponent(e, Obstacle);\n    const height = (r.height - o.gapHeight) * 0.5;\n    drawRect(\n      ctx,\n      {\n        x: t.x,\n        y: t.y + (o.gapHeight + height) * 0.5,\n        scaleX: 1,\n        scaleY: 1,\n        rad: 0,\n      },\n      {\n        width: r.width,\n        height,\n      },\n    );\n    drawRect(\n      ctx,\n      {\n        x: t.x,\n        y: t.y - (o.gapHeight + height) * 0.5,\n        scaleX: 1,\n        scaleY: 1,\n        rad: 0,\n      },\n      {\n        width: r.width,\n        height,\n      },\n    );\n  });\n\n  ctx.fillText(\n    \"Score: \" + GameState.currentScore + \"; Best: \" + GameState.bestScore,\n    0,\n    10,\n  );\n}\n\nfunction handleMovement(world: World) {\n  const dt = dtMilli / 1000;\n  world.query({ and: [Transform, Acceleration, Velocity] }).forEach((e) => {\n    const t = World.getComponent(e, Transform);\n    const v = World.getComponent(e, Velocity);\n    const a = World.getComponent(e, Acceleration);\n    v.x += a.x * dt;\n    v.x *= config.hSpeedMult;\n    v.y += a.y * dt;\n    t.x += v.x * dt;\n    t.y += v.y * dt;\n  });\n}\n\nfunction handleInput(world: World) {\n  world.query({ and: [PlayerControl, Acceleration, Velocity] }).forEach((e) => {\n    // movement control\n    const a = World.getComponent(e, Acceleration);\n    const v = World.getComponent(e, Velocity);\n    a.y = config.grav;\n    if (Keys.justPressed[\" \"] || Pointer.justPressed) {\n      a.y = -config.grav * 2e1;\n      v.x = v.y = 0;\n    }\n  });\n}\n\nfunction resetGame(world: World) {\n  GameState.bestScore = parseInt(localStorage.getItem(\"best\") || \"0\");\n\n  GameState.bestScore =\n    GameState.currentScore > GameState.bestScore\n      ? GameState.currentScore\n      : GameState.bestScore;\n  GameState.currentScore = 0;\n\n  localStorage.setItem(\"best\", GameState.bestScore.toString());\n\n  world.query({ and: [PlayerControl] }).forEach((e) => {\n    resetPlayer(e);\n  });\n  world.query({ and: [Obstacle] }).forEach((e) => {\n    const v = World.getComponent(e, Velocity);\n    v.x = -config.pipe.baseSpeed;\n    resetObstacle(e);\n  });\n}\n\nfunction handleCollision(world: World) {\n  world.query({ and: [PlayerControl, Rect, Transform] }).forEach((e) => {\n    const t = World.getComponent(e, Transform);\n    const r = World.getComponent(e, Rect);\n\n    if (t.y > canvas.height - r.height * 0.5) {\n      resetGame(world);\n    }\n\n    world.query({ and: [Transform, Rect, Obstacle] }).forEach((other) => {\n      const ot = World.getComponent(other, Transform);\n      const or = World.getComponent(other, Rect);\n      const oo = World.getComponent(other, Obstacle);\n\n      if (\n        (t.x - ot.x) ** 2 < ((r.width + or.width) * 0.5) ** 2 &&\n        (t.y - ot.y) ** 2 > ((oo.gapHeight - r.height) * 0.5) ** 2\n      ) {\n        resetGame(world);\n      }\n\n      // loop back\n      if (ot.x + or.width * 0.5 < 0) {\n        resetObstacle(other);\n        GameState.currentScore++;\n      }\n    });\n  });\n}\n\nfunction drawBackground(ctx: CanvasRenderingContext2D, color: string = \"\") {\n  ctx.setTransform(1, 0, 0, 1, 0, 0);\n  const oldF = ctx.fillStyle;\n  ctx.fillStyle = color;\n  ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  ctx.fillStyle = oldF;\n}\n\n// entity\nfunction addRect(world: World, x = 0, y = 0, rad = 0, w = 10, h = 10): entityT {\n  const e = world.addEntity();\n  const t = World.addComponent(e, Transform);\n  t.x = x;\n  t.y = y;\n  t.rad = rad;\n  const r = World.addComponent(e, Rect);\n  r.width = w;\n  r.height = h;\n  World.addComponent(e, Velocity);\n  World.addComponent(e, Acceleration);\n  return e;\n}\n\nfunction addPlayer(world: World): entityT {\n  const player = addRect(world);\n  World.addComponent(player, PlayerControl);\n  return player;\n}\n\nfunction addObstacle(world: World): entityT {\n  const e = addRect(world);\n  const r = World.getComponent(e, Rect);\n  World.addComponent(e, Obstacle);\n  r.width = config.pipe.width;\n  r.height = config.pipe.height;\n  return e;\n}\n\nfunction resetPlayer(player: entityT) {\n  const t = World.getComponent(player, Transform);\n  const v = World.getComponent(player, Velocity);\n  const a = World.getComponent(player, Acceleration);\n  t.x = canvas.width * 0.15;\n  t.y = canvas.height * 0.5;\n  v.x = v.y = a.x = a.y = 0;\n}\n\nfunction resetObstacle(obstacle: entityT) {\n  const t = World.getComponent(obstacle, Transform);\n  const r = World.getComponent(obstacle, Rect);\n  const o = World.getComponent(obstacle, Obstacle);\n  const gapHeight = o.gapHeight;\n  t.y = Math.random() * (canvas.height - gapHeight) + gapHeight * 0.5;\n  t.x = canvas.width + r.width * 0.5;\n}\n\ndocument.onkeydown = (e) => {\n  !Keys.isDown[e.key] && (Keys.justPressed[e.key] = true);\n  Keys.isDown[e.key] = true;\n};\n\ndocument.onkeyup = (e) => {\n  Keys.isDown[e.key] = false;\n  Keys.justReleased[e.key] = true;\n};\n\nglobalThis.window.onresize = document.body.onload = () => {\n  if (innerWidth / innerHeight < canvas.width / canvas.height) {\n    canvas.style.width = \"100%\";\n    canvas.style.height = \"\";\n  } else {\n    canvas.style.width = \"\";\n    canvas.style.height = \"100%\";\n  }\n};\n\ndocument.onpointerdown = () => {\n  Pointer.isDown = true;\n  Pointer.justPressed = true;\n};\n\ndocument.onpointerup = () => {\n  Pointer.isDown = false;\n  Pointer.justReleased = true;\n};\n\n// initialization\nconst game = new World();\nlet dtMilli = 0;\nlet timeMilli = 0;\naddPlayer(game);\naddObstacle(game);\nresetGame(game);\n\n(function loop() {\n  requestAnimationFrame(loop);\n  game.update(handleDrawing, handleInput, handleCollision, handleMovement);\n  Pointer.justReleased = false;\n  Pointer.justPressed = false;\n  for (const key in Keys.justPressed) {\n    Keys.justPressed[key] = false;\n  }\n  for (const key in Keys.justReleased) {\n    Keys.justReleased[key] = false;\n  }\n  dtMilli = performance.now() - timeMilli;\n  timeMilli += dtMilli;\n})();\n"],
  "mappings": "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",
  "names": ["ObjectPoolMap", "objectFactory", "key", "index", "removed", "k", "v", "newEntity", "ComponentManager", "_ComponentManager", "component", "ObjectPoolMap", "entity", "entry", "p", "copied", "newEntity", "World", "_World", "entity", "newEntity", "copy", "ComponentManager", "mask", "a", "component", "values", "compId", "fns", "i", "l", "query", "andMask", "notMask", "res", "archetypes", "set", "config_default", "canvas", "ctx", "Pointer", "Keys", "GameState", "Transform", "Rect", "Velocity", "Acceleration", "PlayerControl", "Obstacle", "config_default", "drawRect", "r", "color", "s", "c", "oldF", "handleDrawing", "world", "drawBackground", "e", "t", "World", "height", "handleMovement", "dt", "dtMilli", "v", "a", "handleInput", "resetGame", "resetPlayer", "resetObstacle", "handleCollision", "other", "ot", "or", "oo", "addRect", "x", "y", "rad", "w", "h", "addPlayer", "player", "addObstacle", "obstacle", "gapHeight", "game", "timeMilli", "loop", "key"]
}
