{
  "version": 3,
  "sources": ["../../../src/pool.ts", "../../../src/component.ts", "../../../src/entity.ts", "../../../src/world.ts", "../config.json", "../src/main.ts"],
  "sourcesContent": ["export class ObjectPool<T> {\n  private storage: T[] = [];\n  private objectConstructor: () => T;\n  private size = 0;\n\n  constructor(objectConstructor: () => T) {\n    this.objectConstructor = objectConstructor;\n  }\n\n  len() {\n    return this.size;\n  }\n\n  addObj(): T {\n    let obj;\n    if (this.storage[this.size]) {\n      obj = this.storage[this.size];\n    } else {\n      obj = this.objectConstructor();\n      this.storage.push(obj);\n    }\n    this.size++;\n    return obj;\n  }\n\n  findIndex(object: T): number {\n    return this.storage.findIndex((v) => v == object);\n  }\n\n  removeObj(index: number): T {\n    if (index >= this.size) throw new Error(\"Index out of range.\");\n    const removed = this.storage[index];\n    // swap with last to maintain packed\n    this.storage[index] = this.storage[this.storage.length - 1];\n    this.storage[this.storage.length - 1] = removed;\n    this.size--;\n    return removed;\n  }\n\n  getObj(index: number): T {\n    if (index >= this.size) throw new Error(\"Index out of range.\");\n    return this.storage[index];\n  }\n}\n", "import { ObjectPool } from \"./pool.ts\";\n\nexport class ComponentManager {\n  private static pools: Map<object, any> = new Map();\n  private static idMap: Map<object, number> = new Map();\n\n  static register<T extends object>(component: T) {\n    ComponentManager.idMap.set(component, ComponentManager.idMap.size);\n    ComponentManager.pools.set(\n      component,\n      new ObjectPool<T>(() => ({ ...component })),\n    );\n  }\n\n  static getId<T extends object>(component: T): number {\n    return ComponentManager.idMap.get(component) ?? -1;\n  }\n\n  static add<T extends object>(component: T): T {\n    return (ComponentManager.pools.get(component) as ObjectPool<T>).addObj();\n  }\n\n  static delete<T extends object>(\n    component: T,\n    index: number,\n  ): T {\n    return (ComponentManager.pools.get(component) as ObjectPool<T>).removeObj(\n      index,\n    );\n  }\n\n  static get<T extends object>(\n    component: T,\n    index: number,\n  ): T {\n    return (ComponentManager.pools.get(component) as ObjectPool<T>).getObj(\n      index,\n    );\n  }\n\n  static len<T extends object>(component: T): number {\n    return (ComponentManager.pools.get(component) as ObjectPool<T>).len();\n  }\n\n  static typeLen(): number {\n    return ComponentManager.pools.size;\n  }\n\n  static types(): object[] {\n    return ComponentManager.pools.keys().toArray();\n  }\n}\n", "import { ObjectPool } from \"./pool.ts\";\n\nexport type entityT = number;\n\nexport class EntityManager {\n  static nextId = 0;\n  static pool = new ObjectPool<entityT>(() => EntityManager.nextId++);\n\n  static add(): entityT {\n    return EntityManager.pool.addObj();\n  }\n\n  static findIndex(entity: entityT): number {\n    return EntityManager.pool.findIndex(entity);\n  }\n\n  static delete(index: number): entityT {\n    return EntityManager.pool.removeObj(index);\n  }\n}\n", "import { ComponentManager } from \"./component.ts\";\nimport { EntityManager, entityT } from \"./entity.ts\";\n\nexport type queryT = Partial<Record<\"and\" | \"or\" | \"not\", object[]>>;\n\nexport class World {\n  private static indexMap: Map<object, Map<number, number>> = new Map();\n  private static maskMap: Map<number, number> = new Map();\n  private static archetypeMap: Map<number, Set<entityT>> = new Map();\n  private static worlds: World[] = [];\n  private static removeMap: Map<number, (_: entityT) => object> = new Map();\n  private static ownerMap: Map<object, Map<number, number>> = new Map();\n\n  timeMilli = 0;\n  dtMilli = 0;\n  localEntities: Set<entityT> = new Set();\n\n  constructor() {\n    World.worlds.push(this);\n  }\n\n  static createEntity(): entityT {\n    const entity = EntityManager.add();\n    World.maskMap.set(entity, 0);\n    World.getArchetype(0).add(entity);\n    return entity;\n  }\n\n  private static getArchetype(mask: number): Set<entityT> {\n    const a = World.archetypeMap.get(mask);\n    if (a == undefined) {\n      const set: Set<entityT> = new Set();\n      World.archetypeMap.set(mask, set);\n      return set;\n    }\n    return a;\n  }\n\n  static deleteEntity(entity: entityT) {\n    for (let i = 0, l = World.worlds.length; i < l; i++) {\n      World.worlds[i].removeEntity(entity);\n    }\n    const types = ComponentManager.types();\n    for (let i = 0, l = ComponentManager.typeLen(); i < l; i++) {\n      if (!(World.getMask(entity) & 1 << i)) continue;\n      World.getRemoveFn(i)(entity);\n      const indices = World.getIndices(types[i]);\n      const owners = World.getOwners(types[i]);\n      const backEntity = World.getOwner(owners, owners.size - 1);\n      const entityIdx = World.getIndex(indices, entity);\n      owners.set(entityIdx, backEntity);\n      indices.set(backEntity, entityIdx);\n    }\n    World.getArchetype(World.getMask(entity)).delete(entity);\n    World.maskMap.set(entity, 0);\n    EntityManager.delete(EntityManager.findIndex(entity));\n  }\n\n  private static getRemoveFn(compId: number) {\n    const removeFn = World.removeMap.get(compId);\n    if (removeFn == undefined) throw new Error(\"Component not registered.\");\n    return removeFn;\n  }\n\n  addEntity(entity?: entityT): entityT {\n    entity ??= World.createEntity();\n    this.localEntities.add(entity);\n    return entity;\n  }\n\n  removeEntity(entity: entityT) {\n    this.localEntities.delete(entity);\n  }\n\n  entityExists(entity: entityT): boolean {\n    return this.localEntities.has(entity);\n  }\n\n  static componentExists<T extends object>(component: T) {\n    if (!World.indexMap.has(component)) World.registerComponent(component);\n  }\n\n  static registerComponent<T extends object>(\n    component: T,\n  ): typeof World {\n    ComponentManager.register(component);\n    World.indexMap.set(component, new Map());\n    World.removeMap.set(\n      ComponentManager.getId(component),\n      (e: entityT) =>\n        ComponentManager.delete(\n          component,\n          World.getIndex(World.getIndices(component), e),\n        ),\n    );\n    World.ownerMap.set(component, new Map());\n    return World;\n  }\n\n  static hasComponent<T extends object>(\n    entity: entityT,\n    component: T,\n  ): boolean {\n    return (World.getMask(entity) &\n      1 << ComponentManager.getId(component)) > 0;\n  }\n\n  static addComponent<T extends object>(\n    entity: entityT,\n    component: T,\n  ): T {\n    World.componentExists(component);\n    let mask = World.getMask(entity);\n    const compId = ComponentManager.getId(component);\n    if ((mask & 1 << compId) != 0) {\n      throw new Error(`Entity ${entity} already had that component.`);\n    }\n    World.getArchetype(mask).delete(entity);\n    mask |= 1 << compId;\n    World.maskMap.set(entity, mask);\n    World.getArchetype(mask).add(entity);\n    const idx = ComponentManager.len(component);\n    World.getIndices(component).set(entity, idx);\n    World.getOwners(component).set(idx, entity);\n    return ComponentManager.add(component);\n  }\n\n  private static getIndices<T extends object>(component: T) {\n    const indices = World.indexMap.get(component);\n    if (indices == undefined) throw new Error(\"Component not registered.\");\n    return indices;\n  }\n\n  private static getIndex(\n    indices: Map<number, number>,\n    entity: entityT,\n  ) {\n    const index = indices.get(entity);\n    if (index == undefined) throw new Error(`Entity ${entity} does not exist.`);\n    return index;\n  }\n\n  private static getOwners<T extends object>(component: T) {\n    const owners = World.ownerMap.get(component);\n    if (owners == undefined) throw new Error(\"Component not registered.\");\n    return owners;\n  }\n\n  private static getOwner(owners: Map<number, number>, index: number) {\n    const owner = owners.get(index);\n    if (owner == undefined) throw new Error(\"Owner not found.\");\n    return owner;\n  }\n\n  static removeComponent<T extends object>(\n    entity: entityT,\n    component: T,\n  ): T {\n    World.componentExists(component);\n    let mask = World.getMask(entity);\n    const compId = ComponentManager.getId(component);\n    if ((mask & 1 << compId) == 0) {\n      throw new Error(\n        `Entity ${entity} does not have that component.`,\n      );\n    }\n    World.getArchetype(mask).delete(entity);\n    mask &= ~(1 << compId);\n    World.maskMap.set(entity, mask);\n    World.getArchetype(mask).add(entity);\n    const indices = World.getIndices(component);\n    const owners = World.getOwners(component);\n    const entityIdx = World.getIndex(indices, entity);\n    const removed = ComponentManager.delete(component, entityIdx);\n    const backEntity = World.getOwner(owners, owners.size - 1);\n    owners.set(entityIdx, backEntity);\n    indices.set(backEntity, entityIdx);\n    return removed;\n  }\n\n  private static getMask(e: entityT): number {\n    return World.maskMap.get(e) ?? -1;\n  }\n\n  static getComponent<T extends object>(\n    entity: entityT,\n    component: T,\n  ): T {\n    if (!World.hasComponent(entity, component)) {\n      throw new Error(`Entity ${entity} does not have that component.`);\n    }\n    return ComponentManager.get(\n      component,\n      World.getIndex(World.getIndices(component), entity),\n    );\n  }\n\n  update(...fns: ((world: World) => void)[]) {\n    for (let i = 0, l = fns.length; i < l; i++) fns[i](this);\n    this.dtMilli = performance.now() - this.timeMilli;\n    this.timeMilli += this.dtMilli;\n  }\n\n  query(query: queryT): entityT[] {\n    let andMask = 0, orMask = 0, notMask = 0;\n    if (query.and) {\n      for (let i = 0, l = query.and.length; i < l; i++) {\n        andMask |= 1 << ComponentManager.getId(query.and[i]);\n      }\n    }\n    if (query.or) {\n      for (let i = 0, l = query.or.length; i < l; i++) {\n        orMask |= 1 << ComponentManager.getId(query.or[i]);\n      }\n    }\n    if (query.not) {\n      for (let i = 0, l = query.not.length; i < l; i++) {\n        notMask |= 1 << ComponentManager.getId(query.not[i]);\n      }\n    }\n    const res = [];\n    for (\n      let archetypes = World.archetypeMap.keys().toArray(),\n        l = archetypes.length,\n        i = 0,\n        a = archetypes[i];\n      i < l;\n      i++, a = archetypes[i]\n    ) {\n      if ((a & andMask) == andMask && (a | orMask) > 0 && (a & notMask) == 0) {\n        res.push(...this.localEntities.intersection(World.getArchetype(a)));\n      }\n    }\n    return res;\n  }\n\n  entityCount(): number {\n    return this.localEntities.size;\n  }\n}\n", "{\n\t\"grav\": 981,\n\t\"hSpeedMult\": 1.001,\n\t\"pipe\": {\n\t\t\"gapHeight\": 80,\n\t\t\"baseSpeed\": 100,\n\t\t\"width\": 30,\n\t\t\"height\": 1000\n\t}\n}\n", "import { entityT, World } from \"../../../src/index.ts\";\nimport { default as config } from \"../config.json\" with { type: \"json\" };\n\n// singletons\nconst canvas = document.createElement(\"canvas\");\nif (!canvas) throw new Error(\"Cannot create canvas element.\");\ncanvas.style.imageRendering = \"pixelated\";\ndocument.body.appendChild(canvas);\nconst ctx = canvas.getContext(\"2d\");\nif (!ctx) throw new Error(\"Cannot initialize 2d context.\");\nconst Pointer = { isDown: false, justPressed: false, justReleased: false };\nconst Keys: Record<keyof typeof Pointer, Record<string, boolean>> = {\n  isDown: {},\n  justPressed: {},\n  justReleased: {},\n};\nconst GameState = {\n  currentScore: 0,\n  bestScore: 0,\n};\n\n// components\nconst Transform = { x: 0, y: 0, rad: 0, scaleX: 1, scaleY: 1 };\nconst Rect = { width: 10, height: 10 };\nconst Velocity = { x: 0, y: 0 };\nconst Acceleration = { x: 0, y: 0 };\nconst PlayerControl = {};\nconst Obstacle = { gapHeight: config.pipe.gapHeight };\n\n// systems\nfunction drawRect(\n  ctx: CanvasRenderingContext2D,\n  t: typeof Transform,\n  r: typeof Rect,\n  color = \"white\",\n) {\n  const s = Math.sin(t.rad);\n  const c = Math.cos(t.rad);\n  const oldF = ctx.fillStyle;\n  ctx.transform(c, s, -s, c, t.x, t.y);\n  ctx.fillStyle = color;\n  ctx.fillRect(\n    -r.width * 0.5,\n    -r.height * 0.5,\n    r.width * t.scaleX,\n    r.height * t.scaleY,\n  );\n  ctx.fillStyle = oldF;\n  ctx.transform(c, -s, s, c, c * -t.x + s * -t.y, -s * -t.x + c * -t.y);\n}\n\nfunction handleDrawing(world: World) {\n  if (!ctx) return;\n  drawBackground(ctx, \"green\");\n  world.query({ and: [Transform, Rect], not: [Obstacle] }).forEach((e) => {\n    const t = World.getComponent(e, Transform);\n    const r = World.getComponent(e, Rect);\n    drawRect(ctx, t, r);\n  });\n  world.query({ and: [Transform, Rect, Obstacle] }).forEach((e) => {\n    const t = World.getComponent(e, Transform);\n    const r = World.getComponent(e, Rect);\n    const o = World.getComponent(e, Obstacle);\n    const height = (r.height - o.gapHeight) * 0.5;\n    drawRect(ctx, {\n      x: t.x,\n      y: t.y + (o.gapHeight + height) * 0.5,\n      scaleX: 1,\n      scaleY: 1,\n      rad: 0,\n    }, {\n      width: r.width,\n      height,\n    });\n    drawRect(ctx, {\n      x: t.x,\n      y: t.y - (o.gapHeight + height) * 0.5,\n      scaleX: 1,\n      scaleY: 1,\n      rad: 0,\n    }, {\n      width: r.width,\n      height,\n    });\n  });\n\n  ctx.fillText(\n    \"Score: \" + GameState.currentScore +\n      \"; Best: \" + GameState.bestScore,\n    0,\n    10,\n  );\n}\n\nfunction handleMovement(world: World) {\n  const dt = world.dtMilli / 1000;\n  world.query({ and: [Transform, Acceleration, Velocity] }).forEach((e) => {\n    const t = World.getComponent(e, Transform);\n    const v = World.getComponent(e, Velocity);\n    const a = World.getComponent(e, Acceleration);\n    v.x += a.x * dt;\n    v.x *= config.hSpeedMult;\n    v.y += a.y * dt;\n    t.x += v.x * dt;\n    t.y += v.y * dt;\n  });\n}\n\nfunction handleInput(world: World) {\n  world.query({ and: [PlayerControl, Acceleration, Velocity] }).forEach((e) => {\n    // movement control\n    const a = World.getComponent(e, Acceleration);\n    const v = World.getComponent(e, Velocity);\n    a.y = config.grav;\n    if ((Keys.justPressed[\" \"]) || Pointer.justPressed) {\n      a.y = -config.grav * 2e1;\n      v.x = v.y = 0;\n    }\n  });\n}\n\nfunction resetGame(world: World) {\n  GameState.bestScore = parseInt(localStorage.getItem(\"best\") || \"0\");\n\n  GameState.bestScore = GameState.currentScore > GameState.bestScore\n    ? GameState.currentScore\n    : GameState.bestScore;\n  GameState.currentScore = 0;\n\n  localStorage.setItem(\"best\", GameState.bestScore.toString());\n\n  world.query({ and: [PlayerControl] }).forEach((e) => {\n    resetPlayer(e);\n  });\n  world.query({ and: [Obstacle] }).forEach((e) => {\n    const v = World.getComponent(e, Velocity);\n    v.x = -config.pipe.baseSpeed;\n    resetObstacle(e);\n  });\n}\n\nfunction handleCollision(world: World) {\n  world.query({ and: [PlayerControl, Rect, Transform] }).forEach(\n    (e) => {\n      const t = World.getComponent(e, Transform);\n      const r = World.getComponent(e, Rect);\n\n      if (t.y > canvas.height - r.height * 0.5) {\n        resetGame(world);\n      }\n\n      world.query({ and: [Transform, Rect, Obstacle] }).forEach((other) => {\n        const ot = World.getComponent(other, Transform);\n        const or = World.getComponent(other, Rect);\n        const oo = World.getComponent(other, Obstacle);\n\n        if (\n          (t.x - ot.x) ** 2 < ((r.width + or.width) * 0.5) ** 2 &&\n          (t.y - ot.y) ** 2 > ((oo.gapHeight - r.height) * 0.5) ** 2\n        ) {\n          resetGame(world);\n        }\n\n        // loop back\n        if (ot.x + or.width * 0.5 < 0) {\n          resetObstacle(other);\n          GameState.currentScore++;\n        }\n      });\n    },\n  );\n}\n\nfunction drawBackground(ctx: CanvasRenderingContext2D, color: string = \"\") {\n  ctx.setTransform(1, 0, 0, 1, 0, 0);\n  const oldF = ctx.fillStyle;\n  ctx.fillStyle = color;\n  ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  ctx.fillStyle = oldF;\n}\n\n// entity\nfunction addRect(world: World, x = 0, y = 0, rad = 0, w = 10, h = 10): entityT {\n  const e = world.addEntity();\n  const t = World.addComponent(e, Transform);\n  t.x = x;\n  t.y = y;\n  t.rad = rad;\n  const r = World.addComponent(e, Rect);\n  r.width = w;\n  r.height = h;\n  World.addComponent(e, Velocity);\n  World.addComponent(e, Acceleration);\n  return e;\n}\n\nfunction addPlayer(world: World): entityT {\n  const player = addRect(world);\n  World.addComponent(player, PlayerControl);\n  return player;\n}\n\nfunction addObstacle(world: World): entityT {\n  const e = addRect(world);\n  const r = World.getComponent(e, Rect);\n  World.addComponent(e, Obstacle);\n  r.width = config.pipe.width;\n  r.height = config.pipe.height;\n  return e;\n}\n\nfunction resetPlayer(player: entityT) {\n  const t = World.getComponent(player, Transform);\n  const v = World.getComponent(player, Velocity);\n  const a = World.getComponent(player, Acceleration);\n  t.x = canvas.width * 0.15;\n  t.y = canvas.height * 0.5;\n  v.x =\n    v.y =\n    a.x =\n    a.y =\n      0;\n}\n\nfunction resetObstacle(obstacle: entityT) {\n  const t = World.getComponent(obstacle, Transform);\n  const r = World.getComponent(obstacle, Rect);\n  const o = World.getComponent(obstacle, Obstacle);\n  const gapHeight = o.gapHeight;\n  t.y = Math.random() * (canvas.height - gapHeight) + gapHeight * 0.5;\n  t.x = canvas.width + r.width * 0.5;\n}\n\ndocument.onkeydown = (e) => {\n  !Keys.isDown[e.key] && (Keys.justPressed[e.key] = true);\n  Keys.isDown[e.key] = true;\n};\n\ndocument.onkeyup = (e) => {\n  Keys.isDown[e.key] = false;\n  Keys.justReleased[e.key] = true;\n};\n\nglobalThis.window.onresize = document.body.onload = () => {\n  if (innerWidth / innerHeight < canvas.width / canvas.height) {\n    canvas.style.width = \"100%\";\n    canvas.style.height = \"\";\n  } else {\n    canvas.style.width = \"\";\n    canvas.style.height = \"100%\";\n  }\n};\n\ndocument.onpointerdown = () => {\n  Pointer.isDown = true;\n  Pointer.justPressed = true;\n};\n\ndocument.onpointerup = () => {\n  Pointer.isDown = false;\n  Pointer.justReleased = true;\n};\n\n// initialization\nconst game = new World();\naddPlayer(game);\naddObstacle(game);\nresetGame(game);\n\n(function loop() {\n  requestAnimationFrame(loop);\n  game.update(\n    handleDrawing,\n    handleInput,\n    handleCollision,\n    handleMovement,\n  );\n  Pointer.justReleased = false;\n  Pointer.justPressed = false;\n  for (const key in Keys.justPressed) {\n    Keys.justPressed[key] = false;\n  }\n  for (const key in Keys.justReleased) {\n    Keys.justReleased[key] = false;\n  }\n})();\n"],
  "mappings": "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",
  "names": ["ObjectPool", "objectConstructor", "obj", "object", "v", "index", "removed", "ComponentManager", "_ComponentManager", "component", "ObjectPool", "index", "EntityManager", "_EntityManager", "ObjectPool", "entity", "index", "World", "_World", "entity", "EntityManager", "mask", "a", "set", "i", "l", "types", "ComponentManager", "indices", "owners", "backEntity", "entityIdx", "compId", "removeFn", "component", "e", "idx", "index", "owner", "removed", "fns", "query", "andMask", "orMask", "notMask", "res", "archetypes", "config_default", "canvas", "ctx", "Pointer", "Keys", "GameState", "Transform", "Rect", "Velocity", "Acceleration", "PlayerControl", "Obstacle", "config_default", "drawRect", "t", "r", "color", "s", "c", "oldF", "handleDrawing", "world", "drawBackground", "World", "o", "height", "handleMovement", "dt", "e", "v", "handleInput", "a", "resetGame", "resetPlayer", "resetObstacle", "handleCollision", "other", "ot", "or", "oo", "addRect", "x", "y", "rad", "w", "h", "addPlayer", "player", "addObstacle", "obstacle", "gapHeight", "game", "loop", "key"]
}
