{
  "version": 3,
  "sources": ["../../../src/pool.ts", "../../../src/component.ts", "../../../src/world.ts", "../src/config.json", "../src/main.ts"],
  "sourcesContent": ["export class ObjectPoolMap<T> {\n  private storage: T[] = [];\n  private indices: Map<unknown, number> = new Map();\n  private objectFactory: () => T;\n  private size = 0;\n\n  constructor(objectFactory: () => T) {\n    this.objectFactory = objectFactory;\n  }\n\n  len() {\n    return this.size;\n  }\n\n  addObj(key: unknown): T {\n    let obj;\n    if (this.size < this.storage.length) {\n      obj = this.storage[this.size];\n    } else {\n      obj = this.objectFactory();\n      this.storage.push(obj);\n    }\n    this.indices.set(key, this.size);\n    this.size++;\n    return obj;\n  }\n\n  removeObj(key: unknown): boolean {\n    const index = this.indices.get(key) ?? -1;\n    if (index < 0 || index >= this.size) return false;\n    const removed = this.storage[index];\n    // swap with last to maintain packed\n    this.storage[index] = this.storage[this.size - 1];\n    this.storage[this.size - 1] = removed;\n    for (const [k, v] of this.indices) {\n      if (v != this.size - 1) continue;\n      this.indices.set(k, index);\n      break;\n    }\n    this.indices.delete(key);\n    this.size--;\n    return true;\n  }\n\n  getObj(key: unknown): T {\n    const index = this.indices.get(key) ?? -1;\n    if (index < 0 || index >= this.size) throw new Error(\"Index out of range.\");\n    return this.storage[index];\n  }\n}\n", "import { ObjectPoolMap } from \"./pool.ts\";\nimport { entityT } from \"./entity.ts\";\n\nexport class ComponentManager {\n  private static pools: Map<object, unknown> = new Map();\n  private static idMap: Map<object, number> = new Map();\n\n  static register<T extends object>(component: T) {\n    if (ComponentManager.pools.has(component)) return;\n    ComponentManager.idMap.set(component, ComponentManager.idMap.size);\n    ComponentManager.pools.set(\n      component,\n      new ObjectPoolMap<T>(() => ({ ...component })),\n    );\n  }\n\n  static getId<T extends object>(component: T): number {\n    return ComponentManager.idMap.get(component) ?? -1;\n  }\n\n  static add<T extends object>(key: entityT, component: T): T {\n    return Object.assign(\n      (ComponentManager.pools.get(component) as ObjectPoolMap<T>).addObj(key),\n      component,\n    );\n  }\n\n  static delete<T extends object>(key: entityT, component: T): boolean {\n    return (\n      ComponentManager.pools.get(component) as ObjectPoolMap<T>\n    ).removeObj(key);\n  }\n\n  static get<T extends object>(key: entityT, component: T): T {\n    return (ComponentManager.pools.get(component) as ObjectPoolMap<T>).getObj(\n      key,\n    );\n  }\n\n  static len<T extends object>(component: T): number {\n    return (ComponentManager.pools.get(component) as ObjectPoolMap<T>).len();\n  }\n\n  static typeLen(): number {\n    return ComponentManager.pools.size;\n  }\n\n  static types(): object[] {\n    return ComponentManager.pools.keys().toArray();\n  }\n}\n", "import { ComponentManager } from \"./component.ts\";\nimport { entityT } from \"./entity.ts\";\n\nexport type queryT = Partial<Record<\"and\" | \"not\", object[]>>;\n\nexport class World {\n  private static maskMap: Map<number, number> = new Map();\n  private static archetypeMap: Map<number, Set<entityT>> = new Map();\n  private static worlds: World[] = [];\n  private static entitiesToDelete: entityT[] = [];\n\n  private localEntities: Set<entityT> = new Set();\n\n  constructor() {\n    World.worlds.push(this);\n  }\n\n  static createEntity(): entityT {\n    const entity = Math.random();\n    World.maskMap.set(entity, 0);\n    World.getArchetype(0).add(entity);\n    return entity;\n  }\n\n  static copyEntity(entity: entityT): entityT {\n    const copy = Math.random();\n    const compTypes = ComponentManager.types();\n    const mask = this.maskMap.get(entity) ?? 0;\n    World.maskMap.set(copy, mask);\n    World.getArchetype(mask).add(copy);\n    for (let i = 0, l = compTypes.length; i < l; i++) {\n      if (!(mask & (1 << i))) continue;\n      Object.assign(\n        ComponentManager.add(copy, compTypes[i]),\n        ComponentManager.get(entity, compTypes[i]),\n      );\n    }\n    return copy;\n  }\n\n  private static getArchetype(mask: number): Set<entityT> {\n    const a = World.archetypeMap.get(mask) ?? new Set();\n    World.archetypeMap.set(mask, a);\n    return a;\n  }\n\n  static deleteEntity(entity: entityT) {\n    World.entitiesToDelete.push(entity);\n  }\n\n  addEntity(entity: entityT = World.createEntity()): entityT {\n    this.localEntities.add(entity);\n    return entity;\n  }\n\n  removeEntity(entity: entityT) {\n    this.localEntities.delete(entity);\n  }\n\n  static registerComponent<T extends object>(component: T): typeof World {\n    ComponentManager.register(component);\n    return World;\n  }\n\n  static hasComponent<T extends object>(\n    entity: entityT,\n    component: T,\n  ): boolean {\n    return (\n      ((World.maskMap.get(entity) ?? 0) &\n        (1 << ComponentManager.getId(component))) >\n      0\n    );\n  }\n\n  static addComponent<T extends object>(\n    entity: entityT,\n    component: T,\n    values: Partial<T> = component,\n  ): T {\n    World.registerComponent(component);\n    let mask = World.maskMap.get(entity) ?? 0;\n    const compId = ComponentManager.getId(component);\n    if ((mask & (1 << compId)) != 0) {\n      return Object.assign(ComponentManager.get(entity, component), values);\n    }\n    World.getArchetype(mask).delete(entity);\n    mask |= 1 << compId;\n    World.maskMap.set(entity, mask);\n    World.getArchetype(mask).add(entity);\n    return Object.assign(ComponentManager.add(entity, component), values);\n  }\n\n  static removeComponent<T extends object>(\n    entity: entityT,\n    component: T,\n  ): boolean {\n    World.registerComponent(component);\n    let mask = World.maskMap.get(entity) ?? 0;\n    const compId = ComponentManager.getId(component);\n    if ((mask & (1 << compId)) == 0) return false;\n    World.getArchetype(mask).delete(entity);\n    mask &= ~(1 << compId);\n    World.maskMap.set(entity, mask);\n    World.getArchetype(mask).add(entity);\n    return ComponentManager.delete(entity, component);\n  }\n\n  static getComponent<T extends object>(entity: entityT, component: T): T {\n    return ComponentManager.get(entity, component);\n  }\n\n  update(...fns: ((world: World) => void)[]) {\n    for (let i = 0, l = fns.length; i < l; i++) fns[i](this);\n    while (World.entitiesToDelete.length) {\n      const entity = World.entitiesToDelete.pop() as entityT;\n      for (let i = 0, l = World.worlds.length; i < l; i++) {\n        World.worlds[i].localEntities.delete(entity);\n      }\n      const types = ComponentManager.types();\n      const mask = World.maskMap.get(entity) ?? 0;\n      World.getArchetype(mask).delete(entity);\n      for (let i = 0, l = types.length; i < l; i++) {\n        if (!(mask & (1 << i))) continue;\n        ComponentManager.delete(entity, types[i]);\n      }\n    }\n  }\n\n  query(query: queryT): entityT[] {\n    let andMask = 0,\n      notMask = 0;\n    if (query.and) {\n      for (let i = 0, l = query.and.length; i < l; i++) {\n        andMask |= 1 << ComponentManager.getId(query.and[i]);\n      }\n    }\n    if (query.not) {\n      for (let i = 0, l = query.not.length; i < l; i++) {\n        notMask |= 1 << ComponentManager.getId(query.not[i]);\n      }\n    }\n    const res = [];\n    for (\n      let archetypes = World.archetypeMap.keys().toArray(),\n        l = archetypes.length,\n        i = 0;\n      i < l;\n      i++\n    ) {\n      const a = archetypes[i];\n      const set = World.getArchetype(a);\n      if (set.size == 0) continue;\n      (a & andMask) == andMask && (a & notMask) == 0 && res.push(...set);\n    }\n    return [...this.localEntities.intersection(new Set(res))];\n  }\n\n  entityCount(): number {\n    return this.localEntities.size;\n  }\n}\n", "{\n  \"viewport\": {\n    \"width\": 800,\n    \"height\": 400\n  },\n  \"player\": {\n    \"speed\": 20\n  },\n  \"minions\": {\n    \"speed\": 20,\n    \"spawnRate\": 2\n  }\n}\n", "/**\n * By Original PNG version by Raizin, SVG rework by Sameboat. - file:Map of MOBA.png (CC 3.0), CC BY-SA 3.0, https://commons.wikimedia.org/w/index.php?curid=29443207\n */\n\nimport { entityT, World } from \"../../../src/index.ts\";\nimport { default as config } from \"./config.json\" with { type: \"json\" };\n\n// components\nconst PIDController = {\n  kp: 0,\n  ki: 0,\n  kd: 0,\n  prevErr: 0,\n  accumErr: 0,\n  result: function (currentErr: number, dt: number): number {\n    if (dt == 0) return 0;\n    this.accumErr += currentErr;\n    const out =\n      this.kp * currentErr +\n      this.ki * this.accumErr +\n      (this.kd * (currentErr - this.prevErr)) / dt;\n    this.prevErr = currentErr;\n    return out;\n  },\n  reset: function (): void {\n    this.prevErr = this.accumErr = 0;\n  },\n};\nconst Stats = {\n  healthPoint: 0,\n  attackPoint: 0,\n  defencePoint: 0,\n  abilityPower: 0,\n  moveSpeed: 0,\n  attackSpeed: 0,\n};\nconst Callback = { callback: new Function() };\nconst Transform = { x: 0, y: 0, rad: 0, scaleX: 1, scaleY: 1 };\nconst Velocity = { x: 0, y: 0 };\nconst PlayerControl = {};\nconst ComControl = {};\nconst ParticleEmitter = {\n  spread: 0,\n  particleEntity: -1,\n  particleLifetimeSeconds: 1,\n  speed: 1,\n  emit: false,\n};\nconst Camera = { zoom: 20, tilt: 0, isActive: false, targetEntity: -1 };\nconst Rect = { width: 2, height: 2 };\nconst Graphic = { src: \"\" };\nconst Button = { hovered: false, pressed: false, clicked: false };\nconst Colour = { fill: \"white\", stroke: \"black\" };\nconst Text = {\n  content: \"\",\n  fontSize: 20,\n  padding: 3,\n  color: \"black\",\n  backgroundColor: \"white\",\n};\nconst Timer = { timeMilli: 0, reset: false, stop: false };\nconst PathFinder = { targetX: 0, targetY: 0 };\n\n// singletons\nconst Ctx2D = setUpCanvas2D();\nconst Pointer = setUpPointer();\nconst Keys = setUpKeyboard();\nconst Time = setUpTime();\n\nfunction setUpCanvas2D(): {\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n} {\n  const canvas =\n    document.querySelector(\"canvas\") ?? document.createElement(\"canvas\");\n  if (!canvas) throw new Error(\"Cannot create canvas element.\");\n  const ctx = canvas.getContext(\"2d\");\n  if (!ctx) throw new Error(\"Cannot initialize context 2d.\");\n\n  document.body.appendChild(canvas);\n\n  globalThis.onresize = globalThis.onload = () => {\n    if (innerWidth / innerHeight < canvas.width / canvas.height) {\n      canvas.style.width = \"100%\";\n      canvas.style.height = \"\";\n    } else {\n      canvas.style.width = \"\";\n      canvas.style.height = \"100%\";\n    }\n  };\n\n  return { canvas, ctx };\n}\nfunction setUpKeyboard(): Record<\n  \"isDown\" | \"justPressed\" | \"justReleased\",\n  Record<string, boolean>\n> {\n  const keys: ReturnType<typeof setUpKeyboard> = {\n    isDown: {},\n    justPressed: {},\n    justReleased: {},\n  };\n\n  globalThis.onkeydown = (e) => {\n    !keys.isDown[e.key] && (keys.justPressed[e.key] = true);\n    keys.isDown[e.key] = true;\n  };\n  globalThis.onkeyup = (e) => {\n    keys.isDown[e.key] = false;\n    keys.justReleased[e.key] = true;\n  };\n\n  return keys;\n}\nfunction keyboardUpdate(\n  keys: Record<\n    \"isDown\" | \"justPressed\" | \"justReleased\",\n    Record<string, boolean>\n  >,\n) {\n  for (const key in keys.justPressed) keys.justPressed[key] = false;\n  for (const key in keys.justReleased) keys.justReleased[key] = false;\n}\nfunction setUpPointer() {\n  const pointer = {\n    x: 0,\n    y: 0,\n    isDown: false,\n    justPressed: false,\n    justReleased: false,\n    pressPos: { x: 0, y: 0 },\n    releasePos: { x: 0, y: 0 },\n  };\n\n  globalThis.onpointerdown = (e) => {\n    ((pointer.x = e.x), (pointer.y = e.y));\n    Object.assign(pointer.pressPos, pointer);\n    pointer.isDown = pointer.justPressed = true;\n  };\n\n  globalThis.onpointerup = (e) => {\n    ((pointer.x = e.x), (pointer.y = e.y));\n    Object.assign(pointer.releasePos, pointer);\n    ((pointer.isDown = false), (pointer.justReleased = true));\n  };\n\n  globalThis.onpointermove = (e) => {\n    ((pointer.x = e.x), (pointer.y = e.y));\n  };\n\n  return pointer;\n}\nfunction pointerUpdate(\n  pointer: Record<\"isDown\" | \"justPressed\" | \"justReleased\", boolean>,\n) {\n  pointer.justPressed = false;\n  pointer.justReleased = false;\n}\nfunction setUpTime() {\n  return { dtMilli: 0, timeMilli: 0 };\n}\nfunction timeUpdate(time: { dtMilli: number; timeMilli: number }) {\n  time.dtMilli = performance.now() - time.timeMilli;\n  time.timeMilli += time.dtMilli;\n}\n\n// systems\nfunction handleParticleEmitters(world: World) {\n  world.query({ and: [ParticleEmitter, Transform] }).forEach((e) => {\n    const emitter = World.getComponent(e, ParticleEmitter);\n    if (!emitter.emit || !World.hasComponent(emitter.particleEntity, Transform))\n      return;\n    emitter.emit = false;\n    const t = World.getComponent(e, Transform);\n    const particle = World.copyEntity(emitter.particleEntity);\n    const particleTransform = World.getComponent(particle, Transform);\n    Object.assign(particleTransform, t);\n    world.addEntity(particle);\n    const timer = World.addComponent(particle, Timer);\n    const rand = Math.random() > 0.5;\n    const radian =\n      t.rad + Math.random() * emitter.spread * Math.PI * (-1 * +rand + +!rand);\n    particleTransform.rad = radian;\n    World.addComponent(particle, Velocity, {\n      x: Math.cos(radian) * emitter.speed,\n      y: Math.sin(radian) * emitter.speed,\n    });\n    World.addComponent(particle, Callback).callback = () => {\n      if (timer.timeMilli < emitter.particleLifetimeSeconds * 1000) return;\n      World.deleteEntity(particle);\n    };\n  });\n}\nfunction handleInput(world: World) {\n  let camera: typeof Camera | null;\n  let camTransform: typeof Transform | null;\n  world.query({ and: [Camera, Transform] }).forEach((e) => {\n    const c = World.getComponent(e, Camera);\n    if (!c.isActive) return;\n    camera = c;\n    camTransform = World.getComponent(e, Transform);\n  });\n  const pressPos = pointerToScreen(Pointer.pressPos, Ctx2D.canvas);\n  world.query({ and: [PathFinder, PlayerControl] }).forEach((e) => {\n    if (!camera || !camTransform) return;\n    const pf = World.getComponent(e, PathFinder);\n    if (!Pointer.justPressed) return;\n    const worldPos = screenToWorld(\n      pressPos,\n      camTransform,\n      camera.tilt,\n      camera.zoom,\n    );\n    pf.targetX = worldPos.x;\n    pf.targetY = worldPos.y;\n  });\n}\n\nfunction handlePathfind(world: World) {\n  world\n    .query({ and: [PathFinder, Transform, Velocity, Stats] })\n    .forEach((e) => {\n      const pf = World.getComponent(e, PathFinder);\n      const p = World.getComponent(e, Transform);\n      const v = World.getComponent(e, Velocity);\n      const s = World.getComponent(e, Stats);\n\n      const dx = pf.targetX - p.x;\n      const dy = pf.targetY - p.y;\n      const dMag = (dx * dx + dy * dy) ** 0.5;\n      if (dMag == 0) return;\n      const controlDistance = ((s.moveSpeed * Time.dtMilli) / 1000) * 2;\n      const adjustedSpeed =\n        dMag > controlDistance\n          ? s.moveSpeed\n          : (s.moveSpeed * dMag) / controlDistance;\n      v.x = (dx / dMag) * adjustedSpeed;\n      v.y = (dy / dMag) * adjustedSpeed;\n    });\n}\n\nfunction handleTimers(world: World) {\n  world.query({ and: [Timer] }).forEach((e) => {\n    World.hasComponent(e, Callback) &&\n      World.getComponent(e, Callback).callback(e);\n    const t = World.getComponent(e, Timer);\n    if (t.reset) t.timeMilli = 0;\n    t.reset = false;\n    if (!t.stop) t.timeMilli += Time.dtMilli;\n  });\n}\n\nfunction drawTexts(world: World) {\n  world.query({ and: [Text, Transform] }).forEach((e) => {\n    const t = World.getComponent(e, Text);\n    const p = World.getComponent(e, Transform);\n    Ctx2D.ctx.font = `${t.fontSize}px serif`;\n    const old = Ctx2D.ctx.fillStyle;\n    const lines = t.content.split(\"\\n\");\n    for (let i = 0, l = lines.length; i < l; i++) {\n      const txtMetric = Ctx2D.ctx.measureText(lines[i]);\n      Ctx2D.ctx.fillStyle = t.backgroundColor;\n      Ctx2D.ctx.fillRect(\n        p.x,\n        p.y + i * (2 * t.padding) + i * txtMetric.fontBoundingBoxAscent,\n        t.padding * 2 + txtMetric.width,\n        t.padding * 2 + txtMetric.fontBoundingBoxAscent,\n      );\n      Ctx2D.ctx.fillStyle = t.color;\n      Ctx2D.ctx.fillText(\n        lines[i],\n        p.x + t.padding,\n        p.y + i * (2 * t.padding) + (i + 1) * txtMetric.fontBoundingBoxAscent,\n      );\n    }\n    Ctx2D.ctx.fillStyle = old;\n  });\n}\n\nfunction drawRectangle(\n  ctx: CanvasRenderingContext2D,\n  p: typeof Transform,\n  r: typeof Rect,\n  c: typeof Colour,\n) {\n  const oldF = ctx.fillStyle;\n  const oldS = ctx.strokeStyle;\n  ctx.fillStyle = c.fill;\n  ctx.strokeStyle = c.stroke;\n  const cos = Math.cos(p.rad);\n  const sin = Math.sin(p.rad);\n  ctx.transform(cos, sin, -sin, cos, p.x, p.y);\n  const rect = new Path2D(\n    `M ${-r.width * 0.5 * p.scaleX} ${-r.height * 0.5 * p.scaleY} h ${r.width * p.scaleX} v ${r.height * p.scaleY} h ${-r.width * p.scaleX} Z`,\n  );\n  ctx.fill(rect);\n  ctx.stroke(rect);\n  ctx.transform(\n    cos,\n    -sin,\n    sin,\n    cos,\n    cos * -p.x + sin * -p.y,\n    -sin * -p.x + cos * -p.y,\n  );\n  ctx.fillStyle = oldF;\n  ctx.strokeStyle = oldS;\n}\n\nfunction drawRects(world: World) {\n  world.query({ and: [Transform, Rect, Colour] }).forEach((e) => {\n    const p = World.getComponent(e, Transform);\n    const r = World.getComponent(e, Rect);\n    const c = World.getComponent(e, Colour);\n    drawRectangle(Ctx2D.ctx, p, r, c);\n  });\n}\n\nfunction drawPathFindTargets(world: World) {\n  const old = Ctx2D.ctx.fillStyle;\n  Ctx2D.ctx.fillStyle = \"red\";\n  world.query({ and: [PathFinder] }).forEach((e) => {\n    const pf = World.getComponent(e, PathFinder);\n    Ctx2D.ctx.fillRect(pf.targetX - 0.5, pf.targetY - 0.5, 1, 1);\n  });\n  Ctx2D.ctx.fillStyle = old;\n}\n\nfunction drawBg(color: string = \"#424242\") {\n  const old = Ctx2D.ctx.fillStyle;\n  Ctx2D.ctx.fillStyle = color;\n  Ctx2D.ctx.fillRect(0, 0, Ctx2D.canvas.width, Ctx2D.canvas.height);\n  Ctx2D.ctx.fillStyle = old;\n}\n\nfunction handleCamera(world: World) {\n  world.query({ and: [Camera, Transform] }).forEach((e) => {\n    const c = World.getComponent(e, Camera);\n    if (!c.isActive) return;\n    resetTransform(Ctx2D.ctx);\n    const p = World.getComponent(e, Transform);\n    if (c.targetEntity != -1 && World.hasComponent(c.targetEntity, Transform)) {\n      const targetPos = World.getComponent(c.targetEntity, Transform);\n      Object.assign(p, targetPos);\n    }\n    const sin = Math.sin(c.tilt) * c.zoom;\n    const cos = Math.cos(c.tilt) * c.zoom;\n    Ctx2D.ctx.transform(\n      cos,\n      sin,\n      -sin,\n      cos,\n      cos * -p.x - sin * -p.y + Ctx2D.ctx.canvas.width * 0.5,\n      sin * -p.x + cos * -p.y + Ctx2D.ctx.canvas.height * 0.5,\n    );\n  });\n}\n\nfunction move(world: World) {\n  const dt = Time.dtMilli / 1000;\n  world.query({ and: [Transform, Velocity] }).forEach((e) => {\n    const p = World.getComponent(e, Transform);\n    const v = World.getComponent(e, Velocity);\n    p.x += v.x * dt;\n    p.y += v.y * dt;\n  });\n}\n\nfunction drawImg(world: World) {\n  world.query({ and: [Graphic, Transform] }).forEach((e) => {\n    const g = World.getComponent(e, Graphic);\n    const p = World.getComponent(e, Transform);\n    const r = World.hasComponent(e, Rect) && World.getComponent(e, Rect);\n    const img = new Image();\n    img.src = g.src;\n    const imgWidth = r ? r.width : img.width;\n    const imgHeight = r ? r.height : img.height;\n    const scaleX = imgWidth / img.width;\n    const scaleY = imgHeight / img.height;\n    Ctx2D.ctx.transform(scaleX, 0, 0, scaleY, 0, 0);\n    Ctx2D.ctx.drawImage(\n      img,\n      (p.x - imgWidth / 2) / scaleX,\n      (p.y - imgHeight / 2) / scaleY,\n    );\n    Ctx2D.ctx.transform(1 / scaleX, 0, 0, 1 / scaleY, 0, 0);\n  });\n}\n\nfunction handleButtons(world: World) {\n  const pressPos = pointerToScreen(Pointer.pressPos, Ctx2D.canvas);\n  const releasePos = pointerToScreen(Pointer.releasePos, Ctx2D.canvas);\n  world.query({ and: [Button, Transform, Rect, Callback] }).forEach((e) => {\n    const p = World.getComponent(e, Transform);\n    const b = World.getComponent(e, Button);\n    const r = World.getComponent(e, Rect);\n    const cb = World.getComponent(e, Callback);\n    const pressedWithinButton =\n      (pressPos.x - p.x) ** 2 < (r.width / 2) ** 2 &&\n      (pressPos.y - p.y) ** 2 < (r.height / 2) ** 2;\n    b.hovered =\n      (Pointer.x - p.x) ** 2 < (r.width / 2) ** 2 &&\n      (Pointer.y - p.y) ** 2 < (r.height / 2) ** 2;\n    b.pressed = b.hovered && Pointer.isDown && pressedWithinButton;\n    b.clicked =\n      Pointer.justReleased &&\n      pressedWithinButton &&\n      (releasePos.x - p.x) ** 2 < (r.width / 2) ** 2 &&\n      (releasePos.y - p.y) ** 2 < (r.height / 2) ** 2;\n    cb.callback(e);\n  });\n}\n\n// entities\nfunction addGraphic(world: World, src: string, x = 0, y = 0, w = 1, h = 1) {\n  const e = world.addEntity();\n  World.addComponent(e, Transform, { x, y });\n  World.addComponent(e, Graphic, { src });\n  World.addComponent(e, Rect, { width: w, height: h });\n  return e;\n}\nfunction addRect(world: World, x = 0, y = 0, w = 1, h = 1) {\n  const e = world.addEntity();\n  World.addComponent(e, Transform, { x, y });\n  World.addComponent(e, Rect, { width: w, height: h });\n  World.addComponent(e, Colour, { fill: \"green\" });\n  return e;\n}\nfunction addButton(\n  world: World,\n  x = 0,\n  y = 0,\n  w = 10,\n  h = 10,\n  cb = (_: entityT) => {},\n) {\n  const e = world.addEntity();\n  World.addComponent(e, Transform, { x, y });\n  World.addComponent(e, Rect, { width: w, height: h });\n  World.addComponent(e, Button);\n  World.addComponent(e, Colour);\n  World.addComponent(e, Callback, { callback: cb });\n  return e;\n}\nfunction addTimerWithCallback(world: World, cb: (e: entityT) => void) {\n  const e = world.addEntity();\n  World.addComponent(e, Timer);\n  World.addComponent(e, Callback).callback = cb;\n  return e;\n}\nfunction addPlayer(world: World, x = 0, y = 0) {\n  const player = addRect(world, x, y, 1, 1);\n  World.addComponent(player, Velocity);\n  World.addComponent(player, Stats, { moveSpeed: config.player.speed });\n  World.addComponent(player, PlayerControl);\n  World.addComponent(player, PathFinder, { targetX: x, targetY: y });\n  return player;\n}\nfunction addTurrent(world: World, x: number, y: number) {\n  const turrent = addRect(world, x, y, 3, 10);\n  World.addComponent(turrent, Stats);\n  return turrent;\n}\nfunction addCamera(world: World, x: number, y: number) {\n  const cam = world.addEntity();\n  World.addComponent(cam, Camera, { zoom: 30 });\n  World.addComponent(cam, Transform, { x, y });\n  return cam;\n}\n\n//utils\ntype vec2 = { x: number; y: number };\nfunction screenToWorld(\n  pointerPos: vec2,\n  cameraPos: vec2,\n  cameraTilt: number,\n  cameraZoom: number,\n): vec2 {\n  const cos = Math.cos(cameraTilt);\n  const sin = Math.sin(cameraTilt);\n  const res = { x: 0, y: 0 };\n  const x = pointerPos.x - config.viewport.width / 2;\n  const y = pointerPos.y - config.viewport.height / 2;\n  res.x = cos * x + sin * y;\n  res.y = -sin * x + cos * y;\n  res.x /= cameraZoom;\n  res.y /= cameraZoom;\n  res.x += cameraPos.x;\n  res.y += cameraPos.y;\n  return res;\n}\nfunction worldToScreen(\n  pos: vec2,\n  cameraPos: vec2,\n  cameraTilt: number,\n  cameraZoom: number,\n): vec2 {\n  const c = Math.cos(cameraTilt);\n  const s = Math.sin(cameraTilt);\n  const res = { x: 0, y: 0 };\n  let x = pos.x - cameraPos.x;\n  let y = pos.y - cameraPos.y;\n  x *= cameraZoom;\n  y *= cameraZoom;\n  res.x = c * x - s * y;\n  res.y = s * x + c * y;\n  res.x += config.viewport.width * 0.5;\n  res.y += config.viewport.height * 0.5;\n  return res;\n}\nfunction resetTransform(ctx: CanvasRenderingContext2D) {\n  ctx.resetTransform();\n}\n// credit: https://www.30secondsofcode.org/js/s/detect-device-type/\nfunction detectDeviceType(): string {\n  return /Mobile|Android|iPhone|iPad/i.test(navigator.userAgent)\n    ? \"Mobile\"\n    : \"Desktop\";\n}\nfunction pointerToScreen(pointer: vec2, canvas: HTMLCanvasElement): vec2 {\n  const out = { x: 0, y: 0 };\n  const rect = canvas.getBoundingClientRect();\n  out.x = pointer.x - rect.left;\n  out.y = pointer.y - rect.top;\n  if (innerWidth / innerHeight < canvas.width / canvas.height) {\n    out.x *= canvas.width / innerWidth;\n    out.y *= canvas.width / innerWidth;\n  } else {\n    out.x *= canvas.height / innerHeight;\n    out.y *= canvas.height / innerHeight;\n  }\n  return out;\n}\n\nCtx2D.canvas.width = config.viewport.width;\nCtx2D.canvas.height = config.viewport.height;\nCtx2D.canvas.style.imageRendering = \"pixelated\";\nCtx2D.ctx.lineWidth = 0.1;\n\nconst game = new World();\n\nconst player = addPlayer(game, 0, 0);\n\nconst turrent = addTurrent(game, 10, 0);\n\nconst map = addGraphic(game, \"./assets/Map_of_MOBA.svg\", 0, 0, 300, 300);\n\nconst cam = addCamera(game, 0, 0);\nconst camComponent = World.getComponent(cam, Camera);\ncamComponent.targetEntity = player;\ncamComponent.isActive = true;\n\nWorld.addComponent(player, ParticleEmitter, {\n  particleEntity: turrent,\n  speed: 2,\n  particleLifetimeSeconds: 3,\n  spread: 0.2,\n});\n\naddTimerWithCallback(game, (e) => {\n  const timer = World.getComponent(e, Timer);\n  if (timer.timeMilli < 500) return;\n  timer.reset = true;\n  if (!World.hasComponent(player, ParticleEmitter)) {\n    World.deleteEntity(e);\n    return;\n  }\n  World.getComponent(player, ParticleEmitter).emit = true;\n});\n\n// addTimerWithCallback(game, (e) => {\n//   const timer = World.getComponent(e, Timer);\n//   if (timer.timeMilli < 1000) return;\n//   World.deleteEntity(player);\n//   World.deleteEntity(e);\n// });\n\nconst inGameUi = new World();\n\naddButton(\n  inGameUi,\n  config.viewport.width * 0.9,\n  config.viewport.height * 0.8,\n  config.viewport.height * 0.3,\n  config.viewport.height * 0.3,\n  (e) => {\n    const b = World.getComponent(e, Button);\n    b.clicked && console.log(\"clicked\");\n  },\n);\n\n// minimap\n// addGraphic(\n//   inGameUi,\n//   \"./assets/Map_of_MOBA.svg\",\n//   config.viewport.width * 0.1,\n//   config.viewport.height * 0.2,\n//   config.viewport.height * 0.3,\n//   config.viewport.height * 0.3,\n// );\n\nconst debugTextEntity = inGameUi.addEntity();\nconst debugText = World.addComponent(debugTextEntity, Text, {\n  content: \"test string\",\n  backgroundColor: \"white\",\n});\nWorld.addComponent(debugTextEntity, Transform);\n\n(function update() {\n  debugText.content = `FPS: ${Math.ceil(1000 / Time.dtMilli)}\\nEntity count: ${game.entityCount()}\\nDevice type: ${detectDeviceType()}`;\n  drawBg();\n  game.update(\n    handleTimers,\n    handleCamera,\n    handlePathfind,\n    handleInput,\n    handleParticleEmitters,\n    drawImg,\n    drawRects,\n    drawPathFindTargets,\n    move,\n  );\n  resetTransform(Ctx2D.ctx);\n  inGameUi.update(drawImg, drawRects, drawTexts, handleButtons);\n  pointerUpdate(Pointer);\n  keyboardUpdate(Keys);\n  timeUpdate(Time);\n  requestAnimationFrame(update);\n})();\n"],
  "mappings": "MAAO,IAAMA,EAAN,KAAM,CACH,QAAe,CAAA,EACf,QAAgC,IAAI,IACpC,cACA,KAAO,EAEf,YAAYC,EAAwB,CAClC,KAAK,cAAgBA,CACvB,CAEA,KAAM,CACJ,OAAO,KAAK,IACd,CAEA,OAAOC,EAAiB,CACtB,IAAIC,EACJ,OAAI,KAAK,KAAO,KAAK,QAAQ,OAC3BA,EAAM,KAAK,QAAQ,KAAK,IAAI,GAE5BA,EAAM,KAAK,cAAa,EACxB,KAAK,QAAQ,KAAKA,CAAA,GAEpB,KAAK,QAAQ,IAAID,EAAK,KAAK,IAAI,EAC/B,KAAK,OACEC,CACT,CAEA,UAAUD,EAAuB,CAC/B,IAAME,EAAQ,KAAK,QAAQ,IAAIF,CAAA,GAAQ,GACvC,GAAIE,EAAQ,GAAKA,GAAS,KAAK,KAAM,MAAO,GAC5C,IAAMC,EAAU,KAAK,QAAQD,CAAA,EAE7B,KAAK,QAAQA,CAAA,EAAS,KAAK,QAAQ,KAAK,KAAO,CAAA,EAC/C,KAAK,QAAQ,KAAK,KAAO,CAAA,EAAKC,EAC9B,OAAW,CAACC,EAAGC,CAAA,IAAM,KAAK,QACxB,GAAIA,GAAK,KAAK,KAAO,EACrB,MAAK,QAAQ,IAAID,EAAGF,CAAA,EACpB,MAEF,YAAK,QAAQ,OAAOF,CAAA,EACpB,KAAK,OACE,EACT,CAEA,OAAOA,EAAiB,CACtB,IAAME,EAAQ,KAAK,QAAQ,IAAIF,CAAA,GAAQ,GACvC,GAAIE,EAAQ,GAAKA,GAAS,KAAK,KAAM,MAAM,IAAI,MAAM,qBAAA,EACrD,OAAO,KAAK,QAAQA,CAAA,CACtB,CACF,EC9CO,IAAMI,EAAN,MAAMC,CAAA,CACX,OAAe,MAA8B,IAAI,IACjD,OAAe,MAA6B,IAAI,IAEhD,OAAO,SAA2BC,EAAc,CAC1CD,EAAiB,MAAM,IAAIC,CAAA,IAC/BD,EAAiB,MAAM,IAAIC,EAAWD,EAAiB,MAAM,IAAI,EACjEA,EAAiB,MAAM,IACrBC,EACA,IAAIC,EAAiB,KAAO,CAAE,GAAGD,CAAU,EAAC,CAAA,EAEhD,CAEA,OAAO,MAAwBA,EAAsB,CACnD,OAAOD,EAAiB,MAAM,IAAIC,CAAA,GAAc,EAClD,CAEA,OAAO,IAAsBE,EAAcF,EAAiB,CAC1D,OAAO,OAAO,OACXD,EAAiB,MAAM,IAAIC,CAAA,EAAgC,OAAOE,CAAA,EACnEF,CAAA,CAEJ,CAEA,OAAO,OAAyBE,EAAcF,EAAuB,CACnE,OACED,EAAiB,MAAM,IAAIC,CAAA,EAC3B,UAAUE,CAAA,CACd,CAEA,OAAO,IAAsBA,EAAcF,EAAiB,CAC1D,OAAQD,EAAiB,MAAM,IAAIC,CAAA,EAAgC,OACjEE,CAAA,CAEJ,CAEA,OAAO,IAAsBF,EAAsB,CACjD,OAAQD,EAAiB,MAAM,IAAIC,CAAA,EAAgC,IAAG,CACxE,CAEA,OAAO,SAAkB,CACvB,OAAOD,EAAiB,MAAM,IAChC,CAEA,OAAO,OAAkB,CACvB,OAAOA,EAAiB,MAAM,KAAI,EAAG,QAAO,CAC9C,CACF,EC7CO,IAAMI,EAAN,MAAMC,CAAA,CACX,OAAe,QAA+B,IAAI,IAClD,OAAe,aAA0C,IAAI,IAC7D,OAAe,OAAkB,CAAA,EACjC,OAAe,iBAA8B,CAAA,EAErC,cAA8B,IAAI,IAE1C,aAAc,CACZA,EAAM,OAAO,KAAK,IAAI,CACxB,CAEA,OAAO,cAAwB,CAC7B,IAAMC,EAAS,KAAK,OAAM,EAC1B,OAAAD,EAAM,QAAQ,IAAIC,EAAQ,CAAA,EAC1BD,EAAM,aAAa,CAAA,EAAG,IAAIC,CAAA,EACnBA,CACT,CAEA,OAAO,WAAWA,EAA0B,CAC1C,IAAMC,EAAO,KAAK,OAAM,EAClBC,EAAYC,EAAiB,MAAK,EAClCC,EAAO,KAAK,QAAQ,IAAIJ,CAAA,GAAW,EACzCD,EAAM,QAAQ,IAAIE,EAAMG,CAAA,EACxBL,EAAM,aAAaK,CAAA,EAAM,IAAIH,CAAA,EAC7B,QAASI,EAAI,EAAGC,EAAIJ,EAAU,OAAQG,EAAIC,EAAGD,IACrCD,EAAQ,GAAKC,GACnB,OAAO,OACLF,EAAiB,IAAIF,EAAMC,EAAUG,CAAA,CAAE,EACvCF,EAAiB,IAAIH,EAAQE,EAAUG,CAAA,CAAE,CAAA,EAG7C,OAAOJ,CACT,CAEA,OAAe,aAAaG,EAA4B,CACtD,IAAMG,EAAIR,EAAM,aAAa,IAAIK,CAAA,GAAS,IAAI,IAC9C,OAAAL,EAAM,aAAa,IAAIK,EAAMG,CAAA,EACtBA,CACT,CAEA,OAAO,aAAaP,EAAiB,CACnCD,EAAM,iBAAiB,KAAKC,CAAA,CAC9B,CAEA,UAAUA,EAAkBD,EAAM,aAAY,EAAa,CACzD,YAAK,cAAc,IAAIC,CAAA,EAChBA,CACT,CAEA,aAAaA,EAAiB,CAC5B,KAAK,cAAc,OAAOA,CAAA,CAC5B,CAEA,OAAO,kBAAoCQ,EAA4B,CACrE,OAAAL,EAAiB,SAASK,CAAA,EACnBT,CACT,CAEA,OAAO,aACLC,EACAQ,EACS,CACT,QACIT,EAAM,QAAQ,IAAIC,CAAA,GAAW,GAC5B,GAAKG,EAAiB,MAAMK,CAAA,GAC/B,CAEJ,CAEA,OAAO,aACLR,EACAQ,EACAC,EAAqBD,EAClB,CACHT,EAAM,kBAAkBS,CAAA,EACxB,IAAIJ,EAAOL,EAAM,QAAQ,IAAIC,CAAA,GAAW,EAClCU,EAASP,EAAiB,MAAMK,CAAA,EACtC,OAAKJ,EAAQ,GAAKM,IAAY,EACrB,OAAO,OAAOP,EAAiB,IAAIH,EAAQQ,CAAA,EAAYC,CAAA,GAEhEV,EAAM,aAAaK,CAAA,EAAM,OAAOJ,CAAA,EAChCI,GAAQ,GAAKM,EACbX,EAAM,QAAQ,IAAIC,EAAQI,CAAA,EAC1BL,EAAM,aAAaK,CAAA,EAAM,IAAIJ,CAAA,EACtB,OAAO,OAAOG,EAAiB,IAAIH,EAAQQ,CAAA,EAAYC,CAAA,EAChE,CAEA,OAAO,gBACLT,EACAQ,EACS,CACTT,EAAM,kBAAkBS,CAAA,EACxB,IAAIJ,EAAOL,EAAM,QAAQ,IAAIC,CAAA,GAAW,EAClCU,EAASP,EAAiB,MAAMK,CAAA,EACtC,OAAKJ,EAAQ,GAAKM,IAAY,EAAU,IACxCX,EAAM,aAAaK,CAAA,EAAM,OAAOJ,CAAA,EAChCI,GAAQ,EAAE,GAAKM,GACfX,EAAM,QAAQ,IAAIC,EAAQI,CAAA,EAC1BL,EAAM,aAAaK,CAAA,EAAM,IAAIJ,CAAA,EACtBG,EAAiB,OAAOH,EAAQQ,CAAA,EACzC,CAEA,OAAO,aAA+BR,EAAiBQ,EAAiB,CACtE,OAAOL,EAAiB,IAAIH,EAAQQ,CAAA,CACtC,CAEA,UAAUG,EAAiC,CACzC,QAASN,EAAI,EAAGC,EAAIK,EAAI,OAAQN,EAAIC,EAAGD,IAAKM,EAAIN,CAAA,EAAG,IAAI,EACvD,KAAON,EAAM,iBAAiB,QAAQ,CACpC,IAAMC,EAASD,EAAM,iBAAiB,IAAG,EACzC,QAASM,EAAI,EAAGC,EAAIP,EAAM,OAAO,OAAQM,EAAIC,EAAGD,IAC9CN,EAAM,OAAOM,CAAA,EAAG,cAAc,OAAOL,CAAA,EAEvC,IAAMY,EAAQT,EAAiB,MAAK,EAC9BC,EAAOL,EAAM,QAAQ,IAAIC,CAAA,GAAW,EAC1CD,EAAM,aAAaK,CAAA,EAAM,OAAOJ,CAAA,EAChC,QAASK,EAAI,EAAGC,EAAIM,EAAM,OAAQP,EAAIC,EAAGD,IACjCD,EAAQ,GAAKC,GACnBF,EAAiB,OAAOH,EAAQY,EAAMP,CAAA,CAAE,CAE5C,CACF,CAEA,MAAMQ,EAA0B,CAC9B,IAAIC,EAAU,EACZC,EAAU,EACZ,GAAIF,EAAM,IACR,QAASR,EAAI,EAAGC,EAAIO,EAAM,IAAI,OAAQR,EAAIC,EAAGD,IAC3CS,GAAW,GAAKX,EAAiB,MAAMU,EAAM,IAAIR,CAAA,CAAE,EAGvD,GAAIQ,EAAM,IACR,QAASR,EAAI,EAAGC,EAAIO,EAAM,IAAI,OAAQR,EAAIC,EAAGD,IAC3CU,GAAW,GAAKZ,EAAiB,MAAMU,EAAM,IAAIR,CAAA,CAAE,EAGvD,IAAMW,EAAM,CAAA,EACZ,QACMC,EAAalB,EAAM,aAAa,KAAI,EAAG,QAAO,EAChDO,EAAIW,EAAW,OACfZ,EAAI,EACNA,EAAIC,EACJD,IACA,CACA,IAAME,EAAIU,EAAWZ,CAAA,EACfa,EAAMnB,EAAM,aAAaQ,CAAA,EAC3BW,EAAI,MAAQ,IACfX,EAAIO,IAAYA,IAAYP,EAAIQ,IAAY,GAAKC,EAAI,KAAI,GAAIE,CAAA,CAChE,CACA,MAAO,IAAI,KAAK,cAAc,aAAa,IAAI,IAAIF,CAAA,CAAA,EACrD,CAEA,aAAsB,CACpB,OAAO,KAAK,cAAc,IAC5B,CACF,ECjKA,IAAAG,EAAA,CACE,SAAY,CACV,MAAS,IACT,OAAU,GACZ,EACA,OAAU,CACR,MAAS,EACX,EACA,QAAW,CACT,MAAS,GACT,UAAa,CACf,CACF,ECgBA,IAAMC,EAAQ,CACZ,YAAa,EACb,YAAa,EACb,aAAc,EACd,aAAc,EACd,UAAW,EACX,YAAa,CACf,EACMC,EAAW,CAAE,SAAU,IAAI,QAAW,EACtCC,EAAY,CAAE,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,OAAQ,EAAG,OAAQ,CAAE,EACvDC,EAAW,CAAE,EAAG,EAAG,EAAG,CAAE,EACxBC,EAAgB,CAAC,EAEvB,IAAMC,EAAkB,CACtB,OAAQ,EACR,eAAgB,GAChB,wBAAyB,EACzB,MAAO,EACP,KAAM,EACR,EACMC,EAAS,CAAE,KAAM,GAAI,KAAM,EAAG,SAAU,GAAO,aAAc,EAAG,EAChEC,EAAO,CAAE,MAAO,EAAG,OAAQ,CAAE,EAC7BC,EAAU,CAAE,IAAK,EAAG,EACpBC,EAAS,CAAE,QAAS,GAAO,QAAS,GAAO,QAAS,EAAM,EAC1DC,EAAS,CAAE,KAAM,QAAS,OAAQ,OAAQ,EAC1CC,EAAO,CACX,QAAS,GACT,SAAU,GACV,QAAS,EACT,MAAO,QACP,gBAAiB,OACnB,EACMC,EAAQ,CAAE,UAAW,EAAG,MAAO,GAAO,KAAM,EAAM,EAClDC,EAAa,CAAE,QAAS,EAAG,QAAS,CAAE,EAGtCC,EAAQC,EAAA,EACRC,EAAUC,EAAA,EACVC,EAAOC,EAAA,EACPC,EAAOC,EAAA,EAEb,SAASN,GAAA,CAIP,IAAMO,EACJ,SAAS,cAAc,QAAA,GAAa,SAAS,cAAc,QAAA,EAC7D,GAAI,CAACA,EAAQ,MAAM,IAAI,MAAM,+BAAA,EAC7B,IAAMC,EAAMD,EAAO,WAAW,IAAA,EAC9B,GAAI,CAACC,EAAK,MAAM,IAAI,MAAM,+BAAA,EAE1B,gBAAS,KAAK,YAAYD,CAAA,EAE1B,WAAW,SAAW,WAAW,OAAS,IAAA,CACpC,WAAa,YAAcA,EAAO,MAAQA,EAAO,QACnDA,EAAO,MAAM,MAAQ,OACrBA,EAAO,MAAM,OAAS,KAEtBA,EAAO,MAAM,MAAQ,GACrBA,EAAO,MAAM,OAAS,OAE1B,EAEO,CAAE,OAAAA,EAAQ,IAAAC,CAAI,CACvB,CACA,SAASJ,GAAA,CAIP,IAAMK,EAAyC,CAC7C,OAAQ,CAAC,EACT,YAAa,CAAC,EACd,aAAc,CAAC,CACjB,EAEA,kBAAW,UAAaC,GAAA,CACtB,CAACD,EAAK,OAAOC,EAAE,GAAG,IAAMD,EAAK,YAAYC,EAAE,GAAG,EAAI,IAClDD,EAAK,OAAOC,EAAE,GAAG,EAAI,EACvB,EACA,WAAW,QAAWA,GAAA,CACpBD,EAAK,OAAOC,EAAE,GAAG,EAAI,GACrBD,EAAK,aAAaC,EAAE,GAAG,EAAI,EAC7B,EAEOD,CACT,CACA,SAASE,EACPF,EAGC,CAED,QAAWG,KAAOH,EAAK,YAAaA,EAAK,YAAYG,CAAA,EAAO,GAC5D,QAAWA,KAAOH,EAAK,aAAcA,EAAK,aAAaG,CAAA,EAAO,EAChE,CACA,SAASV,GAAA,CACP,IAAMW,EAAU,CACd,EAAG,EACH,EAAG,EACH,OAAQ,GACR,YAAa,GACb,aAAc,GACd,SAAU,CAAE,EAAG,EAAG,EAAG,CAAE,EACvB,WAAY,CAAE,EAAG,EAAG,EAAG,CAAE,CAC3B,EAEA,kBAAW,cAAiBH,GAAA,CACxBG,EAAQ,EAAIH,EAAE,EAAKG,EAAQ,EAAIH,EAAE,EACnC,OAAO,OAAOG,EAAQ,SAAUA,CAAA,EAChCA,EAAQ,OAASA,EAAQ,YAAc,EACzC,EAEA,WAAW,YAAeH,GAAA,CACtBG,EAAQ,EAAIH,EAAE,EAAKG,EAAQ,EAAIH,EAAE,EACnC,OAAO,OAAOG,EAAQ,WAAYA,CAAA,EAChCA,EAAQ,OAAS,GAASA,EAAQ,aAAe,EACrD,EAEA,WAAW,cAAiBH,GAAA,CACxBG,EAAQ,EAAIH,EAAE,EAAKG,EAAQ,EAAIH,EAAE,CACrC,EAEOG,CACT,CACA,SAASC,EACPD,EAAmE,CAEnEA,EAAQ,YAAc,GACtBA,EAAQ,aAAe,EACzB,CACA,SAASP,GAAA,CACP,MAAO,CAAE,QAAS,EAAG,UAAW,CAAE,CACpC,CACA,SAASS,EAAWC,EAA4C,CAC9DA,EAAK,QAAU,YAAY,IAAG,EAAKA,EAAK,UACxCA,EAAK,WAAaA,EAAK,OACzB,CAGA,SAASC,EAAuBC,EAAY,CAC1CA,EAAM,MAAM,CAAE,IAAK,CAAC5B,EAAiB6B,EAAW,CAAA,EAAG,QAAST,GAAA,CAC1D,IAAMU,EAAUC,EAAM,aAAaX,EAAGpB,CAAA,EACtC,GAAI,CAAC8B,EAAQ,MAAQ,CAACC,EAAM,aAAaD,EAAQ,eAAgBD,CAAA,EAC/D,OACFC,EAAQ,KAAO,GACf,IAAME,EAAID,EAAM,aAAaX,EAAGS,CAAA,EAC1BI,EAAWF,EAAM,WAAWD,EAAQ,cAAc,EAClDI,EAAoBH,EAAM,aAAaE,EAAUJ,CAAA,EACvD,OAAO,OAAOK,EAAmBF,CAAA,EACjCJ,EAAM,UAAUK,CAAA,EAChB,IAAME,EAAQJ,EAAM,aAAaE,EAAU1B,CAAA,EACrC6B,EAAO,KAAK,OAAM,EAAK,GACvBC,EACJL,EAAE,IAAM,KAAK,OAAM,EAAKF,EAAQ,OAAS,KAAK,IAAM,GAAK,CAACM,GAAO,CAAC,CAACA,GACrEF,EAAkB,IAAMG,EACxBN,EAAM,aAAaE,EAAUK,EAAU,CACrC,EAAG,KAAK,IAAID,CAAA,EAAUP,EAAQ,MAC9B,EAAG,KAAK,IAAIO,CAAA,EAAUP,EAAQ,KAChC,CAAA,EACAC,EAAM,aAAaE,EAAUM,CAAA,EAAU,SAAW,IAAA,CAC5CJ,EAAM,UAAYL,EAAQ,wBAA0B,KACxDC,EAAM,aAAaE,CAAA,CACrB,CACF,CAAA,CACF,CACA,SAASO,EAAYZ,EAAY,CAC/B,IAAIa,EACAC,EACJd,EAAM,MAAM,CAAE,IAAK,CAAC3B,EAAQ4B,EAAW,CAAA,EAAG,QAAST,GAAA,CACjD,IAAMuB,EAAIZ,EAAM,aAAaX,EAAGnB,CAAA,EAC3B0C,EAAE,WACPF,EAASE,EACTD,EAAeX,EAAM,aAAaX,EAAGS,CAAA,EACvC,CAAA,EACA,IAAMe,EAAWC,EAAgBlC,EAAQ,SAAUF,EAAM,MAAM,EAC/DmB,EAAM,MAAM,CAAE,IAAK,CAACpB,EAAYsC,EAAe,CAAA,EAAG,QAAS1B,GAAA,CACzD,GAAI,CAACqB,GAAU,CAACC,EAAc,OAC9B,IAAMK,EAAKhB,EAAM,aAAaX,EAAGZ,CAAA,EACjC,GAAI,CAACG,EAAQ,YAAa,OAC1B,IAAMqC,EAAWC,GACfL,EACAF,EACAD,EAAO,KACPA,EAAO,IAAI,EAEbM,EAAG,QAAUC,EAAS,EACtBD,EAAG,QAAUC,EAAS,CACxB,CAAA,CACF,CAEA,SAASE,EAAetB,EAAY,CAClCA,EACG,MAAM,CAAE,IAAK,CAACpB,EAAYqB,EAAWS,EAAUa,EAAO,CAAA,EACtD,QAAS/B,GAAA,CACR,IAAM2B,EAAKhB,EAAM,aAAaX,EAAGZ,CAAA,EAC3B4C,EAAIrB,EAAM,aAAaX,EAAGS,CAAA,EAC1BwB,EAAItB,EAAM,aAAaX,EAAGkB,CAAA,EAC1B,EAAIP,EAAM,aAAaX,EAAG+B,CAAA,EAE1BG,EAAKP,EAAG,QAAUK,EAAE,EACpBG,EAAKR,EAAG,QAAUK,EAAE,EACpBI,GAAQF,EAAKA,EAAKC,EAAKA,IAAO,GACpC,GAAIC,GAAQ,EAAG,OACf,IAAMC,EAAoB,EAAE,UAAY1C,EAAK,QAAW,IAAQ,EAC1D2C,EACJF,EAAOC,EACH,EAAE,UACD,EAAE,UAAYD,EAAQC,EAC7BJ,EAAE,EAAKC,EAAKE,EAAQE,EACpBL,EAAE,EAAKE,EAAKC,EAAQE,CACtB,CAAA,CACJ,CAEA,SAASC,GAAa/B,EAAY,CAChCA,EAAM,MAAM,CAAE,IAAK,CAACrB,EAAO,CAAA,EAAG,QAASa,GAAA,CACrCW,EAAM,aAAaX,EAAGmB,CAAA,GACpBR,EAAM,aAAaX,EAAGmB,CAAA,EAAU,SAASnB,CAAA,EAC3C,IAAMY,EAAID,EAAM,aAAaX,EAAGb,CAAA,EAC5ByB,EAAE,QAAOA,EAAE,UAAY,GAC3BA,EAAE,MAAQ,GACLA,EAAE,OAAMA,EAAE,WAAajB,EAAK,QACnC,CAAA,CACF,CAEA,SAAS6C,GAAUhC,EAAY,CAC7BA,EAAM,MAAM,CAAE,IAAK,CAACtB,EAAMuB,EAAW,CAAA,EAAG,QAAST,GAAA,CAC/C,IAAMY,EAAID,EAAM,aAAaX,EAAGd,CAAA,EAC1B8C,EAAIrB,EAAM,aAAaX,EAAGS,CAAA,EAChCpB,EAAM,IAAI,KAAO,GAAGuB,EAAE,QAAQ,WAC9B,IAAM6B,EAAMpD,EAAM,IAAI,UAChBqD,EAAQ9B,EAAE,QAAQ,MAAM;CAAA,EAC9B,QAAS+B,EAAI,EAAG,EAAID,EAAM,OAAQC,EAAI,EAAGA,IAAK,CAC5C,IAAMC,EAAYvD,EAAM,IAAI,YAAYqD,EAAMC,CAAA,CAAE,EAChDtD,EAAM,IAAI,UAAYuB,EAAE,gBACxBvB,EAAM,IAAI,SACR2C,EAAE,EACFA,EAAE,EAAIW,GAAK,EAAI/B,EAAE,SAAW+B,EAAIC,EAAU,sBAC1ChC,EAAE,QAAU,EAAIgC,EAAU,MAC1BhC,EAAE,QAAU,EAAIgC,EAAU,qBAAqB,EAEjDvD,EAAM,IAAI,UAAYuB,EAAE,MACxBvB,EAAM,IAAI,SACRqD,EAAMC,CAAA,EACNX,EAAE,EAAIpB,EAAE,QACRoB,EAAE,EAAIW,GAAK,EAAI/B,EAAE,UAAY+B,EAAI,GAAKC,EAAU,qBAAqB,CAEzE,CACAvD,EAAM,IAAI,UAAYoD,CACxB,CAAA,CACF,CAEA,SAASI,GACP/C,EACAkC,EACAc,EACAvB,EAAgB,CAEhB,IAAMwB,EAAOjD,EAAI,UACXkD,EAAOlD,EAAI,YACjBA,EAAI,UAAYyB,EAAE,KAClBzB,EAAI,YAAcyB,EAAE,OACpB,IAAM0B,EAAM,KAAK,IAAIjB,EAAE,GAAG,EACpBkB,EAAM,KAAK,IAAIlB,EAAE,GAAG,EAC1BlC,EAAI,UAAUmD,EAAKC,EAAK,CAACA,EAAKD,EAAKjB,EAAE,EAAGA,EAAE,CAAC,EAC3C,IAAMmB,EAAO,IAAI,OACf,KAAK,CAACL,EAAE,MAAQ,GAAMd,EAAE,MAAM,IAAI,CAACc,EAAE,OAAS,GAAMd,EAAE,MAAM,MAAMc,EAAE,MAAQd,EAAE,MAAM,MAAMc,EAAE,OAASd,EAAE,MAAM,MAAM,CAACc,EAAE,MAAQd,EAAE,MAAM,IAAI,EAE5IlC,EAAI,KAAKqD,CAAA,EACTrD,EAAI,OAAOqD,CAAA,EACXrD,EAAI,UACFmD,EACA,CAACC,EACDA,EACAD,EACAA,EAAM,CAACjB,EAAE,EAAIkB,EAAM,CAAClB,EAAE,EACtB,CAACkB,EAAM,CAAClB,EAAE,EAAIiB,EAAM,CAACjB,EAAE,CAAC,EAE1BlC,EAAI,UAAYiD,EAChBjD,EAAI,YAAckD,CACpB,CAEA,SAASI,EAAU5C,EAAY,CAC7BA,EAAM,MAAM,CAAE,IAAK,CAACC,EAAW3B,EAAMG,EAAQ,CAAA,EAAG,QAASe,GAAA,CACvD,IAAMgC,EAAIrB,EAAM,aAAaX,EAAGS,CAAA,EAC1BqC,EAAInC,EAAM,aAAaX,EAAGlB,CAAA,EAC1ByC,EAAIZ,EAAM,aAAaX,EAAGf,CAAA,EAChC4D,GAAcxD,EAAM,IAAK2C,EAAGc,EAAGvB,CAAA,CACjC,CAAA,CACF,CAEA,SAAS8B,GAAoB7C,EAAY,CACvC,IAAMiC,EAAMpD,EAAM,IAAI,UACtBA,EAAM,IAAI,UAAY,MACtBmB,EAAM,MAAM,CAAE,IAAK,CAACpB,EAAY,CAAA,EAAG,QAASY,GAAA,CAC1C,IAAM2B,EAAKhB,EAAM,aAAaX,EAAGZ,CAAA,EACjCC,EAAM,IAAI,SAASsC,EAAG,QAAU,GAAKA,EAAG,QAAU,GAAK,EAAG,CAAA,CAC5D,CAAA,EACAtC,EAAM,IAAI,UAAYoD,CACxB,CAEA,SAASa,GAAOC,EAAgB,UAAS,CACvC,IAAMd,EAAMpD,EAAM,IAAI,UACtBA,EAAM,IAAI,UAAYkE,EACtBlE,EAAM,IAAI,SAAS,EAAG,EAAGA,EAAM,OAAO,MAAOA,EAAM,OAAO,MAAM,EAChEA,EAAM,IAAI,UAAYoD,CACxB,CAEA,SAASe,GAAahD,EAAY,CAChCA,EAAM,MAAM,CAAE,IAAK,CAAC3B,EAAQ4B,EAAW,CAAA,EAAG,QAAST,GAAA,CACjD,IAAMuB,EAAIZ,EAAM,aAAaX,EAAGnB,CAAA,EAChC,GAAI,CAAC0C,EAAE,SAAU,OACjBkC,EAAepE,EAAM,GAAG,EACxB,IAAM2C,EAAIrB,EAAM,aAAaX,EAAGS,CAAA,EAChC,GAAIc,EAAE,cAAgB,IAAMZ,EAAM,aAAaY,EAAE,aAAcd,CAAA,EAAY,CACzE,IAAMiD,EAAY/C,EAAM,aAAaY,EAAE,aAAcd,CAAA,EACrD,OAAO,OAAOuB,EAAG0B,CAAA,CACnB,CACA,IAAMR,EAAM,KAAK,IAAI3B,EAAE,IAAI,EAAIA,EAAE,KAC3B0B,EAAM,KAAK,IAAI1B,EAAE,IAAI,EAAIA,EAAE,KACjClC,EAAM,IAAI,UACR4D,EACAC,EACA,CAACA,EACDD,EACAA,EAAM,CAACjB,EAAE,EAAIkB,EAAM,CAAClB,EAAE,EAAI3C,EAAM,IAAI,OAAO,MAAQ,GACnD6D,EAAM,CAAClB,EAAE,EAAIiB,EAAM,CAACjB,EAAE,EAAI3C,EAAM,IAAI,OAAO,OAAS,EAAA,CAExD,CAAA,CACF,CAEA,SAASsE,GAAKnD,EAAY,CACxB,IAAMoD,EAAKjE,EAAK,QAAU,IAC1Ba,EAAM,MAAM,CAAE,IAAK,CAACC,EAAWS,EAAU,CAAA,EAAG,QAASlB,GAAA,CACnD,IAAMgC,EAAIrB,EAAM,aAAaX,EAAGS,CAAA,EAC1BwB,EAAItB,EAAM,aAAaX,EAAGkB,CAAA,EAChCc,EAAE,GAAKC,EAAE,EAAI2B,EACb5B,EAAE,GAAKC,EAAE,EAAI2B,CACf,CAAA,CACF,CAEA,SAASC,EAAQrD,EAAY,CAC3BA,EAAM,MAAM,CAAE,IAAK,CAACzB,EAAS0B,EAAW,CAAA,EAAG,QAAST,GAAA,CAClD,IAAM8D,EAAInD,EAAM,aAAaX,EAAGjB,CAAA,EAC1BiD,EAAIrB,EAAM,aAAaX,EAAGS,CAAA,EAC1B,EAAIE,EAAM,aAAaX,EAAGlB,CAAA,GAAS6B,EAAM,aAAaX,EAAGlB,CAAA,EACzDiF,EAAM,IAAI,MAChBA,EAAI,IAAMD,EAAE,IACZ,IAAME,EAAW,EAAI,EAAE,MAAQD,EAAI,MAC7BE,EAAY,EAAI,EAAE,OAASF,EAAI,OAC/BG,EAASF,EAAWD,EAAI,MACxBI,EAASF,EAAYF,EAAI,OAC/B1E,EAAM,IAAI,UAAU6E,EAAQ,EAAG,EAAGC,EAAQ,EAAG,CAAA,EAC7C9E,EAAM,IAAI,UACR0E,GACC/B,EAAE,EAAIgC,EAAW,GAAKE,GACtBlC,EAAE,EAAIiC,EAAY,GAAKE,CAAA,EAE1B9E,EAAM,IAAI,UAAU,EAAI6E,EAAQ,EAAG,EAAG,EAAIC,EAAQ,EAAG,CAAA,CACvD,CAAA,CACF,CAEA,SAASC,GAAc5D,EAAY,CACjC,IAAMgB,EAAWC,EAAgBlC,EAAQ,SAAUF,EAAM,MAAM,EACzDgF,EAAa5C,EAAgBlC,EAAQ,WAAYF,EAAM,MAAM,EACnEmB,EAAM,MAAM,CAAE,IAAK,CAACxB,EAAQyB,EAAW3B,EAAMqC,EAAU,CAAA,EAAG,QAASnB,GAAA,CACjE,IAAMgC,EAAIrB,EAAM,aAAaX,EAAGS,CAAA,EAC1B6D,EAAI3D,EAAM,aAAaX,EAAGhB,CAAA,EAC1B8D,EAAInC,EAAM,aAAaX,EAAGlB,CAAA,EAC1ByF,EAAK5D,EAAM,aAAaX,EAAGmB,CAAA,EAC3BqD,GACHhD,EAAS,EAAIQ,EAAE,IAAM,GAAKc,EAAE,MAAQ,IAAM,IAC1CtB,EAAS,EAAIQ,EAAE,IAAM,GAAKc,EAAE,OAAS,IAAM,EAC9CwB,EAAE,SACC/E,EAAQ,EAAIyC,EAAE,IAAM,GAAKc,EAAE,MAAQ,IAAM,IACzCvD,EAAQ,EAAIyC,EAAE,IAAM,GAAKc,EAAE,OAAS,IAAM,EAC7CwB,EAAE,QAAUA,EAAE,SAAW/E,EAAQ,QAAUiF,EAC3CF,EAAE,QACA/E,EAAQ,cACRiF,IACCH,EAAW,EAAIrC,EAAE,IAAM,GAAKc,EAAE,MAAQ,IAAM,IAC5CuB,EAAW,EAAIrC,EAAE,IAAM,GAAKc,EAAE,OAAS,IAAM,EAChDyB,EAAG,SAASvE,CAAA,CACd,CAAA,CACF,CAGA,SAASyE,GAAWjE,EAAckE,EAAaC,EAAI,EAAGC,EAAI,EAAGC,EAAI,EAAGC,EAAI,EAAC,CACvE,IAAM9E,EAAIQ,EAAM,UAAS,EACzB,OAAAG,EAAM,aAAaX,EAAGS,EAAW,CAAE,EAAAkE,EAAG,EAAAC,CAAE,CAAA,EACxCjE,EAAM,aAAaX,EAAGjB,EAAS,CAAE,IAAA2F,CAAI,CAAA,EACrC/D,EAAM,aAAaX,EAAGlB,EAAM,CAAE,MAAO+F,EAAG,OAAQC,CAAE,CAAA,EAC3C9E,CACT,CACA,SAAS+E,EAAQvE,EAAcmE,EAAI,EAAGC,EAAI,EAAGC,EAAI,EAAGC,EAAI,EAAC,CACvD,IAAM9E,EAAIQ,EAAM,UAAS,EACzB,OAAAG,EAAM,aAAaX,EAAGS,EAAW,CAAE,EAAAkE,EAAG,EAAAC,CAAE,CAAA,EACxCjE,EAAM,aAAaX,EAAGlB,EAAM,CAAE,MAAO+F,EAAG,OAAQC,CAAE,CAAA,EAClDnE,EAAM,aAAaX,EAAGf,EAAQ,CAAE,KAAM,OAAQ,CAAA,EACvCe,CACT,CACA,SAASgF,GACPxE,EACAmE,EAAI,EACJC,EAAI,EACJC,EAAI,GACJC,EAAI,GACJP,EAAMU,GAAA,CAAgB,EAAC,CAEvB,IAAMjF,EAAIQ,EAAM,UAAS,EACzB,OAAAG,EAAM,aAAaX,EAAGS,EAAW,CAAE,EAAAkE,EAAG,EAAAC,CAAE,CAAA,EACxCjE,EAAM,aAAaX,EAAGlB,EAAM,CAAE,MAAO+F,EAAG,OAAQC,CAAE,CAAA,EAClDnE,EAAM,aAAaX,EAAGhB,CAAA,EACtB2B,EAAM,aAAaX,EAAGf,CAAA,EACtB0B,EAAM,aAAaX,EAAGmB,EAAU,CAAE,SAAUoD,CAAG,CAAA,EACxCvE,CACT,CACA,SAASkF,GAAqB1E,EAAc+D,EAAwB,CAClE,IAAMvE,EAAIQ,EAAM,UAAS,EACzB,OAAAG,EAAM,aAAaX,EAAGb,CAAA,EACtBwB,EAAM,aAAaX,EAAGmB,CAAA,EAAU,SAAWoD,EACpCvE,CACT,CACA,SAASmF,GAAU3E,EAAcmE,EAAI,EAAGC,EAAI,EAAC,CAC3C,IAAMQ,EAASL,EAAQvE,EAAOmE,EAAGC,EAAG,EAAG,CAAA,EACvC,OAAAjE,EAAM,aAAayE,EAAQlE,CAAA,EAC3BP,EAAM,aAAayE,EAAQrD,EAAO,CAAE,UAAWsD,EAAO,OAAO,KAAM,CAAA,EACnE1E,EAAM,aAAayE,EAAQ1D,CAAA,EAC3Bf,EAAM,aAAayE,EAAQhG,EAAY,CAAE,QAASuF,EAAG,QAASC,CAAE,CAAA,EACzDQ,CACT,CACA,SAASE,GAAW9E,EAAcmE,EAAWC,EAAS,CACpD,IAAMW,EAAUR,EAAQvE,EAAOmE,EAAGC,EAAG,EAAG,EAAA,EACxC,OAAAjE,EAAM,aAAa4E,EAASxD,CAAA,EACrBwD,CACT,CACA,SAASC,GAAUhF,EAAcmE,EAAWC,EAAS,CACnD,IAAMa,EAAMjF,EAAM,UAAS,EAC3B,OAAAG,EAAM,aAAa8E,EAAK5G,EAAQ,CAAE,KAAM,EAAG,CAAA,EAC3C8B,EAAM,aAAa8E,EAAKhF,EAAW,CAAE,EAAAkE,EAAG,EAAAC,CAAE,CAAA,EACnCa,CACT,CAIA,SAAS5D,GACP6D,EACAC,EACAC,EACAC,EAAkB,CAElB,IAAM5C,EAAM,KAAK,IAAI2C,CAAA,EACf1C,EAAM,KAAK,IAAI0C,CAAA,EACfE,EAAM,CAAE,EAAG,EAAG,EAAG,CAAE,EACnBnB,EAAIe,EAAW,EAAIL,EAAO,SAAS,MAAQ,EAC3CT,EAAIc,EAAW,EAAIL,EAAO,SAAS,OAAS,EAClD,OAAAS,EAAI,EAAI7C,EAAM0B,EAAIzB,EAAM0B,EACxBkB,EAAI,EAAI,CAAC5C,EAAMyB,EAAI1B,EAAM2B,EACzBkB,EAAI,GAAKD,EACTC,EAAI,GAAKD,EACTC,EAAI,GAAKH,EAAU,EACnBG,EAAI,GAAKH,EAAU,EACZG,CACT,CAoBA,SAASC,EAAeC,EAA6B,CACnDA,EAAI,eAAc,CACpB,CAEA,SAASC,IAAA,CACP,MAAO,8BAA8B,KAAK,UAAU,SAAS,EACzD,SACA,SACN,CACA,SAASC,EAAgBC,EAAeC,EAAyB,CAC/D,IAAMC,EAAM,CAAE,EAAG,EAAG,EAAG,CAAE,EACnBC,EAAOF,EAAO,sBAAqB,EACzC,OAAAC,EAAI,EAAIF,EAAQ,EAAIG,EAAK,KACzBD,EAAI,EAAIF,EAAQ,EAAIG,EAAK,IACrB,WAAa,YAAcF,EAAO,MAAQA,EAAO,QACnDC,EAAI,GAAKD,EAAO,MAAQ,WACxBC,EAAI,GAAKD,EAAO,MAAQ,aAExBC,EAAI,GAAKD,EAAO,OAAS,YACzBC,EAAI,GAAKD,EAAO,OAAS,aAEpBC,CACT,CAEAE,EAAM,OAAO,MAAQC,EAAO,SAAS,MACrCD,EAAM,OAAO,OAASC,EAAO,SAAS,OACtCD,EAAM,OAAO,MAAM,eAAiB,YACpCA,EAAM,IAAI,UAAY,GAEtB,IAAME,EAAO,IAAIC,EAEXC,EAASC,GAAUH,EAAM,EAAG,CAAA,EAE5BI,GAAUC,GAAWL,EAAM,GAAI,CAAA,EAE/BM,GAAMC,GAAWP,EAAM,2BAA4B,EAAG,EAAG,IAAK,GAAA,EAE9DQ,GAAMC,GAAUT,EAAM,EAAG,CAAA,EACzBU,EAAeT,EAAM,aAAaO,GAAKG,CAAA,EAC7CD,EAAa,aAAeR,EAC5BQ,EAAa,SAAW,GAExBT,EAAM,aAAaC,EAAQU,EAAiB,CAC1C,eAAgBR,GAChB,MAAO,EACP,wBAAyB,EACzB,OAAQ,EACV,CAAA,EAEAS,GAAqBb,EAAO,GAAA,CAC1B,IAAMc,EAAQb,EAAM,aAAa,EAAGc,CAAA,EACpC,GAAI,EAAAD,EAAM,UAAY,KAEtB,IADAA,EAAM,MAAQ,GACV,CAACb,EAAM,aAAaC,EAAQU,CAAA,EAAkB,CAChDX,EAAM,aAAa,CAAA,EACnB,MACF,CACAA,EAAM,aAAaC,EAAQU,CAAA,EAAiB,KAAO,GACrD,CAAA,EASA,IAAMI,EAAW,IAAIf,EAErBgB,GACED,EACAjB,EAAO,SAAS,MAAQ,GACxBA,EAAO,SAAS,OAAS,GACzBA,EAAO,SAAS,OAAS,GACzBA,EAAO,SAAS,OAAS,GACxB,GAAA,CACWE,EAAM,aAAa,EAAGiB,CAAA,EAC9B,SAAW,QAAQ,IAAI,SAAA,CAC3B,CAAA,EAaF,IAAMC,EAAkBH,EAAS,UAAS,EACpCI,GAAYnB,EAAM,aAAakB,EAAiBE,EAAM,CAC1D,QAAS,cACT,gBAAiB,OACnB,CAAA,EACApB,EAAM,aAAakB,EAAiBG,CAAA,GAEnC,SAASC,GAAA,CACRH,GAAU,QAAU,QAAQ,KAAK,KAAK,IAAOI,EAAK,OAAO,CAAA;gBAAoBxB,EAAK,YAAW,CAAA;eAAoBR,GAAA,CAAA,GACjHiC,GAAA,EACAzB,EAAK,OACH0B,GACAC,GACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GACAC,EAAA,EAEF5C,EAAeQ,EAAM,GAAG,EACxBkB,EAAS,OAAOe,EAASC,EAAWG,GAAWC,EAAA,EAC/CC,EAAcC,CAAA,EACdC,EAAeC,CAAA,EACfC,EAAWjB,CAAA,EACX,sBAAsBD,CAAA,CACxB,GAAC",
  "names": ["ObjectPoolMap", "objectFactory", "key", "obj", "index", "removed", "k", "v", "ComponentManager", "_ComponentManager", "component", "ObjectPoolMap", "key", "World", "_World", "entity", "copy", "compTypes", "ComponentManager", "mask", "i", "l", "a", "component", "values", "compId", "fns", "types", "query", "andMask", "notMask", "res", "archetypes", "set", "config_default", "Stats", "Callback", "Transform", "Velocity", "PlayerControl", "ParticleEmitter", "Camera", "Rect", "Graphic", "Button", "Colour", "Text", "Timer", "PathFinder", "Ctx2D", "setUpCanvas2D", "Pointer", "setUpPointer", "Keys", "setUpKeyboard", "Time", "setUpTime", "canvas", "ctx", "keys", "e", "keyboardUpdate", "key", "pointer", "pointerUpdate", "timeUpdate", "time", "handleParticleEmitters", "world", "Transform", "emitter", "World", "t", "particle", "particleTransform", "timer", "rand", "radian", "Velocity", "Callback", "handleInput", "camera", "camTransform", "c", "pressPos", "pointerToScreen", "PlayerControl", "pf", "worldPos", "screenToWorld", "handlePathfind", "Stats", "p", "v", "dx", "dy", "dMag", "controlDistance", "adjustedSpeed", "handleTimers", "drawTexts", "old", "lines", "i", "txtMetric", "drawRectangle", "r", "oldF", "oldS", "cos", "sin", "rect", "drawRects", "drawPathFindTargets", "drawBg", "color", "handleCamera", "resetTransform", "targetPos", "move", "dt", "drawImg", "g", "img", "imgWidth", "imgHeight", "scaleX", "scaleY", "handleButtons", "releasePos", "b", "cb", "pressedWithinButton", "addGraphic", "src", "x", "y", "w", "h", "addRect", "addButton", "_", "addTimerWithCallback", "addPlayer", "player", "config_default", "addTurrent", "turrent", "addCamera", "cam", "pointerPos", "cameraPos", "cameraTilt", "cameraZoom", "res", "resetTransform", "ctx", "detectDeviceType", "pointerToScreen", "pointer", "canvas", "out", "rect", "Ctx2D", "config_default", "game", "World", "player", "addPlayer", "turrent", "addTurrent", "map", "addGraphic", "cam", "addCamera", "camComponent", "Camera", "ParticleEmitter", "addTimerWithCallback", "timer", "Timer", "inGameUi", "addButton", "Button", "debugTextEntity", "debugText", "Text", "Transform", "update", "Time", "drawBg", "handleTimers", "handleCamera", "handlePathfind", "handleInput", "handleParticleEmitters", "drawImg", "drawRects", "drawPathFindTargets", "move", "drawTexts", "handleButtons", "pointerUpdate", "Pointer", "keyboardUpdate", "Keys", "timeUpdate"]
}
