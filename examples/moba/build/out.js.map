{
  "version": 3,
  "sources": ["../../../src/pool.ts", "../../../src/component.ts", "../../../src/entity.ts", "../../../src/world.ts", "../src/config.json", "../src/main.ts"],
  "sourcesContent": ["export class ObjectPool<T> {\n  private storage: T[] = [];\n  private objectFactory: () => T;\n  private size = 0;\n\n  constructor(objectFactory: () => T) {\n    this.objectFactory = objectFactory;\n  }\n\n  len() {\n    return this.size;\n  }\n\n  addObj(): T {\n    let obj;\n    if (this.size < this.storage.length) {\n      obj = this.storage[this.size];\n    } else {\n      obj = this.objectFactory();\n      this.storage.push(obj);\n    }\n    this.size++;\n    return obj;\n  }\n\n  findIndex(object: T): number {\n    return this.storage.findIndex((v) => v == object);\n  }\n\n  removeObj(index: number): T {\n    if (index < 0 || index >= this.size) throw new Error(\"Index out of range.\");\n    const removed = this.storage[index];\n    // swap with last to maintain packed\n    this.storage[index] = this.storage[this.storage.length - 1];\n    this.storage[this.storage.length - 1] = removed;\n    this.size--;\n    return removed;\n  }\n\n  getObj(index: number): T {\n    if (index < 0 || index >= this.size) throw new Error(\"Index out of range.\");\n    return this.storage[index];\n  }\n}\n", "import { ObjectPool } from \"./pool.ts\";\n\nexport class ComponentManager {\n  private static pools: Map<object, unknown> = new Map();\n  private static idMap: Map<object, number> = new Map();\n\n  static register<T extends object>(component: T) {\n    ComponentManager.idMap.set(component, ComponentManager.idMap.size);\n    ComponentManager.pools.set(\n      component,\n      new ObjectPool<T>(() => ({ ...component })),\n    );\n  }\n\n  static getId<T extends object>(component: T): number {\n    return ComponentManager.idMap.get(component) ?? -1;\n  }\n\n  static add<T extends object>(component: T): T {\n    return Object.assign(\n      (ComponentManager.pools.get(component) as ObjectPool<T>).addObj(),\n      component,\n    );\n  }\n\n  static delete<T extends object>(component: T, index: number): T {\n    return (ComponentManager.pools.get(component) as ObjectPool<T>).removeObj(\n      index,\n    );\n  }\n\n  static get<T extends object>(component: T, index: number): T {\n    return (ComponentManager.pools.get(component) as ObjectPool<T>).getObj(\n      index,\n    );\n  }\n\n  static len<T extends object>(component: T): number {\n    return (ComponentManager.pools.get(component) as ObjectPool<T>).len();\n  }\n\n  static typeLen(): number {\n    return ComponentManager.pools.size;\n  }\n\n  static types(): object[] {\n    return ComponentManager.pools.keys().toArray();\n  }\n}\n", "import { ObjectPool } from \"./pool.ts\";\n\nexport type entityT = number;\n\nexport class EntityManager {\n  static nextId = 0;\n  static pool = new ObjectPool<entityT>(() => EntityManager.nextId++);\n\n  static add(): entityT {\n    return EntityManager.pool.addObj();\n  }\n\n  static findIndex(entity: entityT): number {\n    return EntityManager.pool.findIndex(entity);\n  }\n\n  static delete(index: number): entityT {\n    return EntityManager.pool.removeObj(index);\n  }\n}\n", "import { ComponentManager } from \"./component.ts\";\nimport { EntityManager, entityT } from \"./entity.ts\";\n\nexport type queryT = Partial<Record<\"and\" | \"not\", object[]>>;\n\nexport class World {\n  private static indexMap: Map<object, Map<number, number>> = new Map();\n  private static maskMap: Map<number, number> = new Map();\n  private static archetypeMap: Map<number, Set<entityT>> = new Map();\n  private static worlds: World[] = [];\n\n  private localEntities: Set<entityT> = new Set();\n  timeMilli = 0;\n  dtMilli = 0;\n\n  constructor() {\n    World.worlds.push(this);\n  }\n\n  static createEntity(): entityT {\n    const entity = EntityManager.add();\n    World.maskMap.set(entity, 0);\n    World.getArchetype(0).add(entity);\n    return entity;\n  }\n\n  static copyEntity(entity: entityT): entityT {\n    const copy = EntityManager.add();\n    const compTypes = ComponentManager.types();\n    const mask = this.maskMap.get(entity) as number;\n    for (let i = 0, l = compTypes.length; i < l; i++) {\n      if (!(mask & (1 << i))) continue;\n      World.addComponent(\n        copy,\n        compTypes[i],\n        World.getComponent(entity, compTypes[i]),\n      );\n    }\n    return copy;\n  }\n\n  private static getArchetype(mask: number): Set<entityT> {\n    const a = World.archetypeMap.get(mask) ?? new Set();\n    World.archetypeMap.set(mask, a);\n    return a;\n  }\n\n  static deleteEntity(entity: entityT) {\n    for (let i = 0, l = World.worlds.length; i < l; i++) {\n      World.worlds[i].removeEntity(entity);\n    }\n    const types = ComponentManager.types();\n    const mask = World.maskMap.get(entity) as number;\n    for (let i = 0, l = types.length; i < l; i++) {\n      if (!(mask & (1 << i))) continue;\n      World.removeComponent(entity, types[i]);\n    }\n    EntityManager.delete(EntityManager.findIndex(entity));\n  }\n\n  addEntity(entity: entityT = World.createEntity()): entityT {\n    this.localEntities.add(entity);\n    return entity;\n  }\n\n  removeEntity(entity: entityT) {\n    this.localEntities.delete(entity);\n  }\n\n  entityExists(entity: entityT): boolean {\n    return this.localEntities.has(entity);\n  }\n\n  static registerComponent<T extends object>(component: T): typeof World {\n    if (World.indexMap.has(component)) return World;\n    ComponentManager.register(component);\n    World.indexMap.set(component, new Map());\n    return World;\n  }\n\n  static hasComponent<T extends object>(\n    entity: entityT,\n    component: T,\n  ): boolean {\n    return !!(\n      (World.maskMap.get(entity) as number) &\n      (1 << ComponentManager.getId(component))\n    );\n  }\n\n  static addComponent<T extends object>(\n    entity: entityT,\n    component: T,\n    values: Partial<T> = {},\n  ): T {\n    World.registerComponent(component);\n    let mask = World.maskMap.get(entity) as number;\n    const compId = ComponentManager.getId(component);\n    if ((mask & (1 << compId)) != 0) {\n      throw new Error(`Entity ${entity} already had that component.`);\n    }\n    World.getArchetype(mask).delete(entity);\n    mask |= 1 << compId;\n    World.maskMap.set(entity, mask);\n    World.getArchetype(mask).add(entity);\n    const idx = ComponentManager.len(component);\n    (World.indexMap.get(component) as Map<number, number>).set(entity, idx);\n    return Object.assign(ComponentManager.add(component), values);\n  }\n\n  static removeComponent<T extends object>(entity: entityT, component: T): T {\n    World.registerComponent(component);\n    let mask = World.maskMap.get(entity) as number;\n    const compId = ComponentManager.getId(component);\n    if ((mask & (1 << compId)) == 0) {\n      throw new Error(`Entity ${entity} does not have that component.`);\n    }\n    World.getArchetype(mask).delete(entity);\n    mask &= ~(1 << compId);\n    World.maskMap.set(entity, mask);\n    World.getArchetype(mask).add(entity);\n    const indices = World.indexMap.get(component) as Map<number, number>;\n    const entityIdx = indices.get(entity) as number;\n    const removed = ComponentManager.delete(component, entityIdx);\n    const backEntity = indices.keys().toArray().at(-1) ?? -1;\n    indices.set(backEntity, entityIdx);\n    indices.delete(entity);\n    return removed;\n  }\n\n  static getComponent<T extends object>(entity: entityT, component: T): T {\n    return ComponentManager.get(\n      component,\n      (World.indexMap.get(component) as Map<number, number>).get(\n        entity,\n      ) as number,\n    );\n  }\n\n  update(...fns: ((world: World) => void)[]) {\n    for (let i = 0, l = fns.length; i < l; i++) fns[i](this);\n    this.dtMilli = performance.now() - this.timeMilli;\n    this.timeMilli += this.dtMilli;\n  }\n\n  query(query: queryT): entityT[] {\n    let andMask = 0,\n      notMask = 0;\n    if (query.and) {\n      for (let i = 0, l = query.and.length; i < l; i++) {\n        andMask |= 1 << ComponentManager.getId(query.and[i]);\n      }\n    }\n    if (query.not) {\n      for (let i = 0, l = query.not.length; i < l; i++) {\n        notMask |= 1 << ComponentManager.getId(query.not[i]);\n      }\n    }\n    const res = [];\n    for (\n      let archetypes = World.archetypeMap.keys().toArray(),\n        l = archetypes.length,\n        i = 0;\n      i < l;\n      i++\n    ) {\n      const a = archetypes[i];\n      const set = World.getArchetype(a);\n      if (set.size == 0) continue;\n      (a & andMask) == andMask && (a & notMask) == 0 && res.push(...set);\n    }\n    return [...this.localEntities.intersection(new Set(res))];\n  }\n\n  entityCount(): number {\n    return this.localEntities.size;\n  }\n}\n", "{\n  \"viewport\": {\n    \"width\": 800,\n    \"height\": 400\n  },\n  \"player\": {\n    \"speed\": 20\n  },\n  \"minions\": {\n    \"speed\": 20,\n    \"spawnRate\": 2\n  }\n}\n", "/**\n * By Original PNG version by Raizin, SVG rework by Sameboat. - file:Map of MOBA.png (CC 3.0), CC BY-SA 3.0, https://commons.wikimedia.org/w/index.php?curid=29443207\n */\n\nimport { entityT, World } from \"../../../src/index.ts\";\nimport { default as config } from \"./config.json\" with { type: \"json\" };\n\n// components\nconst PIDController = {\n  kp: 0,\n  ki: 0,\n  kd: 0,\n  prevErr: 0,\n  accumErr: 0,\n  result: function (currentErr: number, dt: number): number {\n    if (dt == 0) return 0;\n    this.accumErr += currentErr;\n    const out =\n      this.kp * currentErr +\n      this.ki * this.accumErr +\n      (this.kd * (currentErr - this.prevErr)) / dt;\n    this.prevErr = currentErr;\n    return out;\n  },\n  reset: function (): void {\n    this.prevErr = this.accumErr = 0;\n  },\n};\nconst Stats = {\n  healthPoint: 0,\n  attackPoint: 0,\n  defencePoint: 0,\n  abilityPower: 0,\n  moveSpeed: 0,\n  attackSpeed: 0,\n};\nconst Callback = { callback: new Function() };\nconst Transform = { x: 0, y: 0, rad: 0, scaleX: 1, scaleY: 1 };\nconst Velocity = { x: 0, y: 0 };\nconst PlayerControl = {};\nconst ComControl = {};\nconst ParticleEmitter = {\n  spread: 0,\n  particleEntity: -1,\n  particleLifetimeSeconds: 1,\n};\nconst Camera = { zoom: 20, tilt: 0, isActive: false, targetEntity: -1 };\nconst Rect = { width: 2, height: 2 };\nconst Graphic = { src: \"\" };\nconst Button = { hovered: false, pressed: false, clicked: false };\nconst Colour = { fill: \"white\", stroke: \"black\" };\nconst Text = {\n  content: \"\",\n  fontSize: 20,\n  padding: 3,\n  color: \"black\",\n  backgroundColor: \"white\",\n};\nconst Timer = { timeMilli: 0, reset: false, stop: false };\nconst PathFinder = { targetX: 0, targetY: 0 };\n\n// singletons\nconst Pointer = {\n  x: 0,\n  y: 0,\n  isDown: false,\n  pressPos: { x: 0, y: 0 },\n  justPressed: false,\n  justReleased: false,\n  releasePos: { x: 0, y: 0 },\n};\nconst Keys: Record<KeyboardEvent[\"key\"], boolean> = {};\n\n// systems\nfunction handleInput(world: World) {\n  let camera: typeof Camera | null;\n  let camTransform: typeof Transform | null;\n  world.query({ and: [Camera, Transform] }).forEach((e) => {\n    const c = World.getComponent(e, Camera);\n    if (!c.isActive) return;\n    camera = c;\n    camTransform = World.getComponent(e, Transform);\n  });\n  world.query({ and: [PathFinder, PlayerControl] }).forEach((e) => {\n    if (!camera || !camTransform) return;\n    const pf = World.getComponent(e, PathFinder);\n    if (!Pointer.justPressed) return;\n    const worldPos = screenToWorld(\n      Pointer.pressPos,\n      camTransform,\n      camera.tilt,\n      camera.zoom,\n    );\n    pf.targetX = worldPos.x;\n    pf.targetY = worldPos.y;\n  });\n}\n\nfunction handlePathfind(world: World) {\n  world\n    .query({ and: [PathFinder, Transform, Velocity, Stats] })\n    .forEach((e) => {\n      const pf = World.getComponent(e, PathFinder);\n      const p = World.getComponent(e, Transform);\n      const v = World.getComponent(e, Velocity);\n      const s = World.getComponent(e, Stats);\n\n      const dx = pf.targetX - p.x;\n      const dy = pf.targetY - p.y;\n      const dMag = (dx * dx + dy * dy) ** 0.5;\n      if (dMag == 0) return;\n      const controlDistance = ((s.moveSpeed * world.dtMilli) / 1000) * 2;\n      const adjustedSpeed =\n        dMag > controlDistance\n          ? s.moveSpeed\n          : (s.moveSpeed * dMag) / controlDistance;\n      v.x = (dx / dMag) * adjustedSpeed;\n      v.y = (dy / dMag) * adjustedSpeed;\n    });\n}\n\nfunction handleTimers(world: World) {\n  world.query({ and: [Timer] }).forEach((e) => {\n    World.hasComponent(e, Callback) &&\n      World.getComponent(e, Callback).callback(e);\n    const t = World.getComponent(e, Timer);\n    if (t.reset) t.timeMilli = 0;\n    t.reset = false;\n    if (!t.stop) t.timeMilli += world.dtMilli;\n  });\n}\n\nfunction drawTexts(world: World) {\n  if (!ctx) return;\n  world.query({ and: [Text, Transform] }).forEach((e) => {\n    const t = World.getComponent(e, Text);\n    const p = World.getComponent(e, Transform);\n    ctx.font = `${t.fontSize}px serif`;\n    const old = ctx.fillStyle;\n    const lines = t.content.split(\"\\n\");\n    for (let i = 0, l = lines.length; i < l; i++) {\n      const txtMetric = ctx.measureText(lines[i]);\n      ctx.fillStyle = t.backgroundColor;\n      ctx.fillRect(\n        p.x,\n        p.y + i * (2 * t.padding) + i * txtMetric.fontBoundingBoxAscent,\n        t.padding * 2 + txtMetric.width,\n        t.padding * 2 + txtMetric.fontBoundingBoxAscent,\n      );\n      ctx.fillStyle = t.color;\n      ctx.fillText(\n        lines[i],\n        p.x + t.padding,\n        p.y + i * (2 * t.padding) + (i + 1) * txtMetric.fontBoundingBoxAscent,\n      );\n    }\n    ctx.fillStyle = old;\n  });\n}\n\nfunction drawRectangle(\n  ctx: CanvasRenderingContext2D,\n  p: typeof Transform,\n  r: typeof Rect,\n  c: typeof Colour,\n) {\n  const oldF = ctx.fillStyle;\n  const oldS = ctx.strokeStyle;\n  ctx.fillStyle = c.fill;\n  ctx.strokeStyle = c.stroke;\n  const rect = new Path2D(\n    `M ${p.x - r.width * 0.5 * p.scaleX} ${\n      p.y - r.height * 0.5 * p.scaleY\n    } h ${r.width * p.scaleX} v ${r.height * p.scaleY} h ${-r.width * p.scaleX} Z`,\n  );\n  ctx.fill(rect);\n  ctx.stroke(rect);\n  ctx.fillStyle = oldF;\n  ctx.strokeStyle = oldS;\n}\n\nfunction drawRects(world: World) {\n  if (!ctx) return;\n  world.query({ and: [Transform, Rect, Colour] }).forEach((e) => {\n    const p = World.getComponent(e, Transform);\n    const r = World.getComponent(e, Rect);\n    const c = World.getComponent(e, Colour);\n    drawRectangle(ctx, p, r, c);\n  });\n}\n\nfunction drawPathFindTargets(world: World) {\n  if (!ctx) return;\n  const old = ctx.fillStyle;\n  ctx.fillStyle = \"red\";\n  world.query({ and: [PathFinder] }).forEach((e) => {\n    const pf = World.getComponent(e, PathFinder);\n    ctx.fillRect(pf.targetX - 0.5, pf.targetY - 0.5, 1, 1);\n  });\n  ctx.fillStyle = old;\n}\n\nfunction drawBg(color: string = \"#424242\") {\n  if (!ctx) return;\n  const old = ctx.fillStyle;\n  ctx.fillStyle = color;\n  ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  ctx.fillStyle = old;\n}\n\nfunction handleCamera(world: World) {\n  if (!ctx) return;\n  world.query({ and: [Camera, Transform] }).forEach((e) => {\n    const c = World.getComponent(e, Camera);\n    if (!c.isActive) return;\n    resetTransform(ctx);\n    const p = World.getComponent(e, Transform);\n    if (c.targetEntity != -1) {\n      const targetPos = World.getComponent(c.targetEntity, Transform);\n      Object.assign(p, targetPos);\n    }\n    const sin = Math.sin(c.tilt) * c.zoom;\n    const cos = Math.cos(c.tilt) * c.zoom;\n    ctx.transform(\n      cos,\n      sin,\n      -sin,\n      cos,\n      cos * -p.x - sin * -p.y + ctx.canvas.width * 0.5,\n      sin * -p.x + cos * -p.y + ctx.canvas.height * 0.5,\n    );\n  });\n}\n\nfunction move(world: World) {\n  const dt = world.dtMilli / 1000;\n  world.query({ and: [Transform, Velocity] }).forEach((e) => {\n    const p = World.getComponent(e, Transform);\n    const v = World.getComponent(e, Velocity);\n    p.x += v.x * dt;\n    p.y += v.y * dt;\n  });\n}\n\nfunction drawImg(world: World) {\n  if (!ctx) return;\n  world.query({ and: [Graphic, Transform] }).forEach((e) => {\n    const g = World.getComponent(e, Graphic);\n    const p = World.getComponent(e, Transform);\n    const r = World.hasComponent(e, Rect) && World.getComponent(e, Rect);\n    const img = new Image();\n    img.src = g.src;\n    const imgWidth = r ? r.width : img.width;\n    const imgHeight = r ? r.height : img.height;\n    const scaleX = imgWidth / img.width;\n    const scaleY = imgHeight / img.height;\n    ctx.transform(scaleX, 0, 0, scaleY, 0, 0);\n    ctx.drawImage(\n      img,\n      (p.x - imgWidth / 2) / scaleX,\n      (p.y - imgHeight / 2) / scaleY,\n    );\n    ctx.transform(1 / scaleX, 0, 0, 1 / scaleY, 0, 0);\n  });\n}\n\nfunction handleButtons(world: World) {\n  world.query({ and: [Button, Transform, Rect, Callback] }).forEach((e) => {\n    const p = World.getComponent(e, Transform);\n    const b = World.getComponent(e, Button);\n    const r = World.getComponent(e, Rect);\n    const cb = World.getComponent(e, Callback);\n    const pressedWithinButton =\n      (Pointer.pressPos.x - p.x) ** 2 < (r.width / 2) ** 2 &&\n      (Pointer.pressPos.y - p.y) ** 2 < (r.height / 2) ** 2;\n    b.hovered =\n      (Pointer.x - p.x) ** 2 < (r.width / 2) ** 2 &&\n      (Pointer.y - p.y) ** 2 < (r.height / 2) ** 2;\n    b.pressed = b.hovered && Pointer.isDown && pressedWithinButton;\n    b.clicked =\n      Pointer.justReleased &&\n      pressedWithinButton &&\n      (Pointer.releasePos.x - p.x) ** 2 < (r.width / 2) ** 2 &&\n      (Pointer.releasePos.y - p.y) ** 2 < (r.height / 2) ** 2;\n    cb.callback(e);\n  });\n}\n\n// entities\nfunction addGraphic(world: World, src: string, x = 0, y = 0, w = 1, h = 1) {\n  const e = world.addEntity();\n  World.addComponent(e, Transform, { x, y });\n  World.addComponent(e, Graphic, { src });\n  World.addComponent(e, Rect, { width: w, height: h });\n  return e;\n}\nfunction addRect(world: World, x = 0, y = 0, w = 1, h = 1) {\n  const e = world.addEntity();\n  World.addComponent(e, Transform, { x, y });\n  World.addComponent(e, Rect, { width: w, height: h });\n  World.addComponent(e, Colour, { fill: \"green\" });\n  return e;\n}\nfunction addButton(\n  world: World,\n  x = 0,\n  y = 0,\n  w = 10,\n  h = 10,\n  cb = (_: entityT) => {},\n) {\n  const e = world.addEntity();\n  World.addComponent(e, Transform, { x, y });\n  World.addComponent(e, Rect, { width: w, height: h });\n  World.addComponent(e, Button);\n  World.addComponent(e, Colour);\n  World.addComponent(e, Callback, { callback: cb });\n  return e;\n}\nfunction addTimerWithCallback(world: World, cb: (e: entityT) => void) {\n  const e = world.addEntity();\n  World.addComponent(e, Timer);\n  World.addComponent(e, Callback).callback = cb;\n  return e;\n}\nfunction addPlayer(world: World, x = 0, y = 0) {\n  const player = addRect(world, x, y, 1, 1);\n  World.addComponent(player, Velocity);\n  World.addComponent(player, Stats, { moveSpeed: config.player.speed });\n  World.addComponent(player, PlayerControl);\n  World.addComponent(player, PathFinder, { targetX: x, targetY: y });\n  return player;\n}\nfunction addTurrent(world: World, x: number, y: number) {\n  const turrent = addRect(world, x, y, 3, 10);\n  World.addComponent(turrent, Stats);\n  return turrent;\n}\nfunction addCamera(world: World, x: number, y: number) {\n  const cam = world.addEntity();\n  World.addComponent(cam, Camera, { zoom: 30 });\n  World.addComponent(cam, Transform, { x, y });\n  return cam;\n}\n\n//utils\ntype vec2 = { x: number; y: number };\nfunction screenToWorld(\n  pointerPos: vec2,\n  cameraPos: vec2,\n  cameraTilt: number,\n  cameraZoom: number,\n): vec2 {\n  const cos = Math.cos(cameraTilt);\n  const sin = Math.sin(cameraTilt);\n  const res = { x: 0, y: 0 };\n  const x = pointerPos.x - config.viewport.width / 2;\n  const y = pointerPos.y - config.viewport.height / 2;\n  res.x = cos * x + sin * y;\n  res.y = -sin * x + cos * y;\n  res.x /= cameraZoom;\n  res.y /= cameraZoom;\n  res.x += cameraPos.x;\n  res.y += cameraPos.y;\n  return res;\n}\nfunction worldToScreen(\n  pos: vec2,\n  cameraPos: vec2,\n  cameraTilt: number,\n  cameraZoom: number,\n): vec2 {\n  const c = Math.cos(cameraTilt);\n  const s = Math.sin(cameraTilt);\n  const res = { x: 0, y: 0 };\n  let x = pos.x - cameraPos.x;\n  let y = pos.y - cameraPos.y;\n  x *= cameraZoom;\n  y *= cameraZoom;\n  res.x = c * x - s * y;\n  res.y = s * x + c * y;\n  res.x += config.viewport.width * 0.5;\n  res.y += config.viewport.height * 0.5;\n  return res;\n}\nfunction resetTransform(ctx: CanvasRenderingContext2D) {\n  ctx.setTransform(1, 0, 0, 1, 0, 0);\n}\n// credit: https://www.30secondsofcode.org/js/s/detect-device-type/\nfunction detectDeviceType(): string {\n  return /Mobile|Android|iPhone|iPad/i.test(navigator.userAgent)\n    ? \"Mobile\"\n    : \"Desktop\";\n}\nfunction getPointerPos(e: PointerEvent) {\n  if (!canvas) return;\n  const rect = canvas.getBoundingClientRect();\n  Pointer.x = e.x - rect.left;\n  Pointer.y = e.y - rect.top;\n  if (innerWidth / innerHeight < canvas.width / canvas.height) {\n    Pointer.x *= canvas.width / innerWidth;\n    Pointer.y *= canvas.width / innerWidth;\n  } else {\n    Pointer.x *= canvas.height / innerHeight;\n    Pointer.y *= canvas.height / innerHeight;\n  }\n}\n\nconst canvas = document.querySelector(\"canvas\");\nconst ctx = canvas?.getContext(\"2d\");\n\nif (canvas && ctx) {\n  canvas.width = config.viewport.width;\n  canvas.height = config.viewport.height;\n  canvas.style.imageRendering = \"pixelated\";\n  ctx.lineWidth = 0.1;\n\n  document.onkeydown = (e) => {\n    Keys[e.key] = true;\n  };\n  document.onkeyup = (e) => {\n    Keys[e.key] = false;\n  };\n  // document.onpointermove = getPointerPos;\n  document.onpointerdown = (e) => {\n    if (e.target != canvas) return;\n    Pointer.isDown = true;\n    Pointer.justPressed = true;\n    getPointerPos(e);\n    Object.assign(Pointer.pressPos, Pointer);\n  };\n\n  document.onpointerup = (e) => {\n    Pointer.isDown = false;\n    Pointer.justReleased = true;\n    getPointerPos(e);\n    Object.assign(Pointer.releasePos, Pointer);\n  };\n\n  document.body.append(canvas);\n\n  const game = new World();\n\n  const player = addPlayer(game, 0, 0);\n\n  const playerCopy = World.copyEntity(player);\n  World.getComponent(playerCopy, Transform).x += 5;\n  game.addEntity(playerCopy);\n\n  const turrent = addTurrent(game, 10, 0);\n\n  const map = addGraphic(game, \"./assets/Map_of_MOBA.svg\", 0, 0, 300, 300);\n\n  const cam = addCamera(game, 0, 0);\n  const camComponent = World.getComponent(cam, Camera);\n  camComponent.targetEntity = player;\n  camComponent.isActive = true;\n\n  // addTimerWithCallback(game, (e) => {\n  //   const t = World.getComponent(e, Timer);\n  //   if (t.timeMilli < 1000 / config.minions.spawnRate) return;\n  //   t.reset = true;\n  //   const minion = addRect(game, 0, 0);\n  //   const v = World.addComponent(minion, Velocity);\n  //   const c = Math.cos(-Math.PI / 4);\n  //   const s = Math.sin(-Math.PI / 4);\n  //   v.x = c * config.minions.speed;\n  //   v.y = s * config.minions.speed;\n  // });\n\n  const inGameUi = new World();\n\n  addButton(\n    inGameUi,\n    config.viewport.width * 0.9,\n    config.viewport.height * 0.8,\n    config.viewport.height * 0.3,\n    config.viewport.height * 0.3,\n    (e) => {\n      const b = World.getComponent(e, Button);\n      b.clicked && console.log(\"clicked\");\n    },\n  );\n\n  // minimap\n  // addGraphic(\n  //   inGameUi,\n  //   \"./assets/Map_of_MOBA.svg\",\n  //   config.viewport.width * 0.1,\n  //   config.viewport.height * 0.2,\n  //   config.viewport.height * 0.3,\n  //   config.viewport.height * 0.3,\n  // );\n\n  const debugTextEntity = inGameUi.addEntity();\n  const debugText = World.addComponent(debugTextEntity, Text, {\n    content: \"test string\",\n    backgroundColor: \"white\",\n  });\n  World.addComponent(debugTextEntity, Transform);\n\n  (function update() {\n    drawBg();\n    debugText.content = `FPS: ${Math.ceil(1000 / game.dtMilli)}\\nEntity count: ${game.entityCount()}\\nDevice type: ${detectDeviceType()}`;\n    game.update(\n      handleTimers,\n      handleCamera,\n      handlePathfind,\n      handleInput,\n      drawImg,\n      drawRects,\n      drawPathFindTargets,\n      move,\n    );\n    resetTransform(ctx);\n    inGameUi.update(drawImg, drawRects, drawTexts, handleButtons);\n    Pointer.justReleased = false;\n    Pointer.justPressed = false;\n    requestAnimationFrame(update);\n  })();\n}\n"],
  "mappings": "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",
  "names": ["ObjectPool", "objectFactory", "obj", "object", "v", "index", "removed", "ComponentManager", "_ComponentManager", "component", "ObjectPool", "index", "EntityManager", "_EntityManager", "ObjectPool", "entity", "index", "World", "_World", "entity", "EntityManager", "copy", "compTypes", "ComponentManager", "mask", "i", "l", "a", "types", "component", "values", "compId", "idx", "indices", "entityIdx", "removed", "backEntity", "fns", "query", "andMask", "notMask", "res", "archetypes", "set", "config_default", "Stats", "Callback", "Transform", "Velocity", "PlayerControl", "Camera", "Rect", "Graphic", "Button", "Colour", "Text", "Timer", "PathFinder", "Pointer", "Keys", "handleInput", "world", "camera", "camTransform", "Transform", "e", "c", "World", "PlayerControl", "pf", "worldPos", "screenToWorld", "handlePathfind", "Velocity", "Stats", "p", "v", "dx", "dy", "dMag", "controlDistance", "adjustedSpeed", "handleTimers", "Callback", "t", "drawTexts", "ctx", "old", "lines", "i", "l", "txtMetric", "drawRectangle", "r", "oldF", "oldS", "rect", "drawRects", "drawPathFindTargets", "drawBg", "color", "handleCamera", "resetTransform", "targetPos", "sin", "cos", "move", "dt", "drawImg", "g", "img", "imgWidth", "imgHeight", "scaleX", "scaleY", "handleButtons", "b", "cb", "pressedWithinButton", "addGraphic", "src", "x", "y", "w", "h", "addRect", "addButton", "_", "addPlayer", "world", "x", "y", "player", "addRect", "World", "Velocity", "Stats", "config_default", "PlayerControl", "PathFinder", "addTurrent", "turrent", "addCamera", "cam", "Camera", "Transform", "screenToWorld", "pointerPos", "cameraPos", "cameraTilt", "cameraZoom", "cos", "sin", "res", "resetTransform", "ctx", "detectDeviceType", "getPointerPos", "canvas", "rect", "Pointer", "config_default", "e", "Keys", "game", "World", "player", "addPlayer", "playerCopy", "Transform", "turrent", "addTurrent", "map", "addGraphic", "cam", "addCamera", "camComponent", "Camera", "inGameUi", "addButton", "Button", "debugTextEntity", "debugText", "Text", "update", "drawBg", "handleTimers", "handleCamera", "handlePathfind", "handleInput", "drawImg", "drawRects", "drawPathFindTargets", "move", "drawTexts", "handleButtons"]
}
