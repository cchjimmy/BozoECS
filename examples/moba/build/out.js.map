{
  "version": 3,
  "sources": ["../../../src/pool.ts", "../../../src/component.ts", "../../../src/world.ts", "../src/config.json", "../src/main.ts"],
  "sourcesContent": ["export class ObjectPoolMap<T> {\n  private storage: T[] = [];\n  private indices: Map<unknown, number> = new Map();\n  private objectFactory: () => T;\n  private size = 0;\n\n  constructor(objectFactory: () => T) {\n    this.objectFactory = objectFactory;\n  }\n\n  len() {\n    return this.size;\n  }\n\n  addObj(key: unknown): T {\n    let obj;\n    if (this.size < this.storage.length) {\n      obj = this.storage[this.size];\n    } else {\n      obj = this.objectFactory();\n      this.storage.push(obj);\n    }\n    this.indices.set(key, this.size);\n    this.size++;\n    return obj;\n  }\n\n  removeObj(key: unknown): boolean {\n    const index = this.indices.get(key) ?? -1;\n    if (index < 0 || index >= this.size) return false;\n    const removed = this.storage[index];\n    // swap with last to maintain packed\n    this.storage[index] = this.storage[this.size - 1];\n    this.storage[this.size - 1] = removed;\n    for (const [k, v] of this.indices) {\n      if (v != this.size - 1) continue;\n      this.indices.set(k, index);\n      break;\n    }\n    this.indices.delete(key);\n    this.size--;\n    return true;\n  }\n\n  getObj(key: unknown): T {\n    const index = this.indices.get(key) ?? -1;\n    if (index < 0 || index >= this.size) throw new Error(\"Index out of range.\");\n    return this.storage[index];\n  }\n}\n", "import { ObjectPoolMap } from \"./pool.ts\";\nimport { entityT } from \"./entity.ts\";\n\nexport class ComponentManager {\n  private static pools: Map<object, unknown> = new Map();\n  private static idMap: Map<object, number> = new Map();\n\n  static register<T extends object>(component: T) {\n    if (ComponentManager.pools.has(component)) return;\n    ComponentManager.idMap.set(component, ComponentManager.idMap.size);\n    ComponentManager.pools.set(\n      component,\n      new ObjectPoolMap<T>(() => ({ ...component })),\n    );\n  }\n\n  static getId<T extends object>(component: T): number {\n    return ComponentManager.idMap.get(component) ?? -1;\n  }\n\n  static add<T extends object>(key: entityT, component: T): T {\n    return Object.assign(\n      (ComponentManager.pools.get(component) as ObjectPoolMap<T>).addObj(key),\n      component,\n    );\n  }\n\n  static delete<T extends object>(key: entityT, component: T): boolean {\n    return (\n      ComponentManager.pools.get(component) as ObjectPoolMap<T>\n    ).removeObj(key);\n  }\n\n  static get<T extends object>(key: entityT, component: T): T {\n    return (ComponentManager.pools.get(component) as ObjectPoolMap<T>).getObj(\n      key,\n    );\n  }\n\n  static len<T extends object>(component: T): number {\n    return (ComponentManager.pools.get(component) as ObjectPoolMap<T>).len();\n  }\n\n  static typeLen(): number {\n    return ComponentManager.pools.size;\n  }\n\n  static types(): object[] {\n    return ComponentManager.pools.keys().toArray();\n  }\n}\n", "import { ComponentManager } from \"./component.ts\";\nimport type { entityT } from \"./entity.ts\";\n\nexport type queryT = Partial<Record<\"and\" | \"not\", object[]>>;\n\nexport class World {\n  private static maskMap: Map<number, number> = new Map();\n  private static archetypeMap: Map<number, Set<entityT>> = new Map();\n  private static worlds: World[] = [];\n  private static entitiesToDelete: entityT[] = [];\n\n  private localEntities: Set<entityT> = new Set();\n\n  constructor() {\n    World.worlds.push(this);\n  }\n\n  static createEntity(): entityT {\n    const entity = Math.random();\n    World.maskMap.set(entity, 0);\n    World.getArchetype(0).add(entity);\n    return entity;\n  }\n\n  static copyEntity(entity: entityT): entityT {\n    const copy = Math.random();\n    const compTypes = ComponentManager.types();\n    const mask = this.maskMap.get(entity) ?? 0;\n    World.maskMap.set(copy, mask);\n    World.getArchetype(mask).add(copy);\n    for (let i = 0, l = compTypes.length; i < l; i++) {\n      if (!(mask & (1 << i))) continue;\n      Object.assign(\n        ComponentManager.add(copy, compTypes[i]),\n        ComponentManager.get(entity, compTypes[i]),\n      );\n    }\n    return copy;\n  }\n\n  private static getArchetype(mask: number): Set<entityT> {\n    const a = World.archetypeMap.get(mask) ?? new Set();\n    World.archetypeMap.set(mask, a);\n    return a;\n  }\n\n  static deleteEntity(entity: entityT) {\n    World.entitiesToDelete.push(entity);\n  }\n\n  addEntity(entity: entityT = World.createEntity()): entityT {\n    this.localEntities.add(entity);\n    return entity;\n  }\n\n  removeEntity(entity: entityT) {\n    this.localEntities.delete(entity);\n  }\n\n  static registerComponent<T extends object>(component: T): typeof World {\n    ComponentManager.register(component);\n    return World;\n  }\n\n  static hasComponent<T extends object>(\n    entity: entityT,\n    component: T,\n  ): boolean {\n    return (\n      ((World.maskMap.get(entity) ?? 0) &\n        (1 << ComponentManager.getId(component))) >\n      0\n    );\n  }\n\n  static addComponent<T extends object>(\n    entity: entityT,\n    component: T,\n    values: Partial<T> = component,\n  ): T {\n    World.registerComponent(component);\n    let mask = World.maskMap.get(entity) ?? 0;\n    const compId = ComponentManager.getId(component);\n    if ((mask & (1 << compId)) != 0) {\n      return Object.assign(ComponentManager.get(entity, component), values);\n    }\n    World.getArchetype(mask).delete(entity);\n    mask |= 1 << compId;\n    World.maskMap.set(entity, mask);\n    World.getArchetype(mask).add(entity);\n    return Object.assign(ComponentManager.add(entity, component), values);\n  }\n\n  static removeComponent<T extends object>(\n    entity: entityT,\n    component: T,\n  ): boolean {\n    World.registerComponent(component);\n    let mask = World.maskMap.get(entity) ?? 0;\n    const compId = ComponentManager.getId(component);\n    if ((mask & (1 << compId)) == 0) return false;\n    World.getArchetype(mask).delete(entity);\n    mask &= ~(1 << compId);\n    World.maskMap.set(entity, mask);\n    World.getArchetype(mask).add(entity);\n    return ComponentManager.delete(entity, component);\n  }\n\n  static getComponent<T extends object>(entity: entityT, component: T): T {\n    return ComponentManager.get(entity, component);\n  }\n\n  update(...fns: ((world: World) => void)[]) {\n    for (let i = 0, l = fns.length; i < l; i++) fns[i](this);\n    while (World.entitiesToDelete.length) {\n      const entity = World.entitiesToDelete.pop() as entityT;\n      for (let i = 0, l = World.worlds.length; i < l; i++) {\n        World.worlds[i].localEntities.delete(entity);\n      }\n      const types = ComponentManager.types();\n      const mask = World.maskMap.get(entity) ?? 0;\n      World.maskMap.delete(entity);\n      World.getArchetype(mask).delete(entity);\n      for (let i = 0, l = types.length; i < l; i++) {\n        if (!(mask & (1 << i))) continue;\n        ComponentManager.delete(entity, types[i]);\n      }\n    }\n  }\n\n  query(query: queryT): entityT[] {\n    let andMask = 0,\n      notMask = 0;\n    if (query.and) {\n      for (let i = 0, l = query.and.length; i < l; i++) {\n        andMask |= 1 << ComponentManager.getId(query.and[i]);\n      }\n    }\n    if (query.not) {\n      for (let i = 0, l = query.not.length; i < l; i++) {\n        notMask |= 1 << ComponentManager.getId(query.not[i]);\n      }\n    }\n    const res = [];\n    for (\n      let archetypes = World.archetypeMap.keys().toArray(),\n        l = archetypes.length,\n        i = 0;\n      i < l;\n      i++\n    ) {\n      const a = archetypes[i];\n      const set = World.getArchetype(a);\n      if (set.size == 0) continue;\n      (a & andMask) == andMask && (a & notMask) == 0 && res.push(...set);\n    }\n    return [...this.localEntities.intersection(new Set(res))];\n  }\n\n  entityCount(): number {\n    return this.localEntities.size;\n  }\n}\n", "{\n  \"viewport\": {\n    \"width\": 800,\n    \"height\": 400\n  },\n  \"entities\": {\n    \"player\": {\n      \"healthPoint\": 10,\n      \"moveSpeed\": 20\n    },\n    \"minion\": {\n      \"healthPoint\": 15,\n      \"spawnRate\": 2\n    },\n    \"turrent\": {\n      \"healthPoint\": 100,\n      \"abilityPower\": 100\n    }\n  }\n}\n", "/**\n * By Original PNG version by Raizin, SVG rework by Sameboat. - file:Map of MOBA.png (CC 3.0), CC BY-SA 3.0, https://commons.wikimedia.org/w/index.php?curid=29443207\n */\n\nimport { entityT, World } from \"bozoecs\";\nimport { default as config } from \"./config.json\" with { type: \"json\" };\n\n// components\nconst PIDController = {\n  kp: 0,\n  ki: 0,\n  kd: 0,\n  prevErr: 0,\n  accumErr: 0,\n  currentErr: 0,\n  result: 0,\n  reset: false,\n};\nconst Stats = {\n  attackPoint: 0,\n  defencePoint: 0,\n  abilityPower: 0,\n  moveSpeed: 0,\n  attackSpeed: 0,\n};\nconst Health = { current: 0, max: 0 };\nconst Callback = { callback: new Function() };\nconst Transform = { x: 0, y: 0, rad: 0, scaleX: 1, scaleY: 1 };\nconst Velocity = { x: 0, y: 0 };\nconst PlayerControl = {};\nconst ComControl = {};\nconst OnScreen = {};\nconst ParticleEmitter = {\n  spread: 0,\n  particleEntity: -1,\n  particleLifetimeSeconds: 1,\n  speed: 1,\n  emit: false,\n  particleTransition: function (\n    particleEntity: entityT,\n    percentageLifeTime: number,\n  ) {\n    const t = World.getComponent(particleEntity, Transform);\n    t.scaleX = t.scaleY = -(percentageLifeTime ** 2) + 1;\n  },\n};\nconst Camera = { zoom: 20, tilt: 0, isActive: false, targetEntity: -1 };\nconst Rect = { width: 1, height: 1, offsetX: 0.5, offsetY: 0.5 };\nconst Graphic = { src: \"\" };\nconst Button = { hovered: false, pressed: false, clicked: false };\nconst Colour = { fill: \"white\", stroke: \"black\" };\nconst Text = {\n  content: \"\",\n  fontSize: 20,\n  padding: 3,\n  color: \"black\",\n  backgroundColor: \"white\",\n};\nconst Timer = { timeMilli: 0, reset: false, stop: false };\nconst PathFinder = { targetX: 0, targetY: 0 };\n\n// singletons\nconst Ctx2D = setUpCanvas2D();\nconst Pointer = setUpPointer();\nconst Keys = setUpKeyboard();\nconst Time = setUpTime();\n\nfunction setUpCanvas2D(): {\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n} {\n  const canvas =\n    document.querySelector(\"canvas\") ?? document.createElement(\"canvas\");\n  if (!canvas) throw new Error(\"Cannot create canvas element.\");\n  const ctx = canvas.getContext(\"2d\");\n  if (!ctx) throw new Error(\"Cannot initialize context 2d.\");\n\n  document.body.appendChild(canvas);\n\n  globalThis.onresize = globalThis.onload = () => {\n    if (innerWidth / innerHeight < canvas.width / canvas.height) {\n      canvas.style.width = \"100%\";\n      canvas.style.height = \"\";\n    } else {\n      canvas.style.width = \"\";\n      canvas.style.height = \"100%\";\n    }\n  };\n\n  return { canvas, ctx };\n}\nfunction setUpKeyboard(): Record<\n  \"isDown\" | \"justPressed\" | \"justReleased\",\n  Record<string, boolean>\n> {\n  const keys: ReturnType<typeof setUpKeyboard> = {\n    isDown: {},\n    justPressed: {},\n    justReleased: {},\n  };\n\n  globalThis.onkeydown = (e) => {\n    !keys.isDown[e.key] && (keys.justPressed[e.key] = true);\n    keys.isDown[e.key] = true;\n  };\n  globalThis.onkeyup = (e) => {\n    keys.isDown[e.key] = false;\n    keys.justReleased[e.key] = true;\n  };\n\n  return keys;\n}\nfunction keyboardUpdate(\n  keys: Record<\n    \"isDown\" | \"justPressed\" | \"justReleased\",\n    Record<string, boolean>\n  >,\n) {\n  for (const key in keys.justPressed) keys.justPressed[key] = false;\n  for (const key in keys.justReleased) keys.justReleased[key] = false;\n}\nfunction setUpPointer() {\n  const pointer = {\n    x: 0,\n    y: 0,\n    isDown: false,\n    justPressed: false,\n    justReleased: false,\n    pressPos: { x: 0, y: 0 },\n    releasePos: { x: 0, y: 0 },\n  };\n\n  globalThis.onpointerdown = (e) => {\n    if (!(e.target instanceof HTMLCanvasElement)) return;\n    ((pointer.x = e.x), (pointer.y = e.y));\n    Object.assign(pointer.pressPos, pointer);\n    pointer.isDown = pointer.justPressed = true;\n  };\n\n  globalThis.onpointerup = (e) => {\n    ((pointer.x = e.x), (pointer.y = e.y));\n    Object.assign(pointer.releasePos, pointer);\n    ((pointer.isDown = false), (pointer.justReleased = true));\n  };\n\n  globalThis.onpointermove = (e) => {\n    ((pointer.x = e.x), (pointer.y = e.y));\n  };\n\n  return pointer;\n}\nfunction pointerUpdate(\n  pointer: Record<\"isDown\" | \"justPressed\" | \"justReleased\", boolean>,\n) {\n  pointer.justPressed = false;\n  pointer.justReleased = false;\n}\nfunction setUpTime() {\n  return { dtMilli: 0, timeMilli: 0 };\n}\nfunction timeUpdate(time: { dtMilli: number; timeMilli: number }) {\n  time.dtMilli = performance.now() - time.timeMilli;\n  time.timeMilli += time.dtMilli;\n}\n\n// systems\nfunction checkOnScreenEntities(world: World) {\n  const camEntity = world\n    .query({ and: [Camera, Transform] })\n    .find((e) => World.getComponent(e, Camera).isActive);\n  if (!camEntity) return;\n  const cam = World.getComponent(camEntity, Camera);\n  const camTransform = World.getComponent(camEntity, Transform);\n  world.query({ and: [Rect, Transform] }).forEach((e) => {\n    World.removeComponent(e, OnScreen);\n    const r = World.getComponent(e, Rect);\n    const t = World.getComponent(e, Transform);\n    rectsOverlap(\n      camTransform.x,\n      camTransform.y,\n      Ctx2D.canvas.width / cam.zoom,\n      Ctx2D.canvas.height / cam.zoom,\n      t.x + r.offsetX + r.width / 2,\n      t.y + r.offsetY + r.height / 2,\n      r.width,\n      r.height,\n    ) && World.addComponent(e, OnScreen);\n  });\n}\nfunction handlePIDControllers(world: World) {\n  world.query({ and: [PIDController] }).forEach((e) => {\n    const pid = World.getComponent(e, PIDController);\n    pid.result =\n      pid.kp * pid.currentErr +\n      pid.ki * pid.accumErr +\n      (pid.kd * (pid.currentErr - pid.prevErr) * 1000) / Time.dtMilli;\n    pid.prevErr = pid.currentErr * +!pid.reset;\n    pid.accumErr = (pid.accumErr + pid.currentErr) * +!pid.reset;\n  });\n}\nfunction handleParticleEmitters(world: World) {\n  world.query({ and: [ParticleEmitter, Transform] }).forEach((e) => {\n    const emitter = World.getComponent(e, ParticleEmitter);\n    if (!emitter.emit || !World.hasComponent(emitter.particleEntity, Transform))\n      return;\n    emitter.emit = false;\n    const t = World.getComponent(e, Transform);\n    const particle = World.copyEntity(emitter.particleEntity);\n    const particleTransform = World.getComponent(particle, Transform);\n    Object.assign(particleTransform, t);\n    world.addEntity(particle);\n    const timer = World.addComponent(particle, Timer);\n    const rand = Math.random() > 0.5;\n    const radian =\n      t.rad + Math.random() * emitter.spread * Math.PI * (-1 * +rand + +!rand);\n    particleTransform.rad = radian;\n    World.addComponent(particle, Velocity, {\n      x: Math.cos(radian) * emitter.speed,\n      y: Math.sin(radian) * emitter.speed,\n    });\n    World.addComponent(particle, Callback).callback = () => {\n      if (timer.timeMilli < emitter.particleLifetimeSeconds * 1000) {\n        emitter.particleTransition(\n          particle,\n          timer.timeMilli / 1000 / emitter.particleLifetimeSeconds,\n        );\n        return;\n      }\n      World.deleteEntity(particle);\n    };\n  });\n}\nfunction handleInput(world: World) {\n  const camEntity = world\n    .query({ and: [Camera, Transform] })\n    .find((e) => World.getComponent(e, Camera).isActive);\n  if (camEntity == undefined) return;\n  const camera = World.getComponent(camEntity, Camera);\n  const camTransform = World.getComponent(camEntity, Transform);\n  const pressPos = pointerToScreen(Pointer.pressPos, Ctx2D.canvas);\n  world.query({ and: [PathFinder, PlayerControl] }).forEach((e) => {\n    const pf = World.getComponent(e, PathFinder);\n    if (!Pointer.justPressed) return;\n    const worldPos = screenToWorld(\n      pressPos,\n      camTransform,\n      camera.tilt,\n      camera.zoom,\n    );\n    pf.targetX = worldPos.x;\n    pf.targetY = worldPos.y;\n  });\n}\nfunction handlePathfind(world: World) {\n  world\n    .query({ and: [PathFinder, Transform, Velocity, Stats] })\n    .forEach((e) => {\n      const pf = World.getComponent(e, PathFinder);\n      const p = World.getComponent(e, Transform);\n      const v = World.getComponent(e, Velocity);\n      const s = World.getComponent(e, Stats);\n\n      const dx = pf.targetX - p.x;\n      const dy = pf.targetY - p.y;\n      const dMag = (dx * dx + dy * dy) ** 0.5;\n      if (dMag == 0) return;\n      const controlDistance = ((s.moveSpeed * Time.dtMilli) / 1000) * 2;\n      const adjustedSpeed =\n        dMag > controlDistance\n          ? s.moveSpeed\n          : (s.moveSpeed * dMag) / controlDistance;\n      v.x = (dx / dMag) * adjustedSpeed;\n      v.y = (dy / dMag) * adjustedSpeed;\n    });\n}\nfunction handleTimers(world: World) {\n  world\n    .query({ and: [Timer, Callback] })\n    .forEach((e) => World.getComponent(e, Callback).callback(e));\n  world.query({ and: [Timer] }).forEach((e) => {\n    const t = World.getComponent(e, Timer);\n    if (t.reset) t.timeMilli = 0;\n    t.reset = false;\n    if (!t.stop) t.timeMilli += Time.dtMilli;\n  });\n}\nfunction drawTexts(world: World) {\n  world.query({ and: [Text, Transform] }).forEach((e) => {\n    const t = World.getComponent(e, Text);\n    const p = World.getComponent(e, Transform);\n    Ctx2D.ctx.font = `${t.fontSize}px serif`;\n    const old = Ctx2D.ctx.fillStyle;\n    const lines = t.content.split(\"\\n\");\n    for (let i = 0, l = lines.length; i < l; i++) {\n      const txtMetric = Ctx2D.ctx.measureText(lines[i]);\n      Ctx2D.ctx.fillStyle = t.backgroundColor;\n      Ctx2D.ctx.fillRect(\n        p.x,\n        p.y + i * (2 * t.padding) + i * txtMetric.fontBoundingBoxAscent,\n        t.padding * 2 + txtMetric.width,\n        t.padding * 2 + txtMetric.fontBoundingBoxAscent,\n      );\n      Ctx2D.ctx.fillStyle = t.color;\n      Ctx2D.ctx.fillText(\n        lines[i],\n        p.x + t.padding,\n        p.y + i * (2 * t.padding) + (i + 1) * txtMetric.fontBoundingBoxAscent,\n      );\n    }\n    Ctx2D.ctx.fillStyle = old;\n  });\n}\nfunction drawRects(world: World) {\n  world.query({ and: [Transform, Rect, Colour, OnScreen] }).forEach((e) => {\n    const p = World.getComponent(e, Transform);\n    const r = World.getComponent(e, Rect);\n    const c = World.getComponent(e, Colour);\n    const oldF = Ctx2D.ctx.fillStyle;\n    const oldS = Ctx2D.ctx.strokeStyle;\n    Ctx2D.ctx.fillStyle = c.fill;\n    Ctx2D.ctx.strokeStyle = c.stroke;\n    const cos = Math.cos(p.rad);\n    const sin = Math.sin(p.rad);\n    Ctx2D.ctx.transform(cos, sin, -sin, cos, p.x, p.y);\n    Ctx2D.ctx.fillRect(\n      r.offsetX * p.scaleX,\n      r.offsetY * p.scaleY,\n      r.width * p.scaleX,\n      r.height * p.scaleY,\n    );\n    Ctx2D.ctx.strokeRect(\n      r.offsetX * p.scaleX,\n      r.offsetY * p.scaleY,\n      r.width * p.scaleX,\n      r.height * p.scaleY,\n    );\n    Ctx2D.ctx.transform(\n      cos,\n      -sin,\n      sin,\n      cos,\n      cos * -p.x + sin * -p.y,\n      -sin * -p.x + cos * -p.y,\n    );\n    Ctx2D.ctx.fillStyle = oldF;\n    Ctx2D.ctx.strokeStyle = oldS;\n  });\n}\nfunction drawPathFindTargets(world: World) {\n  const old = Ctx2D.ctx.fillStyle;\n  Ctx2D.ctx.fillStyle = \"red\";\n  world.query({ and: [PathFinder] }).forEach((e) => {\n    const pf = World.getComponent(e, PathFinder);\n    Ctx2D.ctx.fillRect(pf.targetX - 0.5, pf.targetY - 0.5, 1, 1);\n  });\n  Ctx2D.ctx.fillStyle = old;\n}\nfunction handleCamera(world: World) {\n  const camEntity = world\n    .query({ and: [Camera, Transform] })\n    .find((e) => World.getComponent(e, Camera).isActive);\n  if (!camEntity) return;\n  Ctx2D.ctx.resetTransform();\n  const c = World.getComponent(camEntity, Camera);\n  const p = World.getComponent(camEntity, Transform);\n  if (c.targetEntity != -1 && World.hasComponent(c.targetEntity, Transform)) {\n    const targetPos = World.getComponent(c.targetEntity, Transform);\n    Object.assign(p, targetPos);\n  }\n  const sin = Math.sin(c.tilt) * c.zoom;\n  const cos = Math.cos(c.tilt) * c.zoom;\n  Ctx2D.ctx.transform(\n    cos,\n    sin,\n    -sin,\n    cos,\n    cos * -p.x - sin * -p.y + Ctx2D.ctx.canvas.width * 0.5,\n    sin * -p.x + cos * -p.y + Ctx2D.ctx.canvas.height * 0.5,\n  );\n}\nfunction move(world: World) {\n  const dt = Time.dtMilli / 1000;\n  world.query({ and: [Transform, Velocity] }).forEach((e) => {\n    const p = World.getComponent(e, Transform);\n    const v = World.getComponent(e, Velocity);\n    p.x += v.x * dt;\n    p.y += v.y * dt;\n  });\n}\nfunction drawImg(world: World) {\n  world.query({ and: [Graphic, Transform] }).forEach((e) => {\n    const g = World.getComponent(e, Graphic);\n    const p = World.getComponent(e, Transform);\n    const r = World.hasComponent(e, Rect) && World.getComponent(e, Rect);\n    const img = new Image();\n    img.src = g.src;\n    const imgWidth = r ? r.width : img.width;\n    const imgHeight = r ? r.height : img.height;\n    const scaleX = imgWidth / img.width;\n    const scaleY = imgHeight / img.height;\n    Ctx2D.ctx.transform(scaleX, 0, 0, scaleY, 0, 0);\n    Ctx2D.ctx.drawImage(\n      img,\n      (p.x - imgWidth / 2) / scaleX,\n      (p.y - imgHeight / 2) / scaleY,\n    );\n    Ctx2D.ctx.transform(1 / scaleX, 0, 0, 1 / scaleY, 0, 0);\n  });\n}\nfunction handleButtons(world: World) {\n  const pressPos = pointerToScreen(Pointer.pressPos, Ctx2D.canvas);\n  const releasePos = pointerToScreen(Pointer.releasePos, Ctx2D.canvas);\n  world.query({ and: [Button, Transform, Rect, Callback] }).forEach((e) => {\n    const p = World.getComponent(e, Transform);\n    const b = World.getComponent(e, Button);\n    const r = World.getComponent(e, Rect);\n    const cb = World.getComponent(e, Callback);\n    const pressedWithinButton =\n      (pressPos.x - p.x) ** 2 < (r.width / 2) ** 2 &&\n      (pressPos.y - p.y) ** 2 < (r.height / 2) ** 2;\n    b.hovered =\n      (Pointer.x - p.x) ** 2 < (r.width / 2) ** 2 &&\n      (Pointer.y - p.y) ** 2 < (r.height / 2) ** 2;\n    b.pressed = b.hovered && Pointer.isDown && pressedWithinButton;\n    b.clicked =\n      Pointer.justReleased &&\n      pressedWithinButton &&\n      (releasePos.x - p.x) ** 2 < (r.width / 2) ** 2 &&\n      (releasePos.y - p.y) ** 2 < (r.height / 2) ** 2;\n    cb.callback(e);\n  });\n}\nfunction drawHealthBars(world: World) {\n  world.query({ and: [OnScreen, Health, Transform, Rect] }).forEach((e) => {\n    const t = World.getComponent(e, Transform);\n    const r = World.getComponent(e, Rect);\n    const h = World.getComponent(e, Health);\n    const oldStroke = Ctx2D.ctx.strokeStyle;\n    const oldFill = Ctx2D.ctx.fillStyle;\n    const oldLineWidth = Ctx2D.ctx.lineWidth;\n    Ctx2D.ctx.fillStyle = \"black\";\n    const width = r.width * 1.5;\n    Ctx2D.ctx.fillRect(\n      t.x - width / 2,\n      t.y + r.offsetY * t.scaleY - 1,\n      width,\n      0.3,\n    );\n    Ctx2D.ctx.fillStyle = \"green\";\n    Ctx2D.ctx.fillRect(\n      t.x - width / 2,\n      t.y + r.offsetY * t.scaleY - 1,\n      width * (h.current / h.max),\n      0.3,\n    );\n    Ctx2D.ctx.strokeStyle = \"black\";\n    Ctx2D.ctx.lineWidth = 0.1;\n    Ctx2D.ctx.strokeRect(\n      t.x - width / 2,\n      t.y + r.offsetY * t.scaleY - 1,\n      width,\n      0.3,\n    );\n    Ctx2D.ctx.strokeStyle = oldStroke;\n    Ctx2D.ctx.fillStyle = oldFill;\n    Ctx2D.ctx.lineWidth = oldLineWidth;\n  });\n}\n\n// entities\nfunction addGraphic(world: World, src: string, x = 0, y = 0, w = 1, h = 1) {\n  const e = world.addEntity();\n  World.addComponent(e, Transform, { x, y });\n  World.addComponent(e, Graphic, { src });\n  World.addComponent(e, Rect, { width: w, height: h });\n  return e;\n}\nfunction addRect(\n  world: World,\n  x = 0,\n  y = 0,\n  w = 1,\n  h = 1,\n  offsetX = -w / 2,\n  offsetY = -h / 2,\n) {\n  const e = world.addEntity();\n  World.addComponent(e, Transform, { x, y });\n  World.addComponent(e, Rect, { width: w, height: h, offsetX, offsetY });\n  World.addComponent(e, Colour);\n  World.addComponent(e, OnScreen);\n  return e;\n}\nfunction addButton(\n  world: World,\n  x = 0,\n  y = 0,\n  w = 10,\n  h = 10,\n  cb = (_: entityT) => {},\n) {\n  const e = addRect(world, x, y, w, h);\n  World.addComponent(e, Button);\n  World.addComponent(e, Colour);\n  World.addComponent(e, Callback, { callback: cb });\n  return e;\n}\nfunction addTimerWithCallback(world: World, cb: (e: entityT) => void) {\n  const e = world.addEntity();\n  World.addComponent(e, Timer);\n  World.addComponent(e, Callback).callback = cb;\n  return e;\n}\nfunction addPlayer(world: World, x = 0, y = 0) {\n  const player = addRect(world, x, y, 1, 1);\n  World.addComponent(player, Velocity);\n  World.addComponent(player, Stats, {\n    ...config.entities.player,\n  });\n  World.addComponent(player, Health, {\n    max: config.entities.player.healthPoint,\n    current: config.entities.player.healthPoint,\n  });\n  World.addComponent(player, PlayerControl);\n  World.addComponent(player, PathFinder, { targetX: x, targetY: y });\n  return player;\n}\nfunction addTurrent(world: World, x: number, y: number) {\n  const turrent = addRect(world, x, y, 3, 10, -1.5, -10);\n  World.addComponent(turrent, Stats, { ...config.entities.turrent });\n  World.addComponent(turrent, Health, {\n    max: config.entities.turrent.healthPoint,\n    current: config.entities.turrent.healthPoint,\n  });\n  return turrent;\n}\nfunction addCamera(world: World, x: number, y: number) {\n  const cam = world.addEntity();\n  World.addComponent(cam, Camera, { zoom: 30 });\n  World.addComponent(cam, Transform, { x, y });\n  return cam;\n}\n\n//utils\nfunction drawBg(color: string = \"#424242\") {\n  const old = Ctx2D.ctx.fillStyle;\n  Ctx2D.ctx.fillStyle = color;\n  Ctx2D.ctx.fillRect(0, 0, Ctx2D.canvas.width, Ctx2D.canvas.height);\n  Ctx2D.ctx.fillStyle = old;\n}\nfunction rectsOverlap(\n  cx1: number,\n  cy1: number,\n  w1: number,\n  h1: number,\n  cx2: number,\n  cy2: number,\n  w2: number,\n  h2: number,\n): boolean {\n  return (\n    (cx1 - cx2) ** 2 < ((w1 + w2) / 2) ** 2 &&\n    (cy1 - cy2) ** 2 < ((h1 + h2) / 2) ** 2\n  );\n}\ntype vec2 = { x: number; y: number };\nfunction screenToWorld(\n  pointerPos: vec2,\n  cameraPos: vec2,\n  cameraTilt: number,\n  cameraZoom: number,\n): vec2 {\n  const cos = Math.cos(cameraTilt);\n  const sin = Math.sin(cameraTilt);\n  const res = { x: 0, y: 0 };\n  const x = pointerPos.x - config.viewport.width / 2;\n  const y = pointerPos.y - config.viewport.height / 2;\n  res.x = cos * x + sin * y;\n  res.y = -sin * x + cos * y;\n  res.x /= cameraZoom;\n  res.y /= cameraZoom;\n  res.x += cameraPos.x;\n  res.y += cameraPos.y;\n  return res;\n}\nfunction worldToScreen(\n  pos: vec2,\n  cameraPos: vec2,\n  cameraTilt: number,\n  cameraZoom: number,\n): vec2 {\n  const c = Math.cos(cameraTilt);\n  const s = Math.sin(cameraTilt);\n  const res = { x: 0, y: 0 };\n  let x = pos.x - cameraPos.x;\n  let y = pos.y - cameraPos.y;\n  x *= cameraZoom;\n  y *= cameraZoom;\n  res.x = c * x - s * y;\n  res.y = s * x + c * y;\n  res.x += config.viewport.width * 0.5;\n  res.y += config.viewport.height * 0.5;\n  return res;\n}\n// credit: https://www.30secondsofcode.org/js/s/detect-device-type/\nfunction detectDeviceType(): string {\n  return /Mobile|Android|iPhone|iPad/i.test(navigator.userAgent)\n    ? \"Mobile\"\n    : \"Desktop\";\n}\nfunction pointerToScreen(pointer: vec2, canvas: HTMLCanvasElement): vec2 {\n  const out = { x: 0, y: 0 };\n  const rect = canvas.getBoundingClientRect();\n  out.x = pointer.x - rect.left;\n  out.y = pointer.y - rect.top;\n  if (innerWidth / innerHeight < canvas.width / canvas.height) {\n    out.x *= canvas.width / innerWidth;\n    out.y *= canvas.width / innerWidth;\n  } else {\n    out.x *= canvas.height / innerHeight;\n    out.y *= canvas.height / innerHeight;\n  }\n  return out;\n}\n\n// initialization\nCtx2D.canvas.width = config.viewport.width;\nCtx2D.canvas.height = config.viewport.height;\nCtx2D.canvas.style.imageRendering = \"pixelated\";\nCtx2D.ctx.lineWidth = 0.1;\n\nconst game = new World();\n\nconst turrent = addTurrent(game, 10, 0);\nWorld.addComponent(turrent, ParticleEmitter, {\n  particleEntity: turrent,\n  speed: 20,\n  spread: 0.2,\n});\nWorld.addComponent(turrent, Timer);\nWorld.addComponent(turrent, Callback).callback = () => {\n  const t = World.getComponent(turrent, Timer);\n  if (t.timeMilli < 100) return;\n  t.reset = true;\n  World.getComponent(turrent, ParticleEmitter).emit = true;\n};\n\nconst player = addPlayer(game, 0, 0);\nWorld.getComponent(player, Health).current *= 0.6;\n\nconst map = addGraphic(game, \"./assets/Map_of_MOBA.svg\", 0, 0, 300, 300);\n\nconst cam = addCamera(game, 0, 0);\nconst camComponent = World.getComponent(cam, Camera);\ncamComponent.targetEntity = player;\ncamComponent.isActive = true;\ncamComponent.zoom = 15;\n\nconst inGameUi = new World();\n\naddButton(\n  inGameUi,\n  config.viewport.width * 0.9,\n  config.viewport.height * 0.8,\n  config.viewport.height * 0.3,\n  config.viewport.height * 0.3,\n  (e) => {\n    const b = World.getComponent(e, Button);\n    b.clicked && console.log(\"clicked\");\n  },\n);\n\nconst debugTextEntity = inGameUi.addEntity();\nconst debugText = World.addComponent(debugTextEntity, Text, {\n  content: \"test string\",\n  backgroundColor: \"white\",\n});\nWorld.addComponent(debugTextEntity, Transform);\n\n(function update() {\n  debugText.content = `FPS: ${Math.ceil(1000 / Time.dtMilli)}\\nEntity count: ${game.entityCount()}\\nDevice type: ${detectDeviceType()}`;\n\n  // drawing\n  drawBg();\n  game.update(\n    handleCamera,\n    checkOnScreenEntities,\n    drawImg,\n    drawRects,\n    drawPathFindTargets,\n    drawHealthBars,\n  );\n  Ctx2D.ctx.resetTransform();\n  inGameUi.update(drawImg, drawRects, drawTexts);\n\n  // processing\n  inGameUi.update(handleButtons);\n  game.update(\n    handleTimers,\n    handlePathfind,\n    handleInput,\n    handleParticleEmitters,\n    move,\n  );\n\n  pointerUpdate(Pointer);\n  keyboardUpdate(Keys);\n  timeUpdate(Time);\n  requestAnimationFrame(update);\n})();\n"],
  "mappings": "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",
  "names": ["ObjectPoolMap", "objectFactory", "key", "obj", "index", "removed", "k", "v", "ComponentManager", "_ComponentManager", "component", "ObjectPoolMap", "key", "World", "_World", "entity", "copy", "compTypes", "ComponentManager", "mask", "l", "a", "component", "values", "compId", "fns", "i", "types", "query", "andMask", "notMask", "res", "archetypes", "set", "config_default", "Stats", "Health", "Callback", "Transform", "Velocity", "PlayerControl", "OnScreen", "ParticleEmitter", "particleEntity", "percentageLifeTime", "t", "World", "Transform", "Camera", "Rect", "Graphic", "Button", "Colour", "Text", "Timer", "PathFinder", "Ctx2D", "setUpCanvas2D", "Pointer", "setUpPointer", "Keys", "setUpKeyboard", "Time", "setUpTime", "canvas", "ctx", "keys", "e", "keyboardUpdate", "key", "pointer", "pointerUpdate", "timeUpdate", "time", "checkOnScreenEntities", "world", "camEntity", "cam", "camTransform", "r", "rectsOverlap", "handleParticleEmitters", "world", "ParticleEmitter", "Transform", "e", "emitter", "World", "t", "particle", "particleTransform", "timer", "Timer", "rand", "radian", "Velocity", "Callback", "handleInput", "camEntity", "Camera", "camera", "camTransform", "pressPos", "pointerToScreen", "Pointer", "Ctx2D", "PathFinder", "PlayerControl", "pf", "worldPos", "screenToWorld", "handlePathfind", "Stats", "p", "v", "s", "dx", "dy", "dMag", "controlDistance", "Time", "adjustedSpeed", "handleTimers", "drawTexts", "Text", "old", "lines", "i", "l", "txtMetric", "drawRects", "Rect", "Colour", "OnScreen", "r", "c", "oldF", "oldS", "cos", "sin", "drawPathFindTargets", "handleCamera", "targetPos", "move", "dt", "drawImg", "Graphic", "g", "img", "imgWidth", "imgHeight", "scaleX", "scaleY", "handleButtons", "releasePos", "Button", "b", "cb", "pressedWithinButton", "drawHealthBars", "Health", "h", "oldStroke", "oldFill", "oldLineWidth", "width", "addGraphic", "src", "x", "y", "w", "addRect", "offsetX", "offsetY", "addButton", "_", "addPlayer", "world", "x", "y", "player", "addRect", "World", "Velocity", "Stats", "config_default", "Health", "PlayerControl", "PathFinder", "addTurrent", "turrent", "addCamera", "cam", "Camera", "Transform", "drawBg", "color", "old", "Ctx2D", "rectsOverlap", "cx1", "cy1", "w1", "h1", "cx2", "cy2", "w2", "h2", "screenToWorld", "pointerPos", "cameraPos", "cameraTilt", "cameraZoom", "cos", "sin", "res", "detectDeviceType", "pointerToScreen", "pointer", "canvas", "out", "rect", "Ctx2D", "config_default", "game", "World", "turrent", "addTurrent", "ParticleEmitter", "Timer", "Callback", "t", "player", "addPlayer", "Health", "map", "addGraphic", "cam", "addCamera", "camComponent", "Camera", "inGameUi", "addButton", "e", "Button", "debugTextEntity", "debugText", "Text", "Transform", "update", "Time", "drawBg", "handleCamera", "checkOnScreenEntities", "drawImg", "drawRects", "drawPathFindTargets", "drawHealthBars", "drawTexts", "handleButtons", "handleTimers", "handlePathfind", "handleInput", "handleParticleEmitters", "move", "pointerUpdate", "Pointer", "keyboardUpdate", "Keys", "timeUpdate"]
}
