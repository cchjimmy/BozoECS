{
  "version": 3,
  "sources": ["../../../src/pool.ts", "../../../src/component.ts", "../../../src/entity.ts", "../../../src/world.ts", "../src/config.json", "../src/main.ts"],
  "sourcesContent": ["export class ObjectPoolMap<K, V> {\n  private storage: V[] = [];\n  private keyToIndex: Map<K, number> = new Map();\n  private indexToKey: Array<K> = [];\n  private objectFactory: () => V;\n  private size = 0;\n\n  constructor(objectFactory: () => V) {\n    this.objectFactory = objectFactory;\n  }\n\n  len() {\n    return this.size;\n  }\n\n  add(key: K): V {\n    const index = this.keyToIndex.get(key);\n    if (index != undefined) return this.storage[index];\n    if (this.size >= this.storage.length)\n      this.storage.push(this.objectFactory());\n    this.keyToIndex.set(key, this.size);\n    this.indexToKey[this.size] = key;\n    this.size++;\n    return this.storage[this.size - 1];\n  }\n\n  remove(key: K): boolean {\n    const index = this.keyToIndex.get(key) ?? -1;\n    const backKey = this.indexToKey[this.size - 1];\n    if (index < 0 || index >= this.size || !backKey) return false;\n    const removed = this.storage[index];\n    // swap with last to maintain packed\n    this.storage[index] = this.storage[this.size - 1];\n    this.storage[this.size - 1] = removed;\n    // set before deleting because backKey == key sometimes\n    this.keyToIndex.set(backKey, index);\n    this.keyToIndex.delete(key);\n    this.indexToKey[index] = backKey;\n    this.size--;\n    return true;\n  }\n\n  get(key: K): V {\n    const index = this.keyToIndex.get(key) ?? -1;\n    if (index < 0 || index >= this.size) throw new Error(\"Index out of range.\");\n    return this.storage[index];\n  }\n\n  has(key: K): boolean {\n    return this.keyToIndex.has(key);\n  }\n\n  clean() {\n    this.storage.splice(this.size);\n    this.indexToKey.splice(this.size);\n    for (const key of this.keyToIndex.keys()) {\n      const index = this.keyToIndex.get(key) ?? -1;\n      (index < 0 || index >= this.size) && this.keyToIndex.delete(key);\n    }\n  }\n}\n", "import { ObjectPoolMap } from \"./pool.ts\";\nimport { entityT, newEntity } from \"./entity.ts\";\n\nexport class ComponentManager {\n  private pools: Map<object, unknown> = new Map();\n  private idMap: Map<object, number> = new Map();\n\n  register<T extends object>(component: T) {\n    if (this.pools.has(component)) return;\n    this.idMap.set(component, this.idMap.size);\n    this.pools.set(\n      component,\n      new ObjectPoolMap<entityT, T>(() => ({ ...component })),\n    );\n  }\n\n  getId<T extends object>(component: T): number {\n    return this.idMap.get(component) ?? -1;\n  }\n\n  add<T extends object>(entity: entityT, component: T): T {\n    return Object.assign(\n      (this.pools.get(component) as ObjectPoolMap<entityT, T>).add(entity),\n      component,\n    );\n  }\n\n  remove<T extends object>(entity: entityT, component: T): boolean {\n    return (this.pools.get(component) as ObjectPoolMap<entityT, T>).remove(\n      entity,\n    );\n  }\n\n  get<T extends object>(entity: entityT, component: T): T {\n    return (this.pools.get(component) as ObjectPoolMap<entityT, T>).get(entity);\n  }\n\n  len<T extends object>(component: T): number {\n    return (this.pools.get(component) as ObjectPoolMap<entityT, T>).len();\n  }\n\n  delete(entity: entityT) {\n    for (const p of this.pools.values()) {\n      const pool = p as ObjectPoolMap<entityT, object>;\n      pool.remove(entity);\n    }\n  }\n\n  copy(srcEntity: entityT, destEntity: entityT) {\n    for (const p of this.pools.values()) {\n      const pool = p as ObjectPoolMap<entityT, object>;\n      pool.has(srcEntity) &&\n        Object.assign(pool.add(destEntity), pool.get(srcEntity));\n    }\n  }\n\n  clean() {\n    for (const p of this.pools.values()) {\n      const pool = p as ObjectPoolMap<entityT, object>;\n      pool.clean();\n    }\n  }\n}\n", "export type entityT = number;\nexport function newEntity(): entityT {\n  return Math.random();\n}\n", "import { ComponentManager } from \"./component.ts\";\nimport { newEntity, type entityT } from \"./entity.ts\";\n\nexport type queryT = Partial<Record<\"and\" | \"not\", object[]>>;\n\nexport class World {\n  private maskMap: Map<number, number> = new Map();\n  private archetypeMap: Map<number, Set<entityT>> = new Map();\n  private entitiesToDelete: entityT[] = [];\n  private compManager = new ComponentManager();\n  private frameCount = 0;\n  cleanUpMinutes = 5;\n\n  constructor(cleanUpMinutes = 5) {\n    this.cleanUpMinutes = cleanUpMinutes;\n  }\n\n  addEntity(entity: entityT = newEntity()): entityT {\n    this.maskMap.set(entity, 0);\n    this.getArchetype(0).add(entity);\n    return entity;\n  }\n\n  copyEntity(src: entityT, dest: entityT = newEntity()): entityT {\n    this.compManager.copy(src, dest);\n    const mask = this.maskMap.get(src) ?? 0;\n    this.maskMap.set(dest, mask);\n    this.getArchetype(mask).add(dest);\n    return dest;\n  }\n\n  private getArchetype(mask: number): Set<entityT> {\n    const a = this.archetypeMap.get(mask) ?? new Set();\n    this.archetypeMap.set(mask, a);\n    return a;\n  }\n\n  deleteEntity(entity: entityT) {\n    this.entitiesToDelete.push(entity);\n  }\n\n  registerComponent<T extends object>(component: T): World {\n    this.compManager.register(component);\n    return this;\n  }\n\n  hasComponent<T extends object>(entity: entityT, component: T): boolean {\n    return (\n      ((this.maskMap.get(entity) ?? 0) &\n        (1 << this.compManager.getId(component))) >\n      0\n    );\n  }\n\n  addComponent<T extends object>(\n    entity: entityT,\n    component: T,\n    values: Partial<T> = component,\n  ): T {\n    this.registerComponent(component);\n    let mask = this.maskMap.get(entity) ?? 0;\n    const compId = this.compManager.getId(component);\n    if ((mask & (1 << compId)) != 0) {\n      return Object.assign(this.compManager.get(entity, component), values);\n    }\n    this.getArchetype(mask).delete(entity);\n    mask |= 1 << compId;\n    this.maskMap.set(entity, mask);\n    this.getArchetype(mask).add(entity);\n    return Object.assign(this.compManager.add(entity, component), values);\n  }\n\n  removeComponent<T extends object>(entity: entityT, component: T): boolean {\n    this.registerComponent(component);\n    let mask = this.maskMap.get(entity) ?? 0;\n    const compId = this.compManager.getId(component);\n    if ((mask & (1 << compId)) == 0) return false;\n    this.getArchetype(mask).delete(entity);\n    mask &= ~(1 << compId);\n    this.maskMap.set(entity, mask);\n    this.getArchetype(mask).add(entity);\n    return this.compManager.remove(entity, component);\n  }\n\n  getComponent<T extends object>(entity: entityT, component: T): T {\n    return this.compManager.get(entity, component);\n  }\n\n  update(...fns: ((world: World) => void)[]) {\n    for (let i = 0, l = fns.length; i < l; i++) fns[i](this);\n    this.commitEntityDeletion();\n    this.frameCount % (this.cleanUpMinutes * 60 * 60) == 0 &&\n      this.cleanObjectPools();\n    this.frameCount++;\n  }\n\n  commitEntityDeletion() {\n    while (this.entitiesToDelete.length) {\n      const entity = this.entitiesToDelete.pop() as entityT;\n      this.compManager.delete(entity);\n      const mask = this.maskMap.get(entity) ?? 0;\n      this.maskMap.delete(entity);\n      this.getArchetype(mask).delete(entity);\n    }\n  }\n\n  cleanObjectPools() {\n    this.compManager.clean();\n  }\n\n  query(query: queryT): entityT[] {\n    let andMask = 0,\n      notMask = 0;\n    if (query.and) {\n      for (let i = 0, l = query.and.length; i < l; i++) {\n        andMask |= 1 << this.compManager.getId(query.and[i]);\n      }\n    }\n    if (query.not) {\n      for (let i = 0, l = query.not.length; i < l; i++) {\n        notMask |= 1 << this.compManager.getId(query.not[i]);\n      }\n    }\n    const res: entityT[] = [];\n    this.archetypeMap.forEach((_v, k) => {\n      const set = this.getArchetype(k);\n      set.size > 0 &&\n        (k & andMask) == andMask &&\n        (k & notMask) == 0 &&\n        res.push(...set);\n    });\n    return [...new Set(res)];\n  }\n\n  entityCount(): number {\n    return this.maskMap.size;\n  }\n}\n", "{\n  \"viewport\": {\n    \"width\": 800,\n    \"height\": 400\n  },\n  \"entities\": {\n    \"player\": {\n      \"healthPoint\": 10,\n      \"moveSpeed\": 20\n    },\n    \"minion\": {\n      \"healthPoint\": 15,\n      \"spawnRate\": 2\n    },\n    \"turrent\": {\n      \"healthPoint\": 100,\n      \"abilityPower\": 100\n    }\n  }\n}\n", "/**\n * By Original PNG version by Raizin, SVG rework by Sameboat. - file:Map of MOBA.png (CC 3.0), CC BY-SA 3.0, https://commons.wikimedia.org/w/index.php?curid=29443207\n */\n\nimport { entityT, World } from \"bozoecs\";\nimport { default as config } from \"./config.json\" with { type: \"json\" };\n\n// components\nconst PIDController = {\n  kp: 0,\n  ki: 0,\n  kd: 0,\n  prevErr: 0,\n  accumErr: 0,\n  currentErr: 0,\n  result: 0,\n  reset: false,\n};\nconst Stats = {\n  attackPoint: 0,\n  defencePoint: 0,\n  abilityPower: 0,\n  moveSpeed: 0,\n  attackSpeed: 0,\n};\nconst Health = { current: 0, max: 0 };\nconst Callback = { callback: new Function() };\nconst Transform = { x: 0, y: 0, rad: 0, scaleX: 1, scaleY: 1 };\nconst Velocity = { x: 0, y: 0 };\nconst PlayerControl = {};\nconst ComControl = {};\nconst OnScreen = {};\nconst ParticleEmitter = {\n  spreadRadians: 0,\n  particleEntity: -1,\n  particleLifetimeSeconds: 1,\n  speed: 1,\n  emit: false,\n  particleTransition: function (\n    world: World,\n    particleEntity: entityT,\n    percentageLifeTime: number,\n  ) {\n    const t = world.getComponent(particleEntity, Transform);\n    t.scaleX = t.scaleY = -(percentageLifeTime ** 2) + 1;\n  },\n};\nconst Camera = { zoom: 20, tilt: 0, isActive: false, targetEntity: -1 };\nconst Rect = { width: 1, height: 1, offsetX: 0.5, offsetY: 0.5 };\nconst Graphic = { src: \"\" };\nconst Button = { hovered: false, pressed: false, clicked: false };\nconst Colour = { fill: \"white\", stroke: \"black\" };\nconst Text = {\n  content: \"\",\n  fontSize: 20,\n  padding: 3,\n  color: \"black\",\n  backgroundColor: \"white\",\n};\nconst Timer = { timeMilli: 0, reset: false, stop: false };\nconst PathFinder = { targetX: 0, targetY: 0 };\n\n// singletons\nconst Ctx2D = setUpCanvas2D();\nconst Pointer = setUpPointer();\nconst Keys = setUpKeyboard();\nconst Time = setUpTime();\nlet canPlayerMove = true;\n\nfunction setUpCanvas2D(): {\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n} {\n  const canvas =\n    document.querySelector(\"canvas\") ?? document.createElement(\"canvas\");\n  if (!canvas) throw new Error(\"Cannot create canvas element.\");\n  const ctx = canvas.getContext(\"2d\");\n  if (!ctx) throw new Error(\"Cannot initialize context 2d.\");\n\n  document.body.appendChild(canvas);\n\n  globalThis.onresize = globalThis.onload = () => {\n    if (innerWidth / innerHeight < canvas.width / canvas.height) {\n      canvas.style.width = \"100%\";\n      canvas.style.height = \"\";\n    } else {\n      canvas.style.width = \"\";\n      canvas.style.height = \"100%\";\n    }\n  };\n\n  return { canvas, ctx };\n}\nfunction setUpKeyboard(): Record<\n  \"isDown\" | \"justPressed\" | \"justReleased\",\n  Record<string, boolean>\n> {\n  const keys: ReturnType<typeof setUpKeyboard> = {\n    isDown: {},\n    justPressed: {},\n    justReleased: {},\n  };\n\n  globalThis.onkeydown = (e) => {\n    !keys.isDown[e.key] && (keys.justPressed[e.key] = true);\n    keys.isDown[e.key] = true;\n  };\n  globalThis.onkeyup = (e) => {\n    keys.isDown[e.key] = false;\n    keys.justReleased[e.key] = true;\n  };\n\n  return keys;\n}\nfunction updateKeyboard(\n  keys: Record<\n    \"isDown\" | \"justPressed\" | \"justReleased\",\n    Record<string, boolean>\n  >,\n) {\n  for (const key in keys.justPressed) keys.justPressed[key] = false;\n  for (const key in keys.justReleased) keys.justReleased[key] = false;\n}\nfunction setUpPointer() {\n  const pointer = {\n    x: 0,\n    y: 0,\n    isDown: false,\n    justPressed: false,\n    justReleased: false,\n    pressPos: { x: 0, y: 0 },\n    releasePos: { x: 0, y: 0 },\n  };\n\n  globalThis.onpointerdown = (e) => {\n    if (!(e.target instanceof HTMLCanvasElement)) return;\n    ((pointer.x = e.x), (pointer.y = e.y));\n    Object.assign(pointer.pressPos, pointer);\n    pointer.isDown = pointer.justPressed = true;\n  };\n\n  globalThis.onpointerup = (e) => {\n    ((pointer.x = e.x), (pointer.y = e.y));\n    Object.assign(pointer.releasePos, pointer);\n    ((pointer.isDown = false), (pointer.justReleased = true));\n  };\n\n  globalThis.onpointermove = (e) => {\n    ((pointer.x = e.x), (pointer.y = e.y));\n  };\n\n  return pointer;\n}\nfunction updatePointer(\n  pointer: Record<\"isDown\" | \"justPressed\" | \"justReleased\", boolean>,\n) {\n  pointer.justPressed = false;\n  pointer.justReleased = false;\n}\nfunction setUpTime() {\n  return { dtMilli: 0, timeMilli: 0 };\n}\nfunction updateTime(time: { dtMilli: number; timeMilli: number }) {\n  time.dtMilli = performance.now() - time.timeMilli;\n  time.timeMilli += time.dtMilli;\n}\n\n// systems\nfunction checkOnScreenEntities(world: World) {\n  const camEntity = world\n    .query({ and: [Camera, Transform] })\n    .find((e) => world.getComponent(e, Camera).isActive);\n  if (!camEntity) return;\n  const cam = world.getComponent(camEntity, Camera);\n  const camTransform = world.getComponent(camEntity, Transform);\n  world.query({ and: [Rect, Transform] }).forEach((e) => {\n    world.removeComponent(e, OnScreen);\n    const r = world.getComponent(e, Rect);\n    const t = world.getComponent(e, Transform);\n    rectsOverlap(\n      camTransform.x,\n      camTransform.y,\n      Ctx2D.canvas.width / cam.zoom,\n      Ctx2D.canvas.height / cam.zoom,\n      t.x + r.offsetX + r.width / 2,\n      t.y + r.offsetY + r.height / 2,\n      r.width,\n      r.height,\n    ) && world.addComponent(e, OnScreen);\n  });\n}\nfunction handlePIDControllers(world: World) {\n  world.query({ and: [PIDController] }).forEach((e) => {\n    const pid = world.getComponent(e, PIDController);\n    pid.result =\n      pid.kp * pid.currentErr +\n      pid.ki * pid.accumErr +\n      (pid.kd * (pid.currentErr - pid.prevErr) * 1000) / Time.dtMilli;\n    pid.prevErr = pid.currentErr * +!pid.reset;\n    pid.accumErr = (pid.accumErr + pid.currentErr) * +!pid.reset;\n  });\n}\nfunction handleParticleEmitters(world: World) {\n  world.query({ and: [ParticleEmitter, Transform] }).forEach((e) => {\n    const emitter = world.getComponent(e, ParticleEmitter);\n    if (!emitter.emit || !world.hasComponent(emitter.particleEntity, Transform))\n      return;\n    emitter.emit = false;\n    const t = world.getComponent(e, Transform);\n    const particle = world.copyEntity(emitter.particleEntity);\n    const particleTransform = world.getComponent(particle, Transform);\n    Object.assign(particleTransform, t);\n    const timer = world.addComponent(particle, Timer);\n    const radian =\n      t.rad + (Math.random() * 2 - 1) * emitter.spreadRadians * 0.5;\n    particleTransform.rad = radian;\n    world.addComponent(particle, Velocity, {\n      x: Math.cos(radian) * emitter.speed,\n      y: Math.sin(radian) * emitter.speed,\n    });\n    world.addComponent(particle, Callback).callback = () => {\n      if (timer.timeMilli < emitter.particleLifetimeSeconds * 1000) {\n        emitter.particleTransition(\n          world,\n          particle,\n          timer.timeMilli / 1000 / emitter.particleLifetimeSeconds,\n        );\n        return;\n      }\n      world.deleteEntity(particle);\n    };\n  });\n}\nfunction handleInput(world: World) {\n  const camEntity = world\n    .query({ and: [Camera, Transform] })\n    .find((e) => world.getComponent(e, Camera).isActive);\n  if (camEntity == undefined) return;\n  const camera = world.getComponent(camEntity, Camera);\n  const camTransform = world.getComponent(camEntity, Transform);\n  const pressPos = pointerToScreen(Pointer.pressPos, Ctx2D.canvas);\n  world.query({ and: [PathFinder, PlayerControl] }).forEach((e) => {\n    if (!Pointer.justPressed || !canPlayerMove) return;\n    const pf = world.getComponent(e, PathFinder);\n    const worldPos = screenToWorld(\n      pressPos,\n      camTransform,\n      camera.tilt,\n      camera.zoom,\n    );\n    pf.targetX = worldPos.x;\n    pf.targetY = worldPos.y;\n  });\n}\nfunction handlePathfind(world: World) {\n  world\n    .query({ and: [PathFinder, Transform, Velocity, Stats] })\n    .forEach((e) => {\n      const pf = world.getComponent(e, PathFinder);\n      const p = world.getComponent(e, Transform);\n      const v = world.getComponent(e, Velocity);\n      const s = world.getComponent(e, Stats);\n\n      const dx = pf.targetX - p.x;\n      const dy = pf.targetY - p.y;\n      const dMag = (dx * dx + dy * dy) ** 0.5;\n      if (dMag == 0) return;\n      const controlDistance = ((s.moveSpeed * Time.dtMilli) / 1000) * 2;\n      const adjustedSpeed =\n        dMag > controlDistance\n          ? s.moveSpeed\n          : (s.moveSpeed * dMag) / controlDistance;\n      v.x = (dx / dMag) * adjustedSpeed;\n      v.y = (dy / dMag) * adjustedSpeed;\n    });\n}\nfunction handleTimers(world: World) {\n  world\n    .query({ and: [Timer, Callback] })\n    .forEach((e) => world.getComponent(e, Callback).callback(e));\n  world.query({ and: [Timer] }).forEach((e) => {\n    const t = world.getComponent(e, Timer);\n    if (t.reset) t.timeMilli = 0;\n    t.reset = false;\n    if (!t.stop) t.timeMilli += Time.dtMilli;\n  });\n}\nfunction drawTexts(world: World) {\n  world.query({ and: [Text, Transform] }).forEach((e) => {\n    const t = world.getComponent(e, Text);\n    const p = world.getComponent(e, Transform);\n    Ctx2D.ctx.font = `${t.fontSize}px serif`;\n    const old = Ctx2D.ctx.fillStyle;\n    const lines = t.content.split(\"\\n\");\n    for (let i = 0, l = lines.length; i < l; i++) {\n      const txtMetric = Ctx2D.ctx.measureText(lines[i]);\n      Ctx2D.ctx.fillStyle = t.backgroundColor;\n      Ctx2D.ctx.fillRect(\n        p.x,\n        p.y + i * (2 * t.padding) + i * txtMetric.fontBoundingBoxAscent,\n        t.padding * 2 + txtMetric.width,\n        t.padding * 2 + txtMetric.fontBoundingBoxAscent,\n      );\n      Ctx2D.ctx.fillStyle = t.color;\n      Ctx2D.ctx.fillText(\n        lines[i],\n        p.x + t.padding,\n        p.y + i * (2 * t.padding) + (i + 1) * txtMetric.fontBoundingBoxAscent,\n      );\n    }\n    Ctx2D.ctx.fillStyle = old;\n  });\n}\nfunction drawRects(world: World) {\n  world.query({ and: [Transform, Rect, Colour, OnScreen] }).forEach((e) => {\n    const p = world.getComponent(e, Transform);\n    const r = world.getComponent(e, Rect);\n    const c = world.getComponent(e, Colour);\n    const oldF = Ctx2D.ctx.fillStyle;\n    const oldS = Ctx2D.ctx.strokeStyle;\n    Ctx2D.ctx.fillStyle = c.fill;\n    Ctx2D.ctx.strokeStyle = c.stroke;\n    const cos = Math.cos(p.rad);\n    const sin = Math.sin(p.rad);\n    Ctx2D.ctx.transform(cos, sin, -sin, cos, p.x, p.y);\n    Ctx2D.ctx.fillRect(\n      r.offsetX * p.scaleX,\n      r.offsetY * p.scaleY,\n      r.width * p.scaleX,\n      r.height * p.scaleY,\n    );\n    Ctx2D.ctx.strokeRect(\n      r.offsetX * p.scaleX,\n      r.offsetY * p.scaleY,\n      r.width * p.scaleX,\n      r.height * p.scaleY,\n    );\n    Ctx2D.ctx.transform(\n      cos,\n      -sin,\n      sin,\n      cos,\n      cos * -p.x + sin * -p.y,\n      -sin * -p.x + cos * -p.y,\n    );\n    Ctx2D.ctx.fillStyle = oldF;\n    Ctx2D.ctx.strokeStyle = oldS;\n  });\n}\nfunction drawPathFindTargets(world: World) {\n  const old = Ctx2D.ctx.fillStyle;\n  Ctx2D.ctx.fillStyle = \"red\";\n  world.query({ and: [PathFinder] }).forEach((e) => {\n    const pf = world.getComponent(e, PathFinder);\n    Ctx2D.ctx.fillRect(pf.targetX - 0.5, pf.targetY - 0.5, 1, 1);\n  });\n  Ctx2D.ctx.fillStyle = old;\n}\nfunction handleCamera(world: World) {\n  const camEntity = world\n    .query({ and: [Camera, Transform] })\n    .find((e) => world.getComponent(e, Camera).isActive);\n  if (!camEntity) return;\n  Ctx2D.ctx.resetTransform();\n  const c = world.getComponent(camEntity, Camera);\n  const p = world.getComponent(camEntity, Transform);\n  if (c.targetEntity != -1 && world.hasComponent(c.targetEntity, Transform)) {\n    const targetPos = world.getComponent(c.targetEntity, Transform);\n    Object.assign(p, targetPos);\n  }\n  const sin = Math.sin(c.tilt) * c.zoom;\n  const cos = Math.cos(c.tilt) * c.zoom;\n  Ctx2D.ctx.transform(\n    cos,\n    sin,\n    -sin,\n    cos,\n    cos * -p.x - sin * -p.y + Ctx2D.ctx.canvas.width * 0.5,\n    sin * -p.x + cos * -p.y + Ctx2D.ctx.canvas.height * 0.5,\n  );\n}\nfunction move(world: World) {\n  const dt = Time.dtMilli / 1000;\n  world.query({ and: [Transform, Velocity] }).forEach((e) => {\n    const p = world.getComponent(e, Transform);\n    const v = world.getComponent(e, Velocity);\n    p.x += v.x * dt;\n    p.y += v.y * dt;\n  });\n}\nfunction drawImg(world: World) {\n  world.query({ and: [Graphic, Transform] }).forEach((e) => {\n    const g = world.getComponent(e, Graphic);\n    const p = world.getComponent(e, Transform);\n    const r = world.hasComponent(e, Rect) && world.getComponent(e, Rect);\n    const img = new Image();\n    img.src = g.src;\n    const imgWidth = r ? r.width : img.width;\n    const imgHeight = r ? r.height : img.height;\n    const scaleX = imgWidth / img.width;\n    const scaleY = imgHeight / img.height;\n    Ctx2D.ctx.transform(scaleX, 0, 0, scaleY, 0, 0);\n    Ctx2D.ctx.drawImage(\n      img,\n      (p.x - imgWidth / 2) / scaleX,\n      (p.y - imgHeight / 2) / scaleY,\n    );\n    Ctx2D.ctx.transform(1 / scaleX, 0, 0, 1 / scaleY, 0, 0);\n  });\n}\nfunction handleButtons(world: World) {\n  const pressPos = pointerToScreen(Pointer.pressPos, Ctx2D.canvas);\n  const releasePos = pointerToScreen(Pointer.releasePos, Ctx2D.canvas);\n  const pointerPos = pointerToScreen(\n    { x: Pointer.x, y: Pointer.y },\n    Ctx2D.canvas,\n  );\n  world.query({ and: [Button, Transform, Rect, Callback] }).forEach((e) => {\n    const p = world.getComponent(e, Transform);\n    const b = world.getComponent(e, Button);\n    const r = world.getComponent(e, Rect);\n    const cb = world.getComponent(e, Callback);\n    const pressedWithinButton =\n      (pressPos.x - p.x) ** 2 < (r.width / 2) ** 2 &&\n      (pressPos.y - p.y) ** 2 < (r.height / 2) ** 2;\n    b.hovered =\n      (pointerPos.x - p.x) ** 2 < (r.width / 2) ** 2 &&\n      (pointerPos.y - p.y) ** 2 < (r.height / 2) ** 2;\n    b.pressed = b.hovered && Pointer.isDown && pressedWithinButton;\n    b.clicked =\n      Pointer.justReleased &&\n      pressedWithinButton &&\n      (releasePos.x - p.x) ** 2 < (r.width / 2) ** 2 &&\n      (releasePos.y - p.y) ** 2 < (r.height / 2) ** 2;\n    b.hovered && (canPlayerMove = false);\n    cb.callback(e);\n  });\n}\nfunction drawHealthBars(world: World) {\n  world.query({ and: [OnScreen, Health, Transform, Rect] }).forEach((e) => {\n    const t = world.getComponent(e, Transform);\n    const r = world.getComponent(e, Rect);\n    const h = world.getComponent(e, Health);\n    const cos = Math.cos(t.rad);\n    const sin = Math.sin(t.rad);\n    const oldStroke = Ctx2D.ctx.strokeStyle;\n    const oldFill = Ctx2D.ctx.fillStyle;\n    const oldLineWidth = Ctx2D.ctx.lineWidth;\n    Ctx2D.ctx.fillStyle = \"black\";\n    const width = r.width * 1.5;\n    const x = -width / 2;\n    const y = r.offsetY * t.scaleY - 1;\n    Ctx2D.ctx.fillRect(\n      t.x + cos * x - sin * y,\n      t.y + sin * x + cos * y,\n      width,\n      0.3,\n    );\n    Ctx2D.ctx.fillStyle = \"green\";\n    Ctx2D.ctx.fillRect(\n      t.x + cos * x - sin * y,\n      t.y + sin * x + cos * y,\n      width * (h.current / h.max),\n      0.3,\n    );\n    Ctx2D.ctx.strokeStyle = \"black\";\n    Ctx2D.ctx.lineWidth = 0.1;\n    Ctx2D.ctx.strokeRect(\n      t.x + cos * x - sin * y,\n      t.y + sin * x + cos * y,\n      width,\n      0.3,\n    );\n    Ctx2D.ctx.strokeStyle = oldStroke;\n    Ctx2D.ctx.fillStyle = oldFill;\n    Ctx2D.ctx.lineWidth = oldLineWidth;\n  });\n}\n\n// entities\nfunction addGraphic(world: World, src: string, x = 0, y = 0, w = 1, h = 1) {\n  const e = world.addEntity();\n  world.addComponent(e, Transform, { x, y });\n  world.addComponent(e, Graphic, { src });\n  world.addComponent(e, Rect, { width: w, height: h });\n  return e;\n}\nfunction addRect(\n  world: World,\n  x = 0,\n  y = 0,\n  w = 1,\n  h = 1,\n  offsetX = -w / 2,\n  offsetY = -h / 2,\n) {\n  const e = world.addEntity();\n  world.addComponent(e, Transform, { x, y });\n  world.addComponent(e, Rect, { width: w, height: h, offsetX, offsetY });\n  world.addComponent(e, Colour);\n  world.addComponent(e, OnScreen);\n  return e;\n}\nfunction addButton(\n  world: World,\n  x = 0,\n  y = 0,\n  w = 10,\n  h = 10,\n  cb = (_: entityT) => {},\n) {\n  const e = addRect(world, x, y, w, h);\n  world.addComponent(e, Button);\n  world.addComponent(e, Colour);\n  world.addComponent(e, Callback, { callback: cb });\n  return e;\n}\nfunction addTimerWithCallback(world: World, cb: (e: entityT) => void) {\n  const e = world.addEntity();\n  world.addComponent(e, Timer);\n  world.addComponent(e, Callback).callback = cb;\n  return e;\n}\nfunction addPlayer(world: World, x = 0, y = 0) {\n  const player = addRect(world, x, y, 1, 1);\n  world.addComponent(player, Velocity);\n  world.addComponent(player, Stats, {\n    ...config.entities.player,\n  });\n  world.addComponent(player, Health, {\n    max: config.entities.player.healthPoint,\n    current: config.entities.player.healthPoint,\n  });\n  world.addComponent(player, PlayerControl);\n  world.addComponent(player, PathFinder, { targetX: x, targetY: y });\n  return player;\n}\nfunction addTurrent(world: World, x: number, y: number) {\n  const turrent = addRect(world, x, y, 3, 10, -1.5, -10);\n  world.addComponent(turrent, Stats, { ...config.entities.turrent });\n  world.addComponent(turrent, Health, {\n    max: config.entities.turrent.healthPoint,\n    current: config.entities.turrent.healthPoint,\n  });\n  return turrent;\n}\nfunction addCamera(world: World, x: number, y: number) {\n  const cam = world.addEntity();\n  world.addComponent(cam, Camera, { zoom: 30 });\n  world.addComponent(cam, Transform, { x, y });\n  return cam;\n}\n\n//utils\nfunction drawBg(color: string = \"#424242\") {\n  const old = Ctx2D.ctx.fillStyle;\n  Ctx2D.ctx.fillStyle = color;\n  Ctx2D.ctx.fillRect(0, 0, Ctx2D.canvas.width, Ctx2D.canvas.height);\n  Ctx2D.ctx.fillStyle = old;\n}\nfunction rectsOverlap(\n  cx1: number,\n  cy1: number,\n  w1: number,\n  h1: number,\n  cx2: number,\n  cy2: number,\n  w2: number,\n  h2: number,\n): boolean {\n  return (\n    (cx1 - cx2) ** 2 < ((w1 + w2) / 2) ** 2 &&\n    (cy1 - cy2) ** 2 < ((h1 + h2) / 2) ** 2\n  );\n}\ntype vec2 = { x: number; y: number };\nfunction screenToWorld(\n  pointerPos: vec2,\n  cameraPos: vec2,\n  cameraTilt: number,\n  cameraZoom: number,\n): vec2 {\n  const cos = Math.cos(cameraTilt);\n  const sin = Math.sin(cameraTilt);\n  const res = { x: 0, y: 0 };\n  const x = pointerPos.x - config.viewport.width / 2;\n  const y = pointerPos.y - config.viewport.height / 2;\n  res.x = cos * x + sin * y;\n  res.y = -sin * x + cos * y;\n  res.x /= cameraZoom;\n  res.y /= cameraZoom;\n  res.x += cameraPos.x;\n  res.y += cameraPos.y;\n  return res;\n}\nfunction worldToScreen(\n  pos: vec2,\n  cameraPos: vec2,\n  cameraTilt: number,\n  cameraZoom: number,\n): vec2 {\n  const c = Math.cos(cameraTilt);\n  const s = Math.sin(cameraTilt);\n  const res = { x: 0, y: 0 };\n  let x = pos.x - cameraPos.x;\n  let y = pos.y - cameraPos.y;\n  x *= cameraZoom;\n  y *= cameraZoom;\n  res.x = c * x - s * y;\n  res.y = s * x + c * y;\n  res.x += config.viewport.width * 0.5;\n  res.y += config.viewport.height * 0.5;\n  return res;\n}\n// credit: https://www.30secondsofcode.org/js/s/detect-device-type/\nfunction detectDeviceType(): string {\n  return /Mobile|Android|iPhone|iPad/i.test(navigator.userAgent)\n    ? \"Mobile\"\n    : \"Desktop\";\n}\nfunction pointerToScreen(pointer: vec2, canvas: HTMLCanvasElement): vec2 {\n  const out = { x: 0, y: 0 };\n  const rect = canvas.getBoundingClientRect();\n  out.x = pointer.x - rect.left;\n  out.y = pointer.y - rect.top;\n  if (innerWidth / innerHeight < canvas.width / canvas.height) {\n    out.x *= canvas.width / innerWidth;\n    out.y *= canvas.width / innerWidth;\n  } else {\n    out.x *= canvas.height / innerHeight;\n    out.y *= canvas.height / innerHeight;\n  }\n  return out;\n}\n\n// initialization\nCtx2D.canvas.width = config.viewport.width;\nCtx2D.canvas.height = config.viewport.height;\nCtx2D.canvas.style.imageRendering = \"pixelated\";\nCtx2D.ctx.lineWidth = 0.1;\n\nconst game = new World();\n\nconst turrent = addTurrent(game, 10, 0);\ngame.addComponent(turrent, ParticleEmitter, {\n  particleEntity: turrent,\n  speed: 20,\n  spreadRadians: Math.PI * 0.25,\n});\ngame.addComponent(turrent, Timer);\ngame.addComponent(turrent, Callback).callback = (e: entityT) => {\n  const t = game.getComponent(e, Timer);\n  if (t.timeMilli < 50) return;\n  t.reset = true;\n  game.getComponent(e, ParticleEmitter).emit = true;\n};\n\nfor (let i = 0; i < 2; i++) {\n  game.getComponent(game.copyEntity(turrent), Transform).y += 15 * (i + 1);\n}\n\nconst player = addPlayer(game, 0, 0);\ngame.getComponent(player, Health).current *= 0.6;\n\nconst map = addGraphic(game, \"./assets/Map_of_MOBA.svg\", 0, 0, 300, 300);\n\nconst cam = addCamera(game, 0, 0);\nconst camComponent = game.getComponent(cam, Camera);\ncamComponent.targetEntity = player;\ncamComponent.isActive = true;\ncamComponent.zoom = 15;\n\nconst inGameUi = new World();\n\naddButton(\n  inGameUi,\n  config.viewport.width * 0.9,\n  config.viewport.height * 0.8,\n  config.viewport.height * 0.3,\n  config.viewport.height * 0.3,\n  (e) => {\n    const b = inGameUi.getComponent(e, Button);\n    b.clicked && console.log(\"clicked\");\n    b.hovered && console.log(\"hovered\");\n  },\n);\n\nconst debugTextEntity = inGameUi.addEntity();\nconst debugText = inGameUi.addComponent(debugTextEntity, Text, {\n  content: \"test string\",\n  backgroundColor: \"white\",\n});\ninGameUi.addComponent(debugTextEntity, Transform);\n\n(function update() {\n  requestAnimationFrame(update);\n\n  debugText.content = `FPS: ${Math.ceil(1000 / Time.dtMilli)}\\nEntity count: ${game.entityCount()}\\nDevice type: ${detectDeviceType()}`;\n\n  // drawing\n  drawBg();\n  game.update(\n    handleCamera,\n    checkOnScreenEntities,\n    drawImg,\n    drawRects,\n    //drawPathFindTargets,\n    drawHealthBars,\n  );\n  Ctx2D.ctx.resetTransform();\n  inGameUi.update(drawImg, drawRects, drawTexts);\n\n  // processing\n  inGameUi.update(handleButtons);\n  game.update(\n    handleTimers,\n    handlePathfind,\n    handleInput,\n    handleParticleEmitters,\n    move,\n  );\n\n  updatePointer(Pointer);\n  updateKeyboard(Keys);\n  updateTime(Time);\n  canPlayerMove = true;\n})();\n"],
  "mappings": "MAAO,IAAMA,EAAN,KAAM,CACH,QAAe,CAAA,EACf,WAA6B,IAAI,IACjC,WAAuB,CAAA,EACvB,cACA,KAAO,EAEf,YAAYC,EAAwB,CAClC,KAAK,cAAgBA,CACvB,CAEA,KAAM,CACJ,OAAO,KAAK,IACd,CAEA,IAAIC,EAAW,CACb,IAAMC,EAAQ,KAAK,WAAW,IAAID,CAAA,EAClC,OAAIC,GAAS,KAAkB,KAAK,QAAQA,CAAA,GACxC,KAAK,MAAQ,KAAK,QAAQ,QAC5B,KAAK,QAAQ,KAAK,KAAK,cAAa,CAAA,EACtC,KAAK,WAAW,IAAID,EAAK,KAAK,IAAI,EAClC,KAAK,WAAW,KAAK,IAAI,EAAIA,EAC7B,KAAK,OACE,KAAK,QAAQ,KAAK,KAAO,CAAA,EAClC,CAEA,OAAOA,EAAiB,CACtB,IAAMC,EAAQ,KAAK,WAAW,IAAID,CAAA,GAAQ,GACpCE,EAAU,KAAK,WAAW,KAAK,KAAO,CAAA,EAC5C,GAAID,EAAQ,GAAKA,GAAS,KAAK,MAAQ,CAACC,EAAS,MAAO,GACxD,IAAMC,EAAU,KAAK,QAAQF,CAAA,EAE7B,YAAK,QAAQA,CAAA,EAAS,KAAK,QAAQ,KAAK,KAAO,CAAA,EAC/C,KAAK,QAAQ,KAAK,KAAO,CAAA,EAAKE,EAE9B,KAAK,WAAW,IAAID,EAASD,CAAA,EAC7B,KAAK,WAAW,OAAOD,CAAA,EACvB,KAAK,WAAWC,CAAA,EAASC,EACzB,KAAK,OACE,EACT,CAEA,IAAIF,EAAW,CACb,IAAMC,EAAQ,KAAK,WAAW,IAAID,CAAA,GAAQ,GAC1C,GAAIC,EAAQ,GAAKA,GAAS,KAAK,KAAM,MAAM,IAAI,MAAM,qBAAA,EACrD,OAAO,KAAK,QAAQA,CAAA,CACtB,CAEA,IAAID,EAAiB,CACnB,OAAO,KAAK,WAAW,IAAIA,CAAA,CAC7B,CAEA,OAAQ,CACN,KAAK,QAAQ,OAAO,KAAK,IAAI,EAC7B,KAAK,WAAW,OAAO,KAAK,IAAI,EAChC,QAAWA,KAAO,KAAK,WAAW,KAAI,EAAI,CACxC,IAAMC,EAAQ,KAAK,WAAW,IAAID,CAAA,GAAQ,IACzCC,EAAQ,GAAKA,GAAS,KAAK,OAAS,KAAK,WAAW,OAAOD,CAAA,CAC9D,CACF,CACF,ECzDO,IAAMI,EAAN,KAAM,CACH,MAA8B,IAAI,IAClC,MAA6B,IAAI,IAEzC,SAA2BC,EAAc,CACnC,KAAK,MAAM,IAAIA,CAAA,IACnB,KAAK,MAAM,IAAIA,EAAW,KAAK,MAAM,IAAI,EACzC,KAAK,MAAM,IACTA,EACA,IAAIC,EAA0B,KAAO,CAAE,GAAGD,CAAU,EAAC,CAAA,EAEzD,CAEA,MAAwBA,EAAsB,CAC5C,OAAO,KAAK,MAAM,IAAIA,CAAA,GAAc,EACtC,CAEA,IAAsBE,EAAiBF,EAAiB,CACtD,OAAO,OAAO,OACX,KAAK,MAAM,IAAIA,CAAA,EAAyC,IAAIE,CAAA,EAC7DF,CAAA,CAEJ,CAEA,OAAyBE,EAAiBF,EAAuB,CAC/D,OAAQ,KAAK,MAAM,IAAIA,CAAA,EAAyC,OAC9DE,CAAA,CAEJ,CAEA,IAAsBA,EAAiBF,EAAiB,CACtD,OAAQ,KAAK,MAAM,IAAIA,CAAA,EAAyC,IAAIE,CAAA,CACtE,CAEA,IAAsBF,EAAsB,CAC1C,OAAQ,KAAK,MAAM,IAAIA,CAAA,EAAyC,IAAG,CACrE,CAEA,OAAOE,EAAiB,CACtB,QAAWC,KAAK,KAAK,MAAM,OAAM,EAClBA,EACR,OAAOD,CAAA,CAEhB,CAEA,KAAKE,EAAoBC,EAAqB,CAC5C,QAAWF,KAAK,KAAK,MAAM,OAAM,EAAI,CACnC,IAAMG,EAAOH,EACbG,EAAK,IAAIF,CAAA,GACP,OAAO,OAAOE,EAAK,IAAID,CAAA,EAAaC,EAAK,IAAIF,CAAA,CAAA,CACjD,CACF,CAEA,OAAQ,CACN,QAAWD,KAAK,KAAK,MAAM,OAAM,EAClBA,EACR,MAAK,CAEd,CACF,EC7DO,SAASI,GAAA,CACd,OAAO,KAAK,OAAM,CACpB,CCEO,IAAMC,EAAN,KAAM,CACH,QAA+B,IAAI,IACnC,aAA0C,IAAI,IAC9C,iBAA8B,CAAA,EAC9B,YAAc,IAAIC,EAClB,WAAa,EACrB,eAAiB,EAEjB,YAAYC,EAAiB,EAAG,CAC9B,KAAK,eAAiBA,CACxB,CAEA,UAAUC,EAAkBC,EAAA,EAAsB,CAChD,YAAK,QAAQ,IAAID,EAAQ,CAAA,EACzB,KAAK,aAAa,CAAA,EAAG,IAAIA,CAAA,EAClBA,CACT,CAEA,WAAWE,EAAcC,EAAgBF,EAAA,EAAsB,CAC7D,KAAK,YAAY,KAAKC,EAAKC,CAAA,EAC3B,IAAMC,EAAO,KAAK,QAAQ,IAAIF,CAAA,GAAQ,EACtC,YAAK,QAAQ,IAAIC,EAAMC,CAAA,EACvB,KAAK,aAAaA,CAAA,EAAM,IAAID,CAAA,EACrBA,CACT,CAEQ,aAAaC,EAA4B,CAC/C,IAAMC,EAAI,KAAK,aAAa,IAAID,CAAA,GAAS,IAAI,IAC7C,YAAK,aAAa,IAAIA,EAAMC,CAAA,EACrBA,CACT,CAEA,aAAaL,EAAiB,CAC5B,KAAK,iBAAiB,KAAKA,CAAA,CAC7B,CAEA,kBAAoCM,EAAqB,CACvD,YAAK,YAAY,SAASA,CAAA,EACnB,IACT,CAEA,aAA+BN,EAAiBM,EAAuB,CACrE,QACI,KAAK,QAAQ,IAAIN,CAAA,GAAW,GAC3B,GAAK,KAAK,YAAY,MAAMM,CAAA,GAC/B,CAEJ,CAEA,aACEN,EACAM,EACAC,EAAqBD,EAClB,CACH,KAAK,kBAAkBA,CAAA,EACvB,IAAIF,EAAO,KAAK,QAAQ,IAAIJ,CAAA,GAAW,EACjCQ,EAAS,KAAK,YAAY,MAAMF,CAAA,EACtC,OAAKF,EAAQ,GAAKI,IAAY,EACrB,OAAO,OAAO,KAAK,YAAY,IAAIR,EAAQM,CAAA,EAAYC,CAAA,GAEhE,KAAK,aAAaH,CAAA,EAAM,OAAOJ,CAAA,EAC/BI,GAAQ,GAAKI,EACb,KAAK,QAAQ,IAAIR,EAAQI,CAAA,EACzB,KAAK,aAAaA,CAAA,EAAM,IAAIJ,CAAA,EACrB,OAAO,OAAO,KAAK,YAAY,IAAIA,EAAQM,CAAA,EAAYC,CAAA,EAChE,CAEA,gBAAkCP,EAAiBM,EAAuB,CACxE,KAAK,kBAAkBA,CAAA,EACvB,IAAIF,EAAO,KAAK,QAAQ,IAAIJ,CAAA,GAAW,EACjCQ,EAAS,KAAK,YAAY,MAAMF,CAAA,EACtC,OAAKF,EAAQ,GAAKI,IAAY,EAAU,IACxC,KAAK,aAAaJ,CAAA,EAAM,OAAOJ,CAAA,EAC/BI,GAAQ,EAAE,GAAKI,GACf,KAAK,QAAQ,IAAIR,EAAQI,CAAA,EACzB,KAAK,aAAaA,CAAA,EAAM,IAAIJ,CAAA,EACrB,KAAK,YAAY,OAAOA,EAAQM,CAAA,EACzC,CAEA,aAA+BN,EAAiBM,EAAiB,CAC/D,OAAO,KAAK,YAAY,IAAIN,EAAQM,CAAA,CACtC,CAEA,UAAUG,EAAiC,CACzC,QAASC,EAAI,EAAGC,EAAIF,EAAI,OAAQC,EAAIC,EAAGD,IAAKD,EAAIC,CAAA,EAAG,IAAI,EACvD,KAAK,qBAAoB,EACzB,KAAK,YAAc,KAAK,eAAiB,GAAK,KAAO,GACnD,KAAK,iBAAgB,EACvB,KAAK,YACP,CAEA,sBAAuB,CACrB,KAAO,KAAK,iBAAiB,QAAQ,CACnC,IAAMV,EAAS,KAAK,iBAAiB,IAAG,EACxC,KAAK,YAAY,OAAOA,CAAA,EACxB,IAAMI,EAAO,KAAK,QAAQ,IAAIJ,CAAA,GAAW,EACzC,KAAK,QAAQ,OAAOA,CAAA,EACpB,KAAK,aAAaI,CAAA,EAAM,OAAOJ,CAAA,CACjC,CACF,CAEA,kBAAmB,CACjB,KAAK,YAAY,MAAK,CACxB,CAEA,MAAMY,EAA0B,CAC9B,IAAIC,EAAU,EACZC,EAAU,EACZ,GAAIF,EAAM,IACR,QAASF,EAAI,EAAGC,EAAIC,EAAM,IAAI,OAAQF,EAAIC,EAAGD,IAC3CG,GAAW,GAAK,KAAK,YAAY,MAAMD,EAAM,IAAIF,CAAA,CAAE,EAGvD,GAAIE,EAAM,IACR,QAASF,EAAI,EAAGC,EAAIC,EAAM,IAAI,OAAQF,EAAIC,EAAGD,IAC3CI,GAAW,GAAK,KAAK,YAAY,MAAMF,EAAM,IAAIF,CAAA,CAAE,EAGvD,IAAMK,EAAiB,CAAA,EACvB,YAAK,aAAa,QAAQ,CAACC,EAAIC,IAAA,CAC7B,IAAMC,EAAM,KAAK,aAAaD,CAAA,EAC9BC,EAAI,KAAO,IACRD,EAAIJ,IAAYA,IAChBI,EAAIH,IAAY,GACjBC,EAAI,KAAI,GAAIG,CAAA,CAChB,CAAA,EACO,IAAI,IAAI,IAAIH,CAAA,EACrB,CAEA,aAAsB,CACpB,OAAO,KAAK,QAAQ,IACtB,CACF,ECzIA,IAAAI,EAAA,CACE,SAAY,CACV,MAAS,IACT,OAAU,GACZ,EACA,SAAY,CACV,OAAU,CACR,YAAe,GACf,UAAa,EACf,EACA,OAAU,CACR,YAAe,GACf,UAAa,CACf,EACA,QAAW,CACT,YAAe,IACf,aAAgB,GAClB,CACF,CACF,ECDA,IAAMC,EAAQ,CACZ,YAAa,EACb,aAAc,EACd,aAAc,EACd,UAAW,EACX,YAAa,CACf,EACMC,EAAS,CAAE,QAAS,EAAG,IAAK,CAAE,EAC9BC,EAAW,CAAE,SAAU,IAAI,QAAW,EACtCC,EAAY,CAAE,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,OAAQ,EAAG,OAAQ,CAAE,EACvDC,EAAW,CAAE,EAAG,EAAG,EAAG,CAAE,EACxBC,EAAgB,CAAC,EAEvB,IAAMC,EAAW,CAAC,EACZC,EAAkB,CACtB,cAAe,EACf,eAAgB,GAChB,wBAAyB,EACzB,MAAO,EACP,KAAM,GACN,mBAAoB,SAClBC,EACAC,EACAC,EAA0B,CAE1B,IAAMC,EAAIH,EAAM,aAAaC,EAAgBG,CAAA,EAC7CD,EAAE,OAASA,EAAE,OAAS,EAAED,GAAsB,GAAK,CACrD,CACF,EACMG,EAAS,CAAE,KAAM,GAAI,KAAM,EAAG,SAAU,GAAO,aAAc,EAAG,EAChEC,EAAO,CAAE,MAAO,EAAG,OAAQ,EAAG,QAAS,GAAK,QAAS,EAAI,EACzDC,EAAU,CAAE,IAAK,EAAG,EACpBC,EAAS,CAAE,QAAS,GAAO,QAAS,GAAO,QAAS,EAAM,EAC1DC,EAAS,CAAE,KAAM,QAAS,OAAQ,OAAQ,EAC1CC,EAAO,CACX,QAAS,GACT,SAAU,GACV,QAAS,EACT,MAAO,QACP,gBAAiB,OACnB,EACMC,EAAQ,CAAE,UAAW,EAAG,MAAO,GAAO,KAAM,EAAM,EAClDC,EAAa,CAAE,QAAS,EAAG,QAAS,CAAE,EAGtCC,EAAQC,EAAA,EACRC,EAAUC,EAAA,EACVC,EAAOC,EAAA,EACPC,EAAOC,GAAA,EACTC,EAAgB,GAEpB,SAASP,GAAA,CAIP,IAAMQ,EACJ,SAAS,cAAc,QAAA,GAAa,SAAS,cAAc,QAAA,EAC7D,GAAI,CAACA,EAAQ,MAAM,IAAI,MAAM,+BAAA,EAC7B,IAAMC,EAAMD,EAAO,WAAW,IAAA,EAC9B,GAAI,CAACC,EAAK,MAAM,IAAI,MAAM,+BAAA,EAE1B,gBAAS,KAAK,YAAYD,CAAA,EAE1B,WAAW,SAAW,WAAW,OAAS,IAAA,CACpC,WAAa,YAAcA,EAAO,MAAQA,EAAO,QACnDA,EAAO,MAAM,MAAQ,OACrBA,EAAO,MAAM,OAAS,KAEtBA,EAAO,MAAM,MAAQ,GACrBA,EAAO,MAAM,OAAS,OAE1B,EAEO,CAAE,OAAAA,EAAQ,IAAAC,CAAI,CACvB,CACA,SAASL,GAAA,CAIP,IAAMM,EAAyC,CAC7C,OAAQ,CAAC,EACT,YAAa,CAAC,EACd,aAAc,CAAC,CACjB,EAEA,kBAAW,UAAaC,GAAA,CACtB,CAACD,EAAK,OAAOC,EAAE,GAAG,IAAMD,EAAK,YAAYC,EAAE,GAAG,EAAI,IAClDD,EAAK,OAAOC,EAAE,GAAG,EAAI,EACvB,EACA,WAAW,QAAWA,GAAA,CACpBD,EAAK,OAAOC,EAAE,GAAG,EAAI,GACrBD,EAAK,aAAaC,EAAE,GAAG,EAAI,EAC7B,EAEOD,CACT,CACA,SAASE,EACPF,EAGC,CAED,QAAWG,KAAOH,EAAK,YAAaA,EAAK,YAAYG,CAAA,EAAO,GAC5D,QAAWA,KAAOH,EAAK,aAAcA,EAAK,aAAaG,CAAA,EAAO,EAChE,CACA,SAASX,GAAA,CACP,IAAMY,EAAU,CACd,EAAG,EACH,EAAG,EACH,OAAQ,GACR,YAAa,GACb,aAAc,GACd,SAAU,CAAE,EAAG,EAAG,EAAG,CAAE,EACvB,WAAY,CAAE,EAAG,EAAG,EAAG,CAAE,CAC3B,EAEA,kBAAW,cAAiBH,GAAA,CACpBA,EAAE,kBAAkB,oBACxBG,EAAQ,EAAIH,EAAE,EAAKG,EAAQ,EAAIH,EAAE,EACnC,OAAO,OAAOG,EAAQ,SAAUA,CAAA,EAChCA,EAAQ,OAASA,EAAQ,YAAc,GACzC,EAEA,WAAW,YAAeH,GAAA,CACtBG,EAAQ,EAAIH,EAAE,EAAKG,EAAQ,EAAIH,EAAE,EACnC,OAAO,OAAOG,EAAQ,WAAYA,CAAA,EAChCA,EAAQ,OAAS,GAASA,EAAQ,aAAe,EACrD,EAEA,WAAW,cAAiBH,GAAA,CACxBG,EAAQ,EAAIH,EAAE,EAAKG,EAAQ,EAAIH,EAAE,CACrC,EAEOG,CACT,CACA,SAASC,GACPD,EAAmE,CAEnEA,EAAQ,YAAc,GACtBA,EAAQ,aAAe,EACzB,CACA,SAASR,IAAA,CACP,MAAO,CAAE,QAAS,EAAG,UAAW,CAAE,CACpC,CACA,SAASU,GAAWC,EAA4C,CAC9DA,EAAK,QAAU,YAAY,IAAG,EAAKA,EAAK,UACxCA,EAAK,WAAaA,EAAK,OACzB,CAGA,SAASC,GAAsBhC,EAAY,CACzC,IAAMiC,EAAYjC,EACf,MAAM,CAAE,IAAK,CAACK,EAAQD,EAAW,CAAA,EACjC,KAAMqB,GAAMzB,EAAM,aAAayB,EAAGpB,CAAA,EAAQ,QAAQ,EACrD,GAAI,CAAC4B,EAAW,OAChB,IAAMC,EAAMlC,EAAM,aAAaiC,EAAW5B,CAAA,EACpC8B,EAAenC,EAAM,aAAaiC,EAAW7B,CAAA,EACnDJ,EAAM,MAAM,CAAE,IAAK,CAACM,EAAMF,EAAW,CAAA,EAAG,QAASqB,GAAA,CAC/CzB,EAAM,gBAAgByB,EAAG3B,CAAA,EACzB,IAAMsC,EAAIpC,EAAM,aAAayB,EAAGnB,CAAA,EAC1BH,EAAIH,EAAM,aAAayB,EAAGrB,CAAA,EAChCiC,GACEF,EAAa,EACbA,EAAa,EACbtB,EAAM,OAAO,MAAQqB,EAAI,KACzBrB,EAAM,OAAO,OAASqB,EAAI,KAC1B/B,EAAE,EAAIiC,EAAE,QAAUA,EAAE,MAAQ,EAC5BjC,EAAE,EAAIiC,EAAE,QAAUA,EAAE,OAAS,EAC7BA,EAAE,MACFA,EAAE,MAAM,GACLpC,EAAM,aAAayB,EAAG3B,CAAA,CAC7B,CAAA,CACF,CAYA,SAASwC,GAAuBC,EAAY,CAC1CA,EAAM,MAAM,CAAE,IAAK,CAACC,EAAiBC,EAAW,CAAA,EAAG,QAASC,GAAA,CAC1D,IAAMC,EAAUJ,EAAM,aAAaG,EAAGF,CAAA,EACtC,GAAI,CAACG,EAAQ,MAAQ,CAACJ,EAAM,aAAaI,EAAQ,eAAgBF,CAAA,EAC/D,OACFE,EAAQ,KAAO,GACf,IAAMC,EAAIL,EAAM,aAAaG,EAAGD,CAAA,EAC1BI,EAAWN,EAAM,WAAWI,EAAQ,cAAc,EAClDG,EAAoBP,EAAM,aAAaM,EAAUJ,CAAA,EACvD,OAAO,OAAOK,EAAmBF,CAAA,EACjC,IAAMG,EAAQR,EAAM,aAAaM,EAAUG,CAAA,EACrCC,EACJL,EAAE,KAAO,KAAK,OAAM,EAAK,EAAI,GAAKD,EAAQ,cAAgB,GAC5DG,EAAkB,IAAMG,EACxBV,EAAM,aAAaM,EAAUK,EAAU,CACrC,EAAG,KAAK,IAAID,CAAA,EAAUN,EAAQ,MAC9B,EAAG,KAAK,IAAIM,CAAA,EAAUN,EAAQ,KAChC,CAAA,EACAJ,EAAM,aAAaM,EAAUM,CAAA,EAAU,SAAW,IAAA,CAChD,GAAIJ,EAAM,UAAYJ,EAAQ,wBAA0B,IAAM,CAC5DA,EAAQ,mBACNJ,EACAM,EACAE,EAAM,UAAY,IAAOJ,EAAQ,uBAAuB,EAE1D,MACF,CACAJ,EAAM,aAAaM,CAAA,CACrB,CACF,CAAA,CACF,CACA,SAASO,GAAYb,EAAY,CAC/B,IAAMc,EAAYd,EACf,MAAM,CAAE,IAAK,CAACe,EAAQb,EAAW,CAAA,EACjC,KAAMC,GAAMH,EAAM,aAAaG,EAAGY,CAAA,EAAQ,QAAQ,EACrD,GAAID,GAAa,KAAW,OAC5B,IAAME,EAAShB,EAAM,aAAac,EAAWC,CAAA,EACvCE,EAAejB,EAAM,aAAac,EAAWZ,CAAA,EAC7CgB,EAAWC,EAAgBC,EAAQ,SAAUC,EAAM,MAAM,EAC/DrB,EAAM,MAAM,CAAE,IAAK,CAACsB,EAAYC,EAAe,CAAA,EAAG,QAASpB,GAAA,CACzD,GAAI,CAACiB,EAAQ,aAAe,CAACI,EAAe,OAC5C,IAAMC,EAAKzB,EAAM,aAAaG,EAAGmB,CAAA,EAC3BI,EAAWC,GACfT,EACAD,EACAD,EAAO,KACPA,EAAO,IAAI,EAEbS,EAAG,QAAUC,EAAS,EACtBD,EAAG,QAAUC,EAAS,CACxB,CAAA,CACF,CACA,SAASE,GAAe5B,EAAY,CAClCA,EACG,MAAM,CAAE,IAAK,CAACsB,EAAYpB,EAAWS,EAAUkB,EAAO,CAAA,EACtD,QAAS1B,GAAA,CACR,IAAMsB,EAAKzB,EAAM,aAAaG,EAAGmB,CAAA,EAC3BQ,EAAI9B,EAAM,aAAaG,EAAGD,CAAA,EAC1B6B,EAAI/B,EAAM,aAAaG,EAAGQ,CAAA,EAC1BqB,EAAIhC,EAAM,aAAaG,EAAG0B,CAAA,EAE1BI,EAAKR,EAAG,QAAUK,EAAE,EACpBI,EAAKT,EAAG,QAAUK,EAAE,EACpBK,GAAQF,EAAKA,EAAKC,EAAKA,IAAO,GACpC,GAAIC,GAAQ,EAAG,OACf,IAAMC,EAAoBJ,EAAE,UAAYK,EAAK,QAAW,IAAQ,EAC1DC,EACJH,EAAOC,EACHJ,EAAE,UACDA,EAAE,UAAYG,EAAQC,EAC7BL,EAAE,EAAKE,EAAKE,EAAQG,EACpBP,EAAE,EAAKG,EAAKC,EAAQG,CACtB,CAAA,CACJ,CACA,SAASC,GAAavC,EAAY,CAChCA,EACG,MAAM,CAAE,IAAK,CAACS,EAAOG,EAAU,CAAA,EAC/B,QAAST,GAAMH,EAAM,aAAaG,EAAGS,CAAA,EAAU,SAAST,CAAA,CAAA,EAC3DH,EAAM,MAAM,CAAE,IAAK,CAACS,EAAO,CAAA,EAAG,QAASN,GAAA,CACrC,IAAME,EAAIL,EAAM,aAAaG,EAAGM,CAAA,EAC5BJ,EAAE,QAAOA,EAAE,UAAY,GAC3BA,EAAE,MAAQ,GACLA,EAAE,OAAMA,EAAE,WAAagC,EAAK,QACnC,CAAA,CACF,CACA,SAASG,GAAUxC,EAAY,CAC7BA,EAAM,MAAM,CAAE,IAAK,CAACyC,EAAMvC,EAAW,CAAA,EAAG,QAASC,GAAA,CAC/C,IAAME,EAAIL,EAAM,aAAaG,EAAGsC,CAAA,EAC1BX,EAAI9B,EAAM,aAAaG,EAAGD,CAAA,EAChCmB,EAAM,IAAI,KAAO,GAAGhB,EAAE,QAAQ,WAC9B,IAAMqC,EAAMrB,EAAM,IAAI,UAChBsB,EAAQtC,EAAE,QAAQ,MAAM;CAAA,EAC9B,QAAS,EAAI,EAAGuC,EAAID,EAAM,OAAQ,EAAIC,EAAG,IAAK,CAC5C,IAAMC,EAAYxB,EAAM,IAAI,YAAYsB,EAAM,CAAA,CAAE,EAChDtB,EAAM,IAAI,UAAYhB,EAAE,gBACxBgB,EAAM,IAAI,SACRS,EAAE,EACFA,EAAE,EAAI,GAAK,EAAIzB,EAAE,SAAW,EAAIwC,EAAU,sBAC1CxC,EAAE,QAAU,EAAIwC,EAAU,MAC1BxC,EAAE,QAAU,EAAIwC,EAAU,qBAAqB,EAEjDxB,EAAM,IAAI,UAAYhB,EAAE,MACxBgB,EAAM,IAAI,SACRsB,EAAM,CAAA,EACNb,EAAE,EAAIzB,EAAE,QACRyB,EAAE,EAAI,GAAK,EAAIzB,EAAE,UAAY,EAAI,GAAKwC,EAAU,qBAAqB,CAEzE,CACAxB,EAAM,IAAI,UAAYqB,CACxB,CAAA,CACF,CACA,SAASI,EAAU9C,EAAY,CAC7BA,EAAM,MAAM,CAAE,IAAK,CAACE,EAAW6C,EAAMC,EAAQC,EAAU,CAAA,EAAG,QAAS9C,GAAA,CACjE,IAAM2B,EAAI9B,EAAM,aAAaG,EAAGD,CAAA,EAC1BgD,EAAIlD,EAAM,aAAaG,EAAG4C,CAAA,EAC1BI,EAAInD,EAAM,aAAaG,EAAG6C,CAAA,EAC1BI,EAAO/B,EAAM,IAAI,UACjBgC,EAAOhC,EAAM,IAAI,YACvBA,EAAM,IAAI,UAAY8B,EAAE,KACxB9B,EAAM,IAAI,YAAc8B,EAAE,OAC1B,IAAMG,EAAM,KAAK,IAAIxB,EAAE,GAAG,EACpByB,EAAM,KAAK,IAAIzB,EAAE,GAAG,EAC1BT,EAAM,IAAI,UAAUiC,EAAKC,EAAK,CAACA,EAAKD,EAAKxB,EAAE,EAAGA,EAAE,CAAC,EACjDT,EAAM,IAAI,SACR6B,EAAE,QAAUpB,EAAE,OACdoB,EAAE,QAAUpB,EAAE,OACdoB,EAAE,MAAQpB,EAAE,OACZoB,EAAE,OAASpB,EAAE,MAAM,EAErBT,EAAM,IAAI,WACR6B,EAAE,QAAUpB,EAAE,OACdoB,EAAE,QAAUpB,EAAE,OACdoB,EAAE,MAAQpB,EAAE,OACZoB,EAAE,OAASpB,EAAE,MAAM,EAErBT,EAAM,IAAI,UACRiC,EACA,CAACC,EACDA,EACAD,EACAA,EAAM,CAACxB,EAAE,EAAIyB,EAAM,CAACzB,EAAE,EACtB,CAACyB,EAAM,CAACzB,EAAE,EAAIwB,EAAM,CAACxB,EAAE,CAAC,EAE1BT,EAAM,IAAI,UAAY+B,EACtB/B,EAAM,IAAI,YAAcgC,CAC1B,CAAA,CACF,CAUA,SAASG,GAAaC,EAAY,CAChC,IAAMC,EAAYD,EACf,MAAM,CAAE,IAAK,CAACE,EAAQC,EAAW,CAAA,EACjC,KAAMC,GAAMJ,EAAM,aAAaI,EAAGF,CAAA,EAAQ,QAAQ,EACrD,GAAI,CAACD,EAAW,OAChBI,EAAM,IAAI,eAAc,EACxB,IAAMC,EAAIN,EAAM,aAAaC,EAAWC,CAAA,EAClCK,EAAIP,EAAM,aAAaC,EAAWE,CAAA,EACxC,GAAIG,EAAE,cAAgB,IAAMN,EAAM,aAAaM,EAAE,aAAcH,CAAA,EAAY,CACzE,IAAMK,EAAYR,EAAM,aAAaM,EAAE,aAAcH,CAAA,EACrD,OAAO,OAAOI,EAAGC,CAAA,CACnB,CACA,IAAMC,EAAM,KAAK,IAAIH,EAAE,IAAI,EAAIA,EAAE,KAC3BI,EAAM,KAAK,IAAIJ,EAAE,IAAI,EAAIA,EAAE,KACjCD,EAAM,IAAI,UACRK,EACAD,EACA,CAACA,EACDC,EACAA,EAAM,CAACH,EAAE,EAAIE,EAAM,CAACF,EAAE,EAAIF,EAAM,IAAI,OAAO,MAAQ,GACnDI,EAAM,CAACF,EAAE,EAAIG,EAAM,CAACH,EAAE,EAAIF,EAAM,IAAI,OAAO,OAAS,EAAA,CAExD,CACA,SAASM,GAAKX,EAAY,CACxB,IAAMY,EAAKC,EAAK,QAAU,IAC1Bb,EAAM,MAAM,CAAE,IAAK,CAACG,EAAWW,EAAU,CAAA,EAAG,QAASV,GAAA,CACnD,IAAMG,EAAIP,EAAM,aAAaI,EAAGD,CAAA,EAC1BY,EAAIf,EAAM,aAAaI,EAAGU,CAAA,EAChCP,EAAE,GAAKQ,EAAE,EAAIH,EACbL,EAAE,GAAKQ,EAAE,EAAIH,CACf,CAAA,CACF,CACA,SAASI,EAAQhB,EAAY,CAC3BA,EAAM,MAAM,CAAE,IAAK,CAACiB,EAASd,EAAW,CAAA,EAAG,QAASC,GAAA,CAClD,IAAMc,EAAIlB,EAAM,aAAaI,EAAGa,CAAA,EAC1BV,EAAIP,EAAM,aAAaI,EAAGD,CAAA,EAC1BgB,EAAInB,EAAM,aAAaI,EAAGgB,CAAA,GAASpB,EAAM,aAAaI,EAAGgB,CAAA,EACzDC,EAAM,IAAI,MAChBA,EAAI,IAAMH,EAAE,IACZ,IAAMI,EAAWH,EAAIA,EAAE,MAAQE,EAAI,MAC7BE,EAAYJ,EAAIA,EAAE,OAASE,EAAI,OAC/BG,EAASF,EAAWD,EAAI,MACxBI,EAASF,EAAYF,EAAI,OAC/BhB,EAAM,IAAI,UAAUmB,EAAQ,EAAG,EAAGC,EAAQ,EAAG,CAAA,EAC7CpB,EAAM,IAAI,UACRgB,GACCd,EAAE,EAAIe,EAAW,GAAKE,GACtBjB,EAAE,EAAIgB,EAAY,GAAKE,CAAA,EAE1BpB,EAAM,IAAI,UAAU,EAAImB,EAAQ,EAAG,EAAG,EAAIC,EAAQ,EAAG,CAAA,CACvD,CAAA,CACF,CACA,SAASC,GAAc1B,EAAY,CACjC,IAAM2B,EAAWC,EAAgBC,EAAQ,SAAUxB,EAAM,MAAM,EACzDyB,EAAaF,EAAgBC,EAAQ,WAAYxB,EAAM,MAAM,EAC7D0B,EAAaH,EACjB,CAAE,EAAGC,EAAQ,EAAG,EAAGA,EAAQ,CAAE,EAC7BxB,EAAM,MAAM,EAEdL,EAAM,MAAM,CAAE,IAAK,CAACgC,EAAQ7B,EAAWiB,EAAMa,EAAU,CAAA,EAAG,QAAS7B,GAAA,CACjE,IAAMG,EAAIP,EAAM,aAAaI,EAAGD,CAAA,EAC1B+B,EAAIlC,EAAM,aAAaI,EAAG4B,CAAA,EAC1B,EAAIhC,EAAM,aAAaI,EAAGgB,CAAA,EAC1Be,EAAKnC,EAAM,aAAaI,EAAG6B,CAAA,EAC3BG,GACHT,EAAS,EAAIpB,EAAE,IAAM,GAAK,EAAE,MAAQ,IAAM,IAC1CoB,EAAS,EAAIpB,EAAE,IAAM,GAAK,EAAE,OAAS,IAAM,EAC9C2B,EAAE,SACCH,EAAW,EAAIxB,EAAE,IAAM,GAAK,EAAE,MAAQ,IAAM,IAC5CwB,EAAW,EAAIxB,EAAE,IAAM,GAAK,EAAE,OAAS,IAAM,EAChD2B,EAAE,QAAUA,EAAE,SAAWL,EAAQ,QAAUO,EAC3CF,EAAE,QACAL,EAAQ,cACRO,IACCN,EAAW,EAAIvB,EAAE,IAAM,GAAK,EAAE,MAAQ,IAAM,IAC5CuB,EAAW,EAAIvB,EAAE,IAAM,GAAK,EAAE,OAAS,IAAM,EAChD2B,EAAE,UAAYG,EAAgB,IAC9BF,EAAG,SAAS/B,CAAA,CACd,CAAA,CACF,CACA,SAASkC,GAAetC,EAAY,CAClCA,EAAM,MAAM,CAAE,IAAK,CAACuC,EAAUC,EAAQrC,EAAWiB,EAAM,CAAA,EAAG,QAAShB,GAAA,CACjE,IAAMqC,EAAIzC,EAAM,aAAaI,EAAGD,CAAA,EAC1BgB,EAAInB,EAAM,aAAaI,EAAGgB,CAAA,EAC1BsB,EAAI1C,EAAM,aAAaI,EAAGoC,CAAA,EAC1B9B,EAAM,KAAK,IAAI+B,EAAE,GAAG,EACpBhC,EAAM,KAAK,IAAIgC,EAAE,GAAG,EACpBE,EAAYtC,EAAM,IAAI,YACtBuC,EAAUvC,EAAM,IAAI,UACpBwC,EAAexC,EAAM,IAAI,UAC/BA,EAAM,IAAI,UAAY,QACtB,IAAMyC,EAAQ3B,EAAE,MAAQ,IAClB4B,EAAI,CAACD,EAAQ,EACbE,EAAI7B,EAAE,QAAUsB,EAAE,OAAS,EACjCpC,EAAM,IAAI,SACRoC,EAAE,EAAI/B,EAAMqC,EAAItC,EAAMuC,EACtBP,EAAE,EAAIhC,EAAMsC,EAAIrC,EAAMsC,EACtBF,EACA,EAAA,EAEFzC,EAAM,IAAI,UAAY,QACtBA,EAAM,IAAI,SACRoC,EAAE,EAAI/B,EAAMqC,EAAItC,EAAMuC,EACtBP,EAAE,EAAIhC,EAAMsC,EAAIrC,EAAMsC,EACtBF,GAASJ,EAAE,QAAUA,EAAE,KACvB,EAAA,EAEFrC,EAAM,IAAI,YAAc,QACxBA,EAAM,IAAI,UAAY,GACtBA,EAAM,IAAI,WACRoC,EAAE,EAAI/B,EAAMqC,EAAItC,EAAMuC,EACtBP,EAAE,EAAIhC,EAAMsC,EAAIrC,EAAMsC,EACtBF,EACA,EAAA,EAEFzC,EAAM,IAAI,YAAcsC,EACxBtC,EAAM,IAAI,UAAYuC,EACtBvC,EAAM,IAAI,UAAYwC,CACxB,CAAA,CACF,CAGA,SAASI,GAAWjD,EAAckD,EAAaH,EAAI,EAAGC,EAAI,EAAGG,EAAI,EAAGT,EAAI,EAAC,CACvE,IAAMtC,EAAIJ,EAAM,UAAS,EACzB,OAAAA,EAAM,aAAaI,EAAGD,EAAW,CAAE,EAAA4C,EAAG,EAAAC,CAAE,CAAA,EACxChD,EAAM,aAAaI,EAAGa,EAAS,CAAE,IAAAiC,CAAI,CAAA,EACrClD,EAAM,aAAaI,EAAGgB,EAAM,CAAE,MAAO+B,EAAG,OAAQT,CAAE,CAAA,EAC3CtC,CACT,CACA,SAASgD,EACPpD,EACA+C,EAAI,EACJC,EAAI,EACJG,EAAI,EACJT,EAAI,EACJW,EAAU,CAACF,EAAI,EACfG,EAAU,CAACZ,EAAI,EAAC,CAEhB,IAAMtC,EAAIJ,EAAM,UAAS,EACzB,OAAAA,EAAM,aAAaI,EAAGD,EAAW,CAAE,EAAA4C,EAAG,EAAAC,CAAE,CAAA,EACxChD,EAAM,aAAaI,EAAGgB,EAAM,CAAE,MAAO+B,EAAG,OAAQT,EAAG,QAAAW,EAAS,QAAAC,CAAQ,CAAA,EACpEtD,EAAM,aAAaI,EAAGmD,CAAA,EACtBvD,EAAM,aAAaI,EAAGmC,CAAA,EACfnC,CACT,CACA,SAASoD,GACPxD,EACA+C,EAAI,EACJC,EAAI,EACJG,EAAI,GACJT,EAAI,GACJP,EAAMsB,GAAA,CAAgB,EAAC,CAEvB,IAAMrD,EAAIgD,EAAQpD,EAAO+C,EAAGC,EAAGG,EAAGT,CAAA,EAClC,OAAA1C,EAAM,aAAaI,EAAG4B,CAAA,EACtBhC,EAAM,aAAaI,EAAGmD,CAAA,EACtBvD,EAAM,aAAaI,EAAG6B,EAAU,CAAE,SAAUE,CAAG,CAAA,EACxC/B,CACT,CAOA,SAASsD,GAAUC,EAAcC,EAAI,EAAGC,EAAI,EAAC,CAC3C,IAAMC,EAASC,EAAQJ,EAAOC,EAAGC,EAAG,EAAG,CAAA,EACvC,OAAAF,EAAM,aAAaG,EAAQE,CAAA,EAC3BL,EAAM,aAAaG,EAAQG,EAAO,CAChC,GAAGC,EAAO,SAAS,MACrB,CAAA,EACAP,EAAM,aAAaG,EAAQK,EAAQ,CACjC,IAAKD,EAAO,SAAS,OAAO,YAC5B,QAASA,EAAO,SAAS,OAAO,WAClC,CAAA,EACAP,EAAM,aAAaG,EAAQM,CAAA,EAC3BT,EAAM,aAAaG,EAAQO,EAAY,CAAE,QAAST,EAAG,QAASC,CAAE,CAAA,EACzDC,CACT,CACA,SAASQ,GAAWX,EAAcC,EAAWC,EAAS,CACpD,IAAMU,EAAUR,EAAQJ,EAAOC,EAAGC,EAAG,EAAG,GAAI,KAAM,GAAC,EACnD,OAAAF,EAAM,aAAaY,EAASN,EAAO,CAAE,GAAGC,EAAO,SAAS,OAAQ,CAAA,EAChEP,EAAM,aAAaY,EAASJ,EAAQ,CAClC,IAAKD,EAAO,SAAS,QAAQ,YAC7B,QAASA,EAAO,SAAS,QAAQ,WACnC,CAAA,EACOK,CACT,CACA,SAASC,GAAUb,EAAcC,EAAWC,EAAS,CACnD,IAAMY,EAAMd,EAAM,UAAS,EAC3B,OAAAA,EAAM,aAAac,EAAKC,EAAQ,CAAE,KAAM,EAAG,CAAA,EAC3Cf,EAAM,aAAac,EAAKE,EAAW,CAAE,EAAAf,EAAG,EAAAC,CAAE,CAAA,EACnCY,CACT,CAGA,SAASG,GAAOC,EAAgB,UAAS,CACvC,IAAMC,EAAMC,EAAM,IAAI,UACtBA,EAAM,IAAI,UAAYF,EACtBE,EAAM,IAAI,SAAS,EAAG,EAAGA,EAAM,OAAO,MAAOA,EAAM,OAAO,MAAM,EAChEA,EAAM,IAAI,UAAYD,CACxB,CACA,SAASE,GACPC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAAU,CAEV,OACGP,EAAMI,IAAQ,IAAMF,EAAKI,GAAM,IAAM,IACrCL,EAAMI,IAAQ,IAAMF,EAAKI,GAAM,IAAM,CAE1C,CAEA,SAASC,GACPC,EACAC,EACAC,EACAC,EAAkB,CAElB,IAAMC,EAAM,KAAK,IAAIF,CAAA,EACfG,EAAM,KAAK,IAAIH,CAAA,EACfI,EAAM,CAAE,EAAG,EAAG,EAAG,CAAE,EACnBpC,EAAI8B,EAAW,EAAIxB,EAAO,SAAS,MAAQ,EAC3CL,EAAI6B,EAAW,EAAIxB,EAAO,SAAS,OAAS,EAClD,OAAA8B,EAAI,EAAIF,EAAMlC,EAAImC,EAAMlC,EACxBmC,EAAI,EAAI,CAACD,EAAMnC,EAAIkC,EAAMjC,EACzBmC,EAAI,GAAKH,EACTG,EAAI,GAAKH,EACTG,EAAI,GAAKL,EAAU,EACnBK,EAAI,GAAKL,EAAU,EACZK,CACT,CAqBA,SAASC,IAAA,CACP,MAAO,8BAA8B,KAAK,UAAU,SAAS,EACzD,SACA,SACN,CACA,SAASC,EAAgBC,EAAeC,EAAyB,CAC/D,IAAMC,EAAM,CAAE,EAAG,EAAG,EAAG,CAAE,EACnBC,EAAOF,EAAO,sBAAqB,EACzC,OAAAC,EAAI,EAAIF,EAAQ,EAAIG,EAAK,KACzBD,EAAI,EAAIF,EAAQ,EAAIG,EAAK,IACrB,WAAa,YAAcF,EAAO,MAAQA,EAAO,QACnDC,EAAI,GAAKD,EAAO,MAAQ,WACxBC,EAAI,GAAKD,EAAO,MAAQ,aAExBC,EAAI,GAAKD,EAAO,OAAS,YACzBC,EAAI,GAAKD,EAAO,OAAS,aAEpBC,CACT,CAGAE,EAAM,OAAO,MAAQC,EAAO,SAAS,MACrCD,EAAM,OAAO,OAASC,EAAO,SAAS,OACtCD,EAAM,OAAO,MAAM,eAAiB,YACpCA,EAAM,IAAI,UAAY,GAEtB,IAAME,EAAO,IAAIC,EAEXC,EAAUC,GAAWH,EAAM,GAAI,CAAA,EACrCA,EAAK,aAAaE,EAASE,EAAiB,CAC1C,eAAgBF,EAChB,MAAO,GACP,cAAe,KAAK,GAAK,GAC3B,CAAA,EACAF,EAAK,aAAaE,EAASG,CAAA,EAC3BL,EAAK,aAAaE,EAASI,CAAA,EAAU,SAAY,GAAA,CAC/C,IAAM,EAAIN,EAAK,aAAa,EAAGK,CAAA,EAC3B,EAAE,UAAY,KAClB,EAAE,MAAQ,GACVL,EAAK,aAAa,EAAGI,CAAA,EAAiB,KAAO,GAC/C,EAEA,QAASG,EAAI,EAAGA,EAAI,EAAGA,IACrBP,EAAK,aAAaA,EAAK,WAAWE,CAAA,EAAUM,CAAA,EAAW,GAAK,IAAMD,EAAI,GAGxE,IAAME,EAASC,GAAUV,EAAM,EAAG,CAAA,EAClCA,EAAK,aAAaS,EAAQE,CAAA,EAAQ,SAAW,GAE7C,IAAMC,GAAMC,GAAWb,EAAM,2BAA4B,EAAG,EAAG,IAAK,GAAA,EAE9Dc,GAAMC,GAAUf,EAAM,EAAG,CAAA,EACzBgB,EAAehB,EAAK,aAAac,GAAKG,CAAA,EAC5CD,EAAa,aAAeP,EAC5BO,EAAa,SAAW,GACxBA,EAAa,KAAO,GAEpB,IAAME,EAAW,IAAIjB,EAErBkB,GACED,EACAnB,EAAO,SAAS,MAAQ,GACxBA,EAAO,SAAS,OAAS,GACzBA,EAAO,SAAS,OAAS,GACzBA,EAAO,SAAS,OAAS,GACxB,GAAA,CACC,IAAMqB,EAAIF,EAAS,aAAa,EAAGG,CAAA,EACnCD,EAAE,SAAW,QAAQ,IAAI,SAAA,EACzBA,EAAE,SAAW,QAAQ,IAAI,SAAA,CAC3B,CAAA,EAGF,IAAME,EAAkBJ,EAAS,UAAS,EACpCK,GAAYL,EAAS,aAAaI,EAAiBE,EAAM,CAC7D,QAAS,cACT,gBAAiB,OACnB,CAAA,EACAN,EAAS,aAAaI,EAAiBd,CAAA,GAEtC,SAASiB,GAAA,CACR,sBAAsBA,CAAA,EAEtBF,GAAU,QAAU,QAAQ,KAAK,KAAK,IAAOG,EAAK,OAAO,CAAA;gBAAoB1B,EAAK,YAAW,CAAA;eAAoBR,GAAA,CAAA,GAGjHmC,GAAA,EACA3B,EAAK,OACH4B,GACAC,GACAC,EACAC,EAEAC,EAAA,EAEFlC,EAAM,IAAI,eAAc,EACxBoB,EAAS,OAAOY,EAASC,EAAWE,EAAA,EAGpCf,EAAS,OAAOgB,EAAA,EAChBlC,EAAK,OACHmC,GACAC,GACAC,GACAC,GACAC,EAAA,EAGFC,GAAcC,CAAA,EACdC,EAAeC,CAAA,EACfC,GAAWlB,CAAA,EACXmB,EAAgB,EAClB,GAAC",
  "names": ["ObjectPoolMap", "objectFactory", "key", "index", "backKey", "removed", "ComponentManager", "component", "ObjectPoolMap", "entity", "p", "srcEntity", "destEntity", "pool", "newEntity", "World", "ComponentManager", "cleanUpMinutes", "entity", "newEntity", "src", "dest", "mask", "a", "component", "values", "compId", "fns", "i", "l", "query", "andMask", "notMask", "res", "_v", "k", "set", "config_default", "Stats", "Health", "Callback", "Transform", "Velocity", "PlayerControl", "OnScreen", "ParticleEmitter", "world", "particleEntity", "percentageLifeTime", "t", "Transform", "Camera", "Rect", "Graphic", "Button", "Colour", "Text", "Timer", "PathFinder", "Ctx2D", "setUpCanvas2D", "Pointer", "setUpPointer", "Keys", "setUpKeyboard", "Time", "setUpTime", "canPlayerMove", "canvas", "ctx", "keys", "e", "updateKeyboard", "key", "pointer", "updatePointer", "updateTime", "time", "checkOnScreenEntities", "camEntity", "cam", "camTransform", "r", "rectsOverlap", "handleParticleEmitters", "world", "ParticleEmitter", "Transform", "e", "emitter", "t", "particle", "particleTransform", "timer", "Timer", "radian", "Velocity", "Callback", "handleInput", "camEntity", "Camera", "camera", "camTransform", "pressPos", "pointerToScreen", "Pointer", "Ctx2D", "PathFinder", "PlayerControl", "canPlayerMove", "pf", "worldPos", "screenToWorld", "handlePathfind", "Stats", "p", "v", "s", "dx", "dy", "dMag", "controlDistance", "Time", "adjustedSpeed", "handleTimers", "drawTexts", "Text", "old", "lines", "l", "txtMetric", "drawRects", "Rect", "Colour", "OnScreen", "r", "c", "oldF", "oldS", "cos", "sin", "handleCamera", "world", "camEntity", "Camera", "Transform", "e", "Ctx2D", "c", "p", "targetPos", "sin", "cos", "move", "dt", "Time", "Velocity", "v", "drawImg", "Graphic", "g", "r", "Rect", "img", "imgWidth", "imgHeight", "scaleX", "scaleY", "handleButtons", "pressPos", "pointerToScreen", "Pointer", "releasePos", "pointerPos", "Button", "Callback", "b", "cb", "pressedWithinButton", "canPlayerMove", "drawHealthBars", "OnScreen", "Health", "t", "h", "oldStroke", "oldFill", "oldLineWidth", "width", "x", "y", "addGraphic", "src", "w", "addRect", "offsetX", "offsetY", "Colour", "addButton", "_", "addPlayer", "world", "x", "y", "player", "addRect", "Velocity", "Stats", "config_default", "Health", "PlayerControl", "PathFinder", "addTurrent", "turrent", "addCamera", "cam", "Camera", "Transform", "drawBg", "color", "old", "Ctx2D", "rectsOverlap", "cx1", "cy1", "w1", "h1", "cx2", "cy2", "w2", "h2", "screenToWorld", "pointerPos", "cameraPos", "cameraTilt", "cameraZoom", "cos", "sin", "res", "detectDeviceType", "pointerToScreen", "pointer", "canvas", "out", "rect", "Ctx2D", "config_default", "game", "World", "turrent", "addTurrent", "ParticleEmitter", "Timer", "Callback", "i", "Transform", "player", "addPlayer", "Health", "map", "addGraphic", "cam", "addCamera", "camComponent", "Camera", "inGameUi", "addButton", "b", "Button", "debugTextEntity", "debugText", "Text", "update", "Time", "drawBg", "handleCamera", "checkOnScreenEntities", "drawImg", "drawRects", "drawHealthBars", "drawTexts", "handleButtons", "handleTimers", "handlePathfind", "handleInput", "handleParticleEmitters", "move", "updatePointer", "Pointer", "updateKeyboard", "Keys", "updateTime", "canPlayerMove"]
}
