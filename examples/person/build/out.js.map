{
  "version": 3,
  "sources": ["../../../src/pool.ts", "../../../src/component.ts", "../../../src/entity.ts", "../../../src/world.ts", "../src/main.ts"],
  "sourcesContent": ["export class ObjectPoolMap<K, V> {\n  private storage: V[] = [];\n  private keyToIndex: Map<K, number> = new Map();\n  private indexToKey: Array<K> = [];\n  private objectFactory: () => V;\n  private size = 0;\n\n  constructor(objectFactory: () => V) {\n    this.objectFactory = objectFactory;\n  }\n\n  len() {\n    return this.size;\n  }\n\n  add(key: K): V {\n    const index = this.keyToIndex.get(key);\n    if (index != undefined) return this.storage[index];\n    if (this.size >= this.storage.length)\n      this.storage.push(this.objectFactory());\n    this.keyToIndex.set(key, this.size);\n    this.indexToKey[this.size] = key;\n    this.size++;\n    return this.storage[this.size - 1];\n  }\n\n  remove(key: K): boolean {\n    const index = this.keyToIndex.get(key) ?? -1;\n    const backKey = this.indexToKey[this.size - 1];\n    if (index < 0 || index >= this.size || !backKey) return false;\n    const removed = this.storage[index];\n    // swap with last to maintain packed\n    this.storage[index] = this.storage[this.size - 1];\n    this.storage[this.size - 1] = removed;\n    // set before deleting because backKey == key sometimes\n    this.keyToIndex.set(backKey, index);\n    this.keyToIndex.delete(key);\n    this.indexToKey[index] = backKey;\n    this.size--;\n    return true;\n  }\n\n  get(key: K): V {\n    const index = this.keyToIndex.get(key) ?? -1;\n    if (index < 0 || index >= this.size) throw new Error(\"Index out of range.\");\n    return this.storage[index];\n  }\n\n  has(key: K): boolean {\n    return this.keyToIndex.has(key);\n  }\n\n  clean() {\n    this.storage.splice(this.size);\n    this.indexToKey.splice(this.size);\n    for (const key of this.keyToIndex.keys()) {\n      const index = this.keyToIndex.get(key) ?? -1;\n      (index < 0 || index >= this.size) && this.keyToIndex.delete(key);\n    }\n  }\n}\n", "import { ObjectPoolMap } from \"./pool.ts\";\nimport { entityT, newEntity } from \"./entity.ts\";\n\nexport class ComponentManager {\n  private pools: Map<object, unknown> = new Map();\n  private idMap: Map<object, number> = new Map();\n\n  register<T extends object>(component: T) {\n    if (this.pools.has(component)) return;\n    this.idMap.set(component, this.idMap.size);\n    this.pools.set(\n      component,\n      new ObjectPoolMap<entityT, T>(() => ({ ...component })),\n    );\n  }\n\n  getId<T extends object>(component: T): number {\n    return this.idMap.get(component) ?? -1;\n  }\n\n  add<T extends object>(entity: entityT, component: T): T {\n    return Object.assign(\n      (this.pools.get(component) as ObjectPoolMap<entityT, T>).add(entity),\n      component,\n    );\n  }\n\n  remove<T extends object>(entity: entityT, component: T): boolean {\n    return (this.pools.get(component) as ObjectPoolMap<entityT, T>).remove(\n      entity,\n    );\n  }\n\n  get<T extends object>(entity: entityT, component: T): T {\n    return (this.pools.get(component) as ObjectPoolMap<entityT, T>).get(entity);\n  }\n\n  len<T extends object>(component: T): number {\n    return (this.pools.get(component) as ObjectPoolMap<entityT, T>).len();\n  }\n\n  delete(entity: entityT) {\n    for (const p of this.pools.values()) {\n      const pool = p as ObjectPoolMap<entityT, object>;\n      pool.remove(entity);\n    }\n  }\n\n  copy(srcEntity: entityT, destEntity: entityT) {\n    for (const p of this.pools.values()) {\n      const pool = p as ObjectPoolMap<entityT, object>;\n      pool.has(srcEntity) &&\n        Object.assign(pool.add(destEntity), pool.get(srcEntity));\n    }\n  }\n\n  clean() {\n    for (const p of this.pools.values()) {\n      const pool = p as ObjectPoolMap<entityT, object>;\n      pool.clean();\n    }\n  }\n}\n", "export type entityT = number;\nexport function newEntity(): entityT {\n  return Math.random();\n}\n", "import { ComponentManager } from \"./component.ts\";\nimport { newEntity, type entityT } from \"./entity.ts\";\n\nexport type queryT = Partial<Record<\"and\" | \"not\", object[]>>;\n\nexport class World {\n  private maskMap: Map<number, number> = new Map();\n  private archetypeMap: Map<number, Set<entityT>> = new Map();\n  private entitiesToDelete: entityT[] = [];\n  private compManager = new ComponentManager();\n\n  addEntity(entity: entityT = newEntity()): entityT {\n    this.maskMap.set(entity, 0);\n    this.getArchetype(0).add(entity);\n    return entity;\n  }\n\n  copyEntity(src: entityT, dest: entityT = newEntity()): entityT {\n    this.compManager.copy(src, dest);\n    const mask = this.maskMap.get(src) ?? 0;\n    this.maskMap.set(dest, mask);\n    this.getArchetype(mask).add(dest);\n    return dest;\n  }\n\n  private getArchetype(mask: number): Set<entityT> {\n    const a = this.archetypeMap.get(mask) ?? new Set();\n    this.archetypeMap.set(mask, a);\n    return a;\n  }\n\n  deleteEntity(entity: entityT) {\n    this.entitiesToDelete.push(entity);\n  }\n\n  registerComponent<T extends object>(component: T): World {\n    this.compManager.register(component);\n    return this;\n  }\n\n  hasComponent<T extends object>(entity: entityT, component: T): boolean {\n    return (\n      ((this.maskMap.get(entity) ?? 0) &\n        (1 << this.compManager.getId(component))) >\n      0\n    );\n  }\n\n  addComponent<T extends object>(\n    entity: entityT,\n    component: T,\n    values: Partial<T> = component,\n  ): T {\n    this.registerComponent(component);\n    let mask = this.maskMap.get(entity) ?? 0;\n    const compId = this.compManager.getId(component);\n    if ((mask & (1 << compId)) != 0) {\n      return Object.assign(this.compManager.get(entity, component), values);\n    }\n    this.getArchetype(mask).delete(entity);\n    mask |= 1 << compId;\n    this.maskMap.set(entity, mask);\n    this.getArchetype(mask).add(entity);\n    return Object.assign(this.compManager.add(entity, component), values);\n  }\n\n  removeComponent<T extends object>(entity: entityT, component: T): boolean {\n    this.registerComponent(component);\n    let mask = this.maskMap.get(entity) ?? 0;\n    const compId = this.compManager.getId(component);\n    if ((mask & (1 << compId)) == 0) return false;\n    this.getArchetype(mask).delete(entity);\n    mask &= ~(1 << compId);\n    this.maskMap.set(entity, mask);\n    this.getArchetype(mask).add(entity);\n    return this.compManager.remove(entity, component);\n  }\n\n  getComponent<T extends object>(entity: entityT, component: T): T {\n    return this.compManager.get(entity, component);\n  }\n\n  update(...fns: ((world: World) => void)[]) {\n    for (let i = 0, l = fns.length; i < l; i++) fns[i](this);\n    this.commitEntityDeletion();\n  }\n\n  commitEntityDeletion() {\n    while (this.entitiesToDelete.length) {\n      const entity = this.entitiesToDelete.pop() as entityT;\n      this.compManager.delete(entity);\n      const mask = this.maskMap.get(entity) ?? 0;\n      this.maskMap.delete(entity);\n      this.getArchetype(mask).delete(entity);\n    }\n  }\n\n  cleanObjectPools() {\n    this.compManager.clean();\n  }\n\n  query(query: queryT): entityT[] {\n    let andMask = 0,\n      notMask = 0;\n    if (query.and) {\n      for (let i = 0, l = query.and.length; i < l; i++) {\n        andMask |= 1 << this.compManager.getId(query.and[i]);\n      }\n    }\n    if (query.not) {\n      for (let i = 0, l = query.not.length; i < l; i++) {\n        notMask |= 1 << this.compManager.getId(query.not[i]);\n      }\n    }\n    const res: entityT[] = [];\n    this.archetypeMap.forEach((v, k) => {\n      const set = v;\n      set.size > 0 &&\n        (k & andMask) == andMask &&\n        (k & notMask) == 0 &&\n        res.push(...set);\n    });\n    return [...new Set(res)];\n  }\n\n  entityCount(): number {\n    return this.maskMap.size;\n  }\n}\n", "import { World } from \"bozoecs\";\n\n// singletons\nconst Ctx2D = setUpCanvas2D();\nconst Time = setUpTime();\nconst Pointer = setUpPointer();\n\nfunction setUpCanvas2D() {\n  const canvas =\n    document.querySelector(\"canvas\") ?? document.createElement(\"canvas\");\n  if (!canvas) throw new Error(\"Cannot create canvas element.\");\n  const ctx = canvas.getContext(\"2d\");\n  if (!ctx) throw new Error(\"Cannot initialize context 2d.\");\n\n  document.body.appendChild(canvas);\n\n  globalThis.onresize = globalThis.onload = () => {\n    if (innerWidth / innerHeight < canvas.width / canvas.height) {\n      canvas.style.width = \"100%\";\n      canvas.style.height = \"\";\n    } else {\n      canvas.style.width = \"\";\n      canvas.style.height = \"100%\";\n    }\n  };\n\n  return { canvas, ctx };\n}\nfunction setUpTime() {\n  return { dtMilli: 0, timeMilli: 0 };\n}\nfunction updateTime(time: { dtMilli: number; timeMilli: number }) {\n  time.dtMilli = performance.now() - time.timeMilli;\n  time.timeMilli += time.dtMilli;\n}\nfunction setUpPointer() {\n  const pointer = {\n    x: 0,\n    y: 0,\n    isDown: false,\n    justPressed: false,\n    justReleased: false,\n    pressPos: { x: 0, y: 0 },\n    releasePos: { x: 0, y: 0 },\n  };\n\n  globalThis.onpointerdown = (e) => {\n    if (!(e.target instanceof HTMLCanvasElement)) return;\n    ((pointer.x = e.x), (pointer.y = e.y));\n    Object.assign(pointer.pressPos, pointer);\n    pointer.isDown = pointer.justPressed = true;\n  };\n\n  globalThis.onpointerup = (e) => {\n    ((pointer.x = e.x), (pointer.y = e.y));\n    Object.assign(pointer.releasePos, pointer);\n    ((pointer.isDown = false), (pointer.justReleased = true));\n  };\n\n  globalThis.onpointermove = (e) => {\n    ((pointer.x = e.x), (pointer.y = e.y));\n  };\n\n  return pointer;\n}\nfunction updatePointer(\n  pointer: Record<\"justPressed\" | \"justReleased\", boolean>,\n) {\n  pointer.justPressed = false;\n  pointer.justReleased = false;\n}\n// components\nconst Transform = { x: 0, y: 0, rad: 0 };\nconst Hierarchy = { parent: -1 };\nconst Eye = { eyeWhiteRadius: 1, pupilRadius: 0.4, lookAtEntity: -1 };\nconst Camera = { zoom: 20, tilt: 0, isActive: false, targetEntity: -1 };\nconst Rect = { width: 1, height: 1, offsetX: -0.5, offsetY: -0.5 };\nconst Material = { density: 0.1 };\nconst Velocity = { x: 0, y: 0 };\nconst Acceleration = { x: 0, y: 0 };\n\n// entities\nfunction addLimb(\n  world: World,\n  x = 0,\n  y = 0,\n  w = 1,\n  h = 1,\n  parent = -1,\n  offsetX = -w / 2,\n  offsetY = 0,\n) {\n  const limb = world.addEntity();\n  world.addComponent(limb, Transform, { x, y });\n  world.addComponent(limb, Hierarchy, { parent });\n  world.addComponent(limb, Rect, {\n    width: w,\n    height: h,\n    offsetX,\n    offsetY,\n  });\n  world.addComponent(limb, Material);\n  world.addComponent(limb, Velocity);\n  world.addComponent(limb, Acceleration);\n  return limb;\n}\nfunction addEye(\n  world: World,\n  x = 0,\n  y = 0,\n  eyeWhiteRadius = 1,\n  pupilRadius = 0.4,\n  lookAtEntity = -1,\n  parent = -1,\n) {\n  const eye = world.addEntity();\n  world.addComponent(eye, Transform, { x, y });\n  world.addComponent(eye, Hierarchy, { parent });\n  world.addComponent(eye, Eye, { eyeWhiteRadius, pupilRadius, lookAtEntity });\n  return eye;\n}\nfunction addPerson(world: World, x = 0, y = 0) {\n  const torso = addLimb(world, x, y, 1, 2);\n  const head = addLimb(world, 0, -0.2, 1, 1, torso, -0.5, -1);\n  const leftEye = addEye(world, -0.4, -0.4, 0.3, 0.1, pointerRect, head);\n  const right = addEye(world, 0.4, -0.4, 0.3, 0.1, pointerRect, head);\n  const leftUpperArm = addLimb(world, -1, 0, 0.5, 1, torso);\n  const leftLowerArm = addLimb(world, 0, 1, 0.5, 1, leftUpperArm);\n  const rightUpperArm = addLimb(world, 1, 0, 0.5, 1, torso);\n  const rightLowerArm = addLimb(world, 0, 1, 0.5, 1, rightUpperArm);\n  const leftUpperLeg = addLimb(world, -0.5, 2, 0.5, 1, torso);\n  const leftLowerLeg = addLimb(world, 0, 1, 0.5, 1, leftUpperLeg);\n  const rightUpperLeg = addLimb(world, 0.5, 2, 0.5, 1, torso);\n  const rightLowerLeg = addLimb(world, 0, 1, 0.5, 1, rightUpperLeg);\n  return torso;\n}\n\n// systems\nfunction handleDrawing(world: World) {\n  Ctx2D.ctx.beginPath();\n  world.query({ and: [Transform, Rect], not: [Hierarchy] }).forEach((e) => {\n    const t = world.getComponent(e, Transform);\n    const r = world.getComponent(e, Rect);\n    const c = Math.cos(t.rad);\n    const s = Math.sin(t.rad);\n    Ctx2D.ctx.transform(c, s, -s, c, t.x, t.y);\n    Ctx2D.ctx.rect(r.offsetX, r.offsetY, r.width, r.height);\n    Ctx2D.ctx.transform(c, -s, s, c, c * -t.x + s * -t.y, -s * -t.x + c * -t.y);\n  });\n  world.query({ and: [Transform, Rect, Hierarchy] }).forEach((e) => {\n    const t = world.getComponent(e, Transform);\n    const rect = world.getComponent(e, Rect);\n    let h = world.getComponent(e, Hierarchy);\n    let x = t.x;\n    let y = t.y;\n    let r = t.rad;\n    while (world.hasComponent(h.parent, Hierarchy)) {\n      if (world.hasComponent(h.parent, Transform)) {\n        const parentTransform = world.getComponent(h.parent, Transform);\n        const c = Math.cos(parentTransform.rad);\n        const s = Math.sin(parentTransform.rad);\n        const _x = x;\n        const _y = y;\n        x = c * _x - s * _y;\n        y = s * _x + c * _y;\n        x += parentTransform.x;\n        y += parentTransform.y;\n        r += parentTransform.rad;\n      }\n      h = world.getComponent(h.parent, Hierarchy);\n    }\n    const c = Math.cos(r);\n    const s = Math.sin(r);\n    Ctx2D.ctx.transform(c, s, -s, c, x, y);\n    Ctx2D.ctx.rect(rect.offsetX, rect.offsetY, rect.width, rect.height);\n    Ctx2D.ctx.transform(c, -s, s, c, c * -x + s * -y, -s * -x + c * -y);\n  });\n  Ctx2D.ctx.fillStyle = \"white\";\n  Ctx2D.ctx.fill();\n\n  world.query({ and: [Transform, Eye, Hierarchy] }).forEach((e) => {\n    const t = world.getComponent(e, Transform);\n    const eye = world.getComponent(e, Eye);\n    let h = world.getComponent(e, Hierarchy);\n    let x = t.x;\n    let y = t.y;\n    while (world.hasComponent(h.parent, Hierarchy)) {\n      if (world.hasComponent(h.parent, Transform)) {\n        const parentTransform = world.getComponent(h.parent, Transform);\n        const c = Math.cos(parentTransform.rad);\n        const s = Math.sin(parentTransform.rad);\n        const _x = x;\n        const _y = y;\n        x = c * _x - s * _y;\n        y = s * _x + c * _y;\n        x += parentTransform.x;\n        y += parentTransform.y;\n      }\n      h = world.getComponent(h.parent, Hierarchy);\n    }\n    Ctx2D.ctx.fillStyle = \"lightgrey\";\n    Ctx2D.ctx.beginPath();\n    Ctx2D.ctx.ellipse(\n      x,\n      y,\n      eye.eyeWhiteRadius,\n      eye.eyeWhiteRadius,\n      0,\n      0,\n      Math.PI * 2,\n    );\n    Ctx2D.ctx.fill();\n    let dirX = 0;\n    let dirY = 0;\n    let mag = eye.eyeWhiteRadius - eye.pupilRadius;\n    if (eye.lookAtEntity != -1) {\n      const t = world.getComponent(eye.lookAtEntity, Transform);\n      dirX = t.x - x;\n      dirY = t.y - y;\n      const m = (dirX ** 2 + dirY ** 2) ** 0.5;\n      dirX /= m;\n      dirY /= m;\n      mag = Math.min(m, mag);\n    }\n    Ctx2D.ctx.fillStyle = \"black\";\n    Ctx2D.ctx.beginPath();\n    Ctx2D.ctx.ellipse(\n      x + dirX * mag,\n      y + dirY * mag,\n      eye.pupilRadius,\n      eye.pupilRadius,\n      0,\n      0,\n      Math.PI * 2,\n    );\n    Ctx2D.ctx.fill();\n  });\n}\nfunction handleCamera(world: World) {\n  const camEntity = world\n    .query({ and: [Camera, Transform] })\n    .find((e) => world.getComponent(e, Camera).isActive);\n  if (!camEntity) return;\n  Ctx2D.ctx.resetTransform();\n  const c = world.getComponent(camEntity, Camera);\n  const p = world.getComponent(camEntity, Transform);\n  if (c.targetEntity != -1 && world.hasComponent(c.targetEntity, Transform)) {\n    const targetPos = world.getComponent(c.targetEntity, Transform);\n    Object.assign(p, targetPos);\n  }\n  const sin = Math.sin(c.tilt) * c.zoom;\n  const cos = Math.cos(c.tilt) * c.zoom;\n  Ctx2D.ctx.transform(\n    cos,\n    sin,\n    -sin,\n    cos,\n    cos * -p.x - sin * -p.y + Ctx2D.canvas.width * 0.5,\n    sin * -p.x + cos * -p.y + Ctx2D.canvas.height * 0.5,\n  );\n}\nfunction handleGravity(world: World) {\n  world\n    .query({ and: [Transform, Rect, Material, Acceleration] })\n    .forEach((e) => {\n      const r = world.getComponent(e, Rect);\n      const m = world.getComponent(e, Material);\n      const t = world.getComponent(e, Transform);\n      const mass = r.width * r.height * m.density;\n    });\n}\nfunction handleMovement(world: World) {\n  world.query({ and: [Transform, Velocity, Acceleration] }).forEach((e) => {\n    const t = world.getComponent(e, Transform);\n    const v = world.getComponent(e, Velocity);\n    const a = world.getComponent(e, Acceleration);\n    v.x += (a.x * Time.dtMilli) / 1000;\n    v.y += (a.y * Time.dtMilli) / 1000;\n    t.x += (v.x * Time.dtMilli) / 1000;\n    t.y += (v.y * Time.dtMilli) / 1000;\n  });\n}\n\n// utils\nfunction drawBackground(color = \"#202020\") {\n  Ctx2D.ctx.resetTransform();\n  Ctx2D.ctx.fillStyle = color;\n  Ctx2D.ctx.fillRect(0, 0, Ctx2D.canvas.width, Ctx2D.canvas.height);\n}\ntype vec2 = { x: number; y: number };\nfunction screenToWorld(\n  screenPos: vec2,\n  cameraPos: vec2,\n  cameraTilt: number,\n  cameraZoom: number,\n): vec2 {\n  const cos = Math.cos(cameraTilt);\n  const sin = Math.sin(cameraTilt);\n  const res = { x: 0, y: 0 };\n  const x = screenPos.x - Ctx2D.canvas.width / 2;\n  const y = screenPos.y - Ctx2D.canvas.height / 2;\n  res.x = cos * x + sin * y;\n  res.y = -sin * x + cos * y;\n  res.x /= cameraZoom;\n  res.y /= cameraZoom;\n  res.x += cameraPos.x;\n  res.y += cameraPos.y;\n  return res;\n}\nfunction pointerToScreen(pointerPos: vec2, canvas: HTMLCanvasElement): vec2 {\n  const out = { x: 0, y: 0 };\n  const rect = canvas.getBoundingClientRect();\n  out.x = pointerPos.x - rect.left;\n  out.y = pointerPos.y - rect.top;\n  if (innerWidth / innerHeight < canvas.width / canvas.height) {\n    out.x *= canvas.width / innerWidth;\n    out.y *= canvas.width / innerWidth;\n  } else {\n    out.x *= canvas.height / innerHeight;\n    out.y *= canvas.height / innerHeight;\n  }\n  return out;\n}\n\n// initialization\nconst game = new World();\n\nconst camera = game.addEntity();\nconst camPos = game.addComponent(camera, Transform, { y: 1 });\nconst camComp = game.addComponent(camera, Camera, {\n  zoom: 20,\n  isActive: true,\n});\n\nconst pointerRect = game.addEntity();\nconst pointerTransform = game.addComponent(pointerRect, Transform);\ngame.addComponent(pointerRect, Rect);\n\naddPerson(game);\naddPerson(game, 3);\naddPerson(game, -3);\n\n{\n  (function update() {\n    requestAnimationFrame(update);\n    drawBackground();\n    game.update(handleCamera, handleDrawing, handleMovement);\n    updateTime(Time);\n    updatePointer(Pointer);\n    Object.assign(\n      pointerTransform,\n      screenToWorld(\n        pointerToScreen(Pointer, Ctx2D.canvas),\n        camPos,\n        camComp.tilt,\n        camComp.zoom,\n      ),\n    );\n  })();\n}\n"],
  "mappings": "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",
  "names": ["ObjectPoolMap", "objectFactory", "key", "index", "backKey", "removed", "ComponentManager", "component", "ObjectPoolMap", "entity", "p", "srcEntity", "destEntity", "pool", "newEntity", "World", "ComponentManager", "entity", "newEntity", "src", "dest", "mask", "a", "component", "values", "compId", "fns", "i", "l", "query", "andMask", "notMask", "res", "v", "k", "set", "Ctx2D", "setUpCanvas2D", "Time", "setUpTime", "Pointer", "setUpPointer", "canvas", "ctx", "updateTime", "time", "pointer", "e", "updatePointer", "Transform", "Hierarchy", "Eye", "Camera", "Rect", "Material", "Velocity", "Acceleration", "addLimb", "world", "x", "y", "w", "h", "parent", "offsetX", "offsetY", "limb", "addEye", "eyeWhiteRadius", "pupilRadius", "lookAtEntity", "eye", "addPerson", "torso", "head", "leftEye", "pointerRect", "right", "leftUpperArm", "leftLowerArm", "rightUpperArm", "rightLowerArm", "leftUpperLeg", "leftLowerLeg", "rightUpperLeg", "rightLowerLeg", "handleDrawing", "t", "r", "c", "s", "rect", "parentTransform", "_x", "_y", "dirX", "dirY", "mag", "handleCamera", "camEntity", "p", "targetPos", "sin", "cos", "handleMovement", "world", "Transform", "Velocity", "Acceleration", "e", "t", "v", "a", "Time", "drawBackground", "color", "Ctx2D", "screenToWorld", "screenPos", "cameraPos", "cameraTilt", "cameraZoom", "cos", "sin", "res", "x", "y", "pointerToScreen", "pointerPos", "canvas", "out", "rect", "game", "World", "camera", "camPos", "camComp", "Camera", "pointerRect", "pointerTransform", "Rect", "addPerson", "update", "handleCamera", "handleDrawing", "updateTime", "updatePointer", "Pointer"]
}
