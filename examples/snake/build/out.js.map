{
  "version": 3,
  "sources": ["../../../src/pool.ts", "../../../src/component.ts", "../../../src/entity.ts", "../../../src/world.ts", "../src/main.ts"],
  "sourcesContent": ["export class ObjectPoolMap<K, V> {\n  private storage: V[] = [];\n  private keyToIndex: Map<K, number> = new Map();\n  private indexToKey: Array<K> = [];\n  private objectFactory: () => V;\n  private size = 0;\n\n  constructor(objectFactory: () => V) {\n    this.objectFactory = objectFactory;\n  }\n\n  len() {\n    return this.size;\n  }\n\n  add(key: K): V {\n    const index = this.keyToIndex.get(key);\n    if (index != undefined) return this.storage[index];\n    if (this.size >= this.storage.length)\n      this.storage.push(this.objectFactory());\n    this.keyToIndex.set(key, this.size);\n    this.indexToKey[this.size] = key;\n    this.size++;\n    return this.storage[this.size - 1];\n  }\n\n  remove(key: K): boolean {\n    const index = this.keyToIndex.get(key) ?? -1;\n    const backKey = this.indexToKey[this.size - 1];\n    if (index < 0 || index >= this.size || !backKey) return false;\n    const removed = this.storage[index];\n    // swap with last to maintain packed\n    this.storage[index] = this.storage[this.size - 1];\n    this.storage[this.size - 1] = removed;\n    // set before deleting because backKey == key sometimes\n    this.keyToIndex.set(backKey, index);\n    this.keyToIndex.delete(key);\n    this.indexToKey[index] = backKey;\n    this.size--;\n    return true;\n  }\n\n  get(key: K): V {\n    const index = this.keyToIndex.get(key) ?? -1;\n    if (index < 0 || index >= this.size) throw new Error(\"Index out of range.\");\n    return this.storage[index];\n  }\n\n  has(key: K): boolean {\n    return this.keyToIndex.has(key);\n  }\n\n  clean() {\n    this.storage.splice(this.size);\n    this.indexToKey.splice(this.size);\n    for (const key of this.keyToIndex.keys()) {\n      const index = this.keyToIndex.get(key) ?? -1;\n      (index < 0 || index >= this.size) && this.keyToIndex.delete(key);\n    }\n  }\n}\n", "import { ObjectPoolMap } from \"./pool.ts\";\nimport { entityT, newEntity } from \"./entity.ts\";\n\nexport class ComponentManager {\n  private pools: Map<object, unknown> = new Map();\n  private idMap: Map<object, number> = new Map();\n\n  register<T extends object>(component: T) {\n    if (this.pools.has(component)) return;\n    this.idMap.set(component, this.idMap.size);\n    this.pools.set(\n      component,\n      new ObjectPoolMap<entityT, T>(() => ({ ...component })),\n    );\n  }\n\n  getId<T extends object>(component: T): number {\n    return this.idMap.get(component) ?? -1;\n  }\n\n  add<T extends object>(entity: entityT, component: T): T {\n    return Object.assign(\n      (this.pools.get(component) as ObjectPoolMap<entityT, T>).add(entity),\n      component,\n    );\n  }\n\n  remove<T extends object>(entity: entityT, component: T): boolean {\n    return (this.pools.get(component) as ObjectPoolMap<entityT, T>).remove(\n      entity,\n    );\n  }\n\n  get<T extends object>(entity: entityT, component: T): T {\n    return (this.pools.get(component) as ObjectPoolMap<entityT, T>).get(entity);\n  }\n\n  len<T extends object>(component: T): number {\n    return (this.pools.get(component) as ObjectPoolMap<entityT, T>).len();\n  }\n\n  delete(entity: entityT) {\n    for (const p of this.pools.values()) {\n      const pool = p as ObjectPoolMap<entityT, object>;\n      pool.remove(entity);\n    }\n  }\n\n  copy(srcEntity: entityT, destEntity: entityT) {\n    for (const p of this.pools.values()) {\n      const pool = p as ObjectPoolMap<entityT, object>;\n      pool.has(srcEntity) &&\n        Object.assign(pool.add(destEntity), pool.get(srcEntity));\n    }\n  }\n\n  clean() {\n    for (const p of this.pools.values()) {\n      const pool = p as ObjectPoolMap<entityT, object>;\n      pool.clean();\n    }\n  }\n}\n", "export type entityT = number;\nexport function newEntity(): entityT {\n  return Math.random();\n}\n", "import { ComponentManager } from \"./component.ts\";\nimport { newEntity, type entityT } from \"./entity.ts\";\n\nexport type queryT = Partial<Record<\"and\" | \"not\", object[]>>;\n\nexport class World {\n  private maskMap: Map<number, number> = new Map();\n  private archetypeMap: Map<number, Set<entityT>> = new Map();\n  private entitiesToDelete: entityT[] = [];\n  private compManager = new ComponentManager();\n\n  addEntity(entity: entityT = newEntity()): entityT {\n    this.maskMap.set(entity, 0);\n    this.getArchetype(0).add(entity);\n    return entity;\n  }\n\n  copyEntity(src: entityT, dest: entityT = newEntity()): entityT {\n    this.compManager.copy(src, dest);\n    const mask = this.maskMap.get(src) ?? 0;\n    this.maskMap.set(dest, mask);\n    this.getArchetype(mask).add(dest);\n    return dest;\n  }\n\n  private getArchetype(mask: number): Set<entityT> {\n    const a = this.archetypeMap.get(mask) ?? new Set();\n    this.archetypeMap.set(mask, a);\n    return a;\n  }\n\n  deleteEntity(entity: entityT) {\n    this.entitiesToDelete.push(entity);\n  }\n\n  registerComponent<T extends object>(component: T): World {\n    this.compManager.register(component);\n    return this;\n  }\n\n  hasComponent<T extends object>(entity: entityT, component: T): boolean {\n    return (\n      ((this.maskMap.get(entity) ?? 0) &\n        (1 << this.compManager.getId(component))) >\n      0\n    );\n  }\n\n  addComponent<T extends object>(\n    entity: entityT,\n    component: T,\n    values: Partial<T> = component,\n  ): T {\n    this.registerComponent(component);\n    let mask = this.maskMap.get(entity) ?? 0;\n    const compId = this.compManager.getId(component);\n    if ((mask & (1 << compId)) != 0) {\n      return Object.assign(this.compManager.get(entity, component), values);\n    }\n    this.getArchetype(mask).delete(entity);\n    mask |= 1 << compId;\n    this.maskMap.set(entity, mask);\n    this.getArchetype(mask).add(entity);\n    return Object.assign(this.compManager.add(entity, component), values);\n  }\n\n  removeComponent<T extends object>(entity: entityT, component: T): boolean {\n    this.registerComponent(component);\n    let mask = this.maskMap.get(entity) ?? 0;\n    const compId = this.compManager.getId(component);\n    if ((mask & (1 << compId)) == 0) return false;\n    this.getArchetype(mask).delete(entity);\n    mask &= ~(1 << compId);\n    this.maskMap.set(entity, mask);\n    this.getArchetype(mask).add(entity);\n    return this.compManager.remove(entity, component);\n  }\n\n  getComponent<T extends object>(entity: entityT, component: T): T {\n    return this.compManager.get(entity, component);\n  }\n\n  update(...fns: ((world: World) => void)[]) {\n    for (let i = 0, l = fns.length; i < l; i++) fns[i](this);\n    this.commitEntityDeletion();\n  }\n\n  commitEntityDeletion() {\n    while (this.entitiesToDelete.length) {\n      const entity = this.entitiesToDelete.pop() as entityT;\n      this.compManager.delete(entity);\n      const mask = this.maskMap.get(entity) ?? 0;\n      this.maskMap.delete(entity);\n      this.getArchetype(mask).delete(entity);\n    }\n  }\n\n  cleanObjectPools() {\n    this.compManager.clean();\n  }\n\n  query(query: queryT): entityT[] {\n    let andMask = 0,\n      notMask = 0;\n    if (query.and) {\n      for (let i = 0, l = query.and.length; i < l; i++) {\n        andMask |= 1 << this.compManager.getId(query.and[i]);\n      }\n    }\n    if (query.not) {\n      for (let i = 0, l = query.not.length; i < l; i++) {\n        notMask |= 1 << this.compManager.getId(query.not[i]);\n      }\n    }\n    const res: entityT[] = [];\n    this.archetypeMap.forEach((v, k) => {\n      const set = v;\n      set.size > 0 &&\n        (k & andMask) == andMask &&\n        (k & notMask) == 0 &&\n        res.push(...set);\n    });\n    return [...new Set(res)];\n  }\n\n  entityCount(): number {\n    return this.maskMap.size;\n  }\n}\n", "import { World } from \"bozoecs\";\n\n// singletons\nconst Ctx2D = setUpCanvas2D();\nconst Time = setUpTime();\nconst Keys = setUpKeyboard();\nconst Pointer = setUpPointer();\nconst Game = { snakeWidth: 10, foodRadius: 15, startLength: 5 };\n\nfunction setUpCanvas2D(): {\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n} {\n  const canvas =\n    document.querySelector(\"canvas\") ?? document.createElement(\"canvas\");\n  if (!canvas) throw new Error(\"Cannot create canvas element.\");\n  const ctx = canvas.getContext(\"2d\");\n  if (!ctx) throw new Error(\"Cannot initialize context 2d.\");\n\n  document.body.appendChild(canvas);\n\n  globalThis.onresize = globalThis.onload = () => {\n    if (innerWidth / innerHeight < canvas.width / canvas.height) {\n      canvas.style.width = \"100%\";\n      canvas.style.height = \"\";\n    } else {\n      canvas.style.width = \"\";\n      canvas.style.height = \"100%\";\n    }\n  };\n\n  return { canvas, ctx };\n}\nfunction setUpTime() {\n  return { dtMilli: 0, timeMilli: 0 };\n}\nfunction updateTime(time: { dtMilli: number; timeMilli: number }) {\n  time.dtMilli = performance.now() - time.timeMilli;\n  time.timeMilli += time.dtMilli;\n}\nfunction setUpKeyboard(): Record<\n  \"isDown\" | \"justPressed\" | \"justReleased\",\n  Record<string, boolean>\n> {\n  const keys: ReturnType<typeof setUpKeyboard> = {\n    isDown: {},\n    justPressed: {},\n    justReleased: {},\n  };\n\n  globalThis.onkeydown = (e) => {\n    !keys.isDown[e.key] && (keys.justPressed[e.key] = true);\n    keys.isDown[e.key] = true;\n  };\n  globalThis.onkeyup = (e) => {\n    keys.isDown[e.key] = false;\n    keys.justReleased[e.key] = true;\n  };\n\n  return keys;\n}\nfunction updateKeyboard(\n  keys: Record<\n    \"isDown\" | \"justPressed\" | \"justReleased\",\n    Record<string, boolean>\n  >,\n) {\n  for (const key in keys.justPressed) keys.justPressed[key] = false;\n  for (const key in keys.justReleased) keys.justReleased[key] = false;\n}\nfunction setUpPointer() {\n  const pointer = {\n    x: 0,\n    y: 0,\n    isDown: false,\n    justPressed: false,\n    justReleased: false,\n    pressPos: { x: 0, y: 0 },\n    releasePos: { x: 0, y: 0 },\n  };\n\n  globalThis.onpointerdown = (e) => {\n    if (!(e.target instanceof HTMLCanvasElement)) return;\n    ((pointer.x = e.x), (pointer.y = e.y));\n    Object.assign(pointer.pressPos, pointer);\n    pointer.isDown = pointer.justPressed = true;\n  };\n\n  globalThis.onpointerup = (e) => {\n    ((pointer.x = e.x), (pointer.y = e.y));\n    Object.assign(pointer.releasePos, pointer);\n    ((pointer.isDown = false), (pointer.justReleased = true));\n  };\n\n  globalThis.onpointermove = (e) => {\n    ((pointer.x = e.x), (pointer.y = e.y));\n  };\n\n  return pointer;\n}\nfunction updatePointer(\n  pointer: Record<\"isDown\" | \"justPressed\" | \"justReleased\", boolean>,\n) {\n  pointer.justPressed = false;\n  pointer.justReleased = false;\n}\n\n// components\nconst Transform = { x: 0, y: 0, rad: 0 };\nconst Velocity = { x: 0, y: 0 };\nconst Hierarchy = { parent: -1, child: -1 };\nconst PlayerControl = {};\nconst isFood = {};\n\n// systems\nfunction handleMovement(world: World) {\n  world.query({ and: [Transform, Velocity] }).forEach((e) => {\n    const p = world.getComponent(e, Transform);\n    const v = world.getComponent(e, Velocity);\n    p.x += (v.x * Time.dtMilli) / 1000;\n    p.y += (v.y * Time.dtMilli) / 1000;\n    if (v.x == 0 && v.y == 0) return;\n    p.rad = Math.atan2(v.y, v.x);\n  });\n}\nfunction handleDrawing(world: World) {\n  Ctx2D.ctx.fillStyle = \"#202020\";\n  Ctx2D.ctx.fillRect(0, 0, Ctx2D.canvas.width, Ctx2D.canvas.height);\n  Ctx2D.ctx.fillStyle = \"#F0A0A0\";\n  Ctx2D.ctx.beginPath();\n  world.query({ and: [Transform, isFood] }).forEach((e) => {\n    const p = world.getComponent(e, Transform);\n    Ctx2D.ctx.ellipse(\n      p.x,\n      p.y,\n      Game.foodRadius,\n      Game.foodRadius,\n      0,\n      0,\n      Math.PI * 2,\n    );\n  });\n  Ctx2D.ctx.fill();\n  Ctx2D.ctx.beginPath();\n  world.query({ and: [Transform, Hierarchy] }).forEach((e) => {\n    const h = world.getComponent(e, Hierarchy);\n    const p = world.getComponent(e, Transform);\n    Ctx2D.ctx.moveTo(p.x, p.y);\n    if (h.child != -1 && world.hasComponent(h.child, Transform)) {\n      const childTransform = world.getComponent(h.child, Transform);\n      Ctx2D.ctx.lineTo(childTransform.x, childTransform.y);\n    }\n  });\n  Ctx2D.ctx.strokeStyle = \"#F0D0D0\";\n  Ctx2D.ctx.lineCap = \"round\";\n  Ctx2D.ctx.lineWidth = Game.snakeWidth;\n  Ctx2D.ctx.stroke();\n\n  Ctx2D.ctx.fillStyle = \"white\";\n  Ctx2D.ctx.fillText(\n    `Score: ${world.query({ and: [Hierarchy] }).length - Game.startLength}; Best: ${localStorage.getItem(\"snake_best\") ?? 0}`,\n    0,\n    10,\n  );\n}\nfunction handleInput(world: World) {\n  world.query({ and: [PlayerControl, Velocity] }).forEach((e) => {\n    const v = world.getComponent(e, Velocity);\n    let angularVel = 0;\n    if (\n      Keys.isDown[\"a\"] ||\n      Keys.isDown[\"ArrowLeft\"] ||\n      (Pointer.isDown && Pointer.x < Ctx2D.canvas.width / 2)\n    ) {\n      angularVel -= Math.PI;\n    }\n    if (\n      Keys.isDown[\"d\"] ||\n      Keys.isDown[\"ArrowRight\"] ||\n      (Pointer.isDown && Pointer.x > Ctx2D.canvas.width / 2)\n    ) {\n      angularVel += Math.PI;\n    }\n    const c = Math.cos((angularVel * Time.dtMilli) / 1000);\n    const s = Math.sin((angularVel * Time.dtMilli) / 1000);\n    const x = v.x,\n      y = v.y;\n    v.x = c * x - s * y;\n    v.y = s * x + c * y;\n  });\n}\nfunction handleReset(world: World) {\n  world\n    .query({ and: [PlayerControl, Transform, Hierarchy, Velocity] })\n    .forEach((e) => {\n      const p = world.getComponent(e, Transform);\n      const collidedBody = world\n        .query({ and: [Hierarchy], not: [PlayerControl] })\n        .find((other) => {\n          const otherH = world.getComponent(other, Hierarchy);\n          if (otherH.parent == e) return false;\n          const otherP = world.getComponent(other, Transform);\n          return (otherP.x - p.x) ** 2 + (otherP.y - p.y) ** 2 < 6 ** 2;\n        });\n      if (\n        p.x > Ctx2D.canvas.width ||\n        p.x < 0 ||\n        p.y > Ctx2D.canvas.height ||\n        p.y < 0 ||\n        world.entityCount() < Game.startLength ||\n        collidedBody != undefined\n      ) {\n        const score =\n          world.query({ and: [Hierarchy] }).length - Game.startLength;\n        if (\n          score > Number.parseInt(localStorage.getItem(\"snake_best\") ?? \"0\")\n        ) {\n          localStorage.setItem(\"snake_best\", score.toString());\n        }\n        p.x = Ctx2D.canvas.width / 2;\n        p.y = Ctx2D.canvas.height / 2;\n        world\n          .query({ not: [PlayerControl] })\n          .forEach((e) => world.deleteEntity(e));\n        world.getComponent(e, Hierarchy).child = -1;\n        const v = world.getComponent(e, Velocity);\n        ((v.x = 40), (v.y = 0));\n        let parent = e;\n        for (let i = 0; i < Game.startLength - 1; i++) {\n          const bodyPart = world.addEntity();\n          world.addComponent(bodyPart, Velocity);\n          world.addComponent(bodyPart, Hierarchy, { parent });\n          const parentTransform = world.getComponent(parent, Transform);\n          world.addComponent(bodyPart, Transform, {\n            x: parentTransform.x - 6,\n            y: parentTransform.y,\n          });\n          world.getComponent(parent, Hierarchy).child = bodyPart;\n          parent = bodyPart;\n        }\n      }\n    });\n}\nfunction handleSpawnFood(world: World) {\n  const food = world.query({ and: [isFood] });\n  if (food.length > 0) return;\n  // spawn food\n  const foodEntity = world.addEntity();\n  world.addComponent(foodEntity, isFood);\n  world.addComponent(foodEntity, Transform, {\n    x: Math.random() * Ctx2D.canvas.width,\n    y: Math.random() * Ctx2D.canvas.height,\n  });\n}\nfunction handleEatFood(world: World) {\n  world.query({ and: [PlayerControl, Transform] }).forEach((e) => {\n    const playerTransform = world.getComponent(e, Transform);\n    world.query({ and: [isFood, Transform] }).forEach((foodE) => {\n      const foodTransform = world.getComponent(foodE, Transform);\n      if (\n        (playerTransform.x - foodTransform.x) ** 2 <\n          ((Game.snakeWidth + Game.foodRadius) / 2) ** 2 &&\n        (playerTransform.y - foodTransform.y) ** 2 <\n          ((Game.snakeWidth + Game.foodRadius) / 2) ** 2\n      ) {\n        world.deleteEntity(foodE);\n        const parent = world\n          .query({ and: [Hierarchy] })\n          .find((e) => world.getComponent(e, Hierarchy).child == -1);\n        if (\n          !parent ||\n          !world.hasComponent(parent, Transform) ||\n          !world.hasComponent(parent, Hierarchy)\n        )\n          return;\n        // spawn new body part\n        const bodyPart = world.addEntity();\n        world.addComponent(bodyPart, Velocity);\n        world.addComponent(bodyPart, Hierarchy, { parent });\n        world.addComponent(\n          bodyPart,\n          Transform,\n          world.getComponent(parent, Transform),\n        );\n        world.getComponent(parent, Hierarchy).child = bodyPart;\n      }\n    });\n  });\n}\nfunction handleEntityHierarchy(world: World) {\n  world.query({ and: [Hierarchy, Transform, Velocity] }).forEach((e) => {\n    const h = world.getComponent(e, Hierarchy);\n    const p = world.getComponent(e, Transform);\n    const v = world.getComponent(e, Velocity);\n    if (\n      h.parent != -1 &&\n      world.hasComponent(h.parent, Transform) &&\n      world.hasComponent(h.parent, Velocity)\n    ) {\n      const parentTransform = world.getComponent(h.parent, Transform);\n      if (\n        (p.x - parentTransform.x) ** 2 + (p.y - parentTransform.y) ** 2 <\n        50\n      ) {\n        v.x = v.y = 0;\n        return;\n      }\n      const parentVelocity = world.getComponent(h.parent, Velocity);\n      const velocityMag =\n        (parentVelocity.x ** 2 + parentVelocity.y ** 2) ** 0.5;\n      const dx = parentTransform.x - p.x;\n      const dy = parentTransform.y - p.y;\n      const distance = (dx ** 2 + dy ** 2) ** 0.5;\n      v.x = (dx / distance) * velocityMag;\n      v.y = (dy / distance) * velocityMag;\n    }\n  });\n}\n\n// initialization\nconst game = new World();\nconst player = game.addEntity();\ngame.addComponent(player, Transform, {\n  x: Ctx2D.canvas.width / 2,\n  y: Ctx2D.canvas.height / 2,\n});\ngame.addComponent(player, Velocity, { x: 40 });\ngame.addComponent(player, PlayerControl);\ngame.addComponent(player, Hierarchy);\n\n// loop\n{\n  (function update() {\n    requestAnimationFrame(update);\n    game.update(\n      handleDrawing,\n      handleReset,\n      handleSpawnFood,\n      handleEatFood,\n      handleInput,\n      handleMovement,\n      handleEntityHierarchy,\n    );\n    updateTime(Time);\n    updateKeyboard(Keys);\n    updatePointer(Pointer);\n  })();\n}\n"],
  "mappings": "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",
  "names": ["ObjectPoolMap", "objectFactory", "key", "index", "backKey", "removed", "ComponentManager", "component", "ObjectPoolMap", "entity", "p", "srcEntity", "destEntity", "pool", "newEntity", "World", "ComponentManager", "entity", "newEntity", "src", "dest", "mask", "a", "component", "values", "compId", "fns", "i", "l", "query", "andMask", "notMask", "res", "v", "k", "set", "Ctx2D", "setUpCanvas2D", "Time", "setUpTime", "Keys", "setUpKeyboard", "Pointer", "setUpPointer", "Game", "canvas", "ctx", "updateTime", "time", "keys", "e", "updateKeyboard", "key", "pointer", "updatePointer", "Transform", "Velocity", "Hierarchy", "PlayerControl", "isFood", "handleMovement", "world", "p", "v", "handleDrawing", "h", "childTransform", "handleInput", "angularVel", "c", "s", "x", "y", "handleReset", "collidedBody", "other", "otherP", "score", "parent", "i", "bodyPart", "parentTransform", "handleSpawnFood", "foodEntity", "handleEatFood", "playerTransform", "foodE", "foodTransform", "handleEntityHierarchy", "parentVelocity", "velocityMag", "dx", "dy", "distance", "game", "World", "player", "update"]
}
