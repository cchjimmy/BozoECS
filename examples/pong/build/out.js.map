{
  "version": 3,
  "sources": ["../../../src/pool.ts", "../../../src/component.ts", "../../../src/entity.ts", "../../../src/world.ts", "../src/config.json", "../src/main.ts"],
  "sourcesContent": ["export class ObjectPool<T> {\n  private storage: T[] = [];\n  private objectConstructor: () => T;\n  private size = 0;\n\n  constructor(objectConstructor: () => T) {\n    this.objectConstructor = objectConstructor;\n  }\n\n  len() {\n    return this.size;\n  }\n\n  addObj(): T {\n    let obj;\n    if (this.storage[this.size]) {\n      obj = this.storage[this.size];\n    } else {\n      obj = this.objectConstructor();\n      this.storage.push(obj);\n    }\n    this.size++;\n    return obj;\n  }\n\n  findIndex(object: T): number {\n    return this.storage.findIndex((v) => v == object);\n  }\n\n  removeObj(index: number): T {\n    if (index >= this.size) throw new Error(\"Index out of range.\");\n    const removed = this.storage[index];\n    // swap with last to maintain packed\n    this.storage[index] = this.storage[this.storage.length - 1];\n    this.storage[this.storage.length - 1] = removed;\n    this.size--;\n    return removed;\n  }\n\n  getObj(index: number): T {\n    if (index >= this.size) throw new Error(\"Index out of range.\");\n    return this.storage[index];\n  }\n}\n", "import { ObjectPool } from \"./pool.ts\";\n\nexport class ComponentManager {\n  private static pools: Map<object, any> = new Map();\n  private static idMap: Map<object, number> = new Map();\n\n  static register<T extends object>(component: T) {\n    ComponentManager.idMap.set(component, ComponentManager.idMap.size);\n    ComponentManager.pools.set(\n      component,\n      new ObjectPool<T>(() => Object.assign({}, component)),\n    );\n  }\n\n  static getId<T extends object>(component: T): number {\n    return ComponentManager.idMap.get(component) ?? -1;\n  }\n\n  static add<T extends object>(component: T): T {\n    return (ComponentManager.pools.get(component) as ObjectPool<T>).addObj();\n  }\n\n  static delete<T extends object>(\n    component: T,\n    index: number,\n  ): T {\n    return (ComponentManager.pools.get(component) as ObjectPool<T>).removeObj(\n      index,\n    );\n  }\n\n  static get<T extends object>(\n    component: T,\n    index: number,\n  ): T {\n    return (ComponentManager.pools.get(component) as ObjectPool<T>).getObj(\n      index,\n    );\n  }\n\n  static len<T extends object>(component: T): number {\n    return (ComponentManager.pools.get(component) as ObjectPool<T>).len();\n  }\n\n  static typeLen(): number {\n    return ComponentManager.pools.size;\n  }\n\n  static types(): object[] {\n    return ComponentManager.pools.keys().toArray();\n  }\n}\n", "import { ObjectPool } from \"./pool.ts\";\n\nexport type entityT = number;\n\nexport class EntityManager {\n  static nextId = 0;\n  static pool = new ObjectPool<entityT>(() => EntityManager.nextId++);\n\n  static add(): entityT {\n    return EntityManager.pool.addObj();\n  }\n\n  static findIndex(entity: entityT): number {\n    return EntityManager.pool.findIndex(entity);\n  }\n\n  static delete(index: number): entityT {\n    return EntityManager.pool.removeObj(index);\n  }\n}\n", "import { ComponentManager } from \"./component.ts\";\nimport { EntityManager, entityT } from \"./entity.ts\";\n\nexport type queryT = Partial<\n  Record<\"and\" | \"or\" | \"not\", object[]>\n>;\n\nexport class World {\n  private static indexMap: Map<object, Map<number, number>> = new Map();\n  private static maskMap: Map<number, number> = new Map();\n  private static archetypeMap: Map<number, Set<entityT>> = new Map();\n  private static worlds: World[] = [];\n  private static removeMap: Map<number, (_: entityT) => object> = new Map();\n  private static ownerMap: Map<object, Map<number, number>> = new Map();\n\n  timeMilli = 0;\n  dtMilli = 0;\n  localEntities: Set<entityT> = new Set();\n\n  constructor() {\n    World.worlds.push(this);\n  }\n\n  static createEntity(): entityT {\n    const entity = EntityManager.add();\n    World.maskMap.set(entity, 0);\n    World.getArchetype(0).add(entity);\n    return entity;\n  }\n\n  private static getArchetype(mask: number): Set<entityT> {\n    const a = World.archetypeMap.get(mask);\n    if (a == undefined) {\n      const set: Set<entityT> = new Set();\n      World.archetypeMap.set(mask, set);\n      return set;\n    }\n    return a;\n  }\n\n  static deleteEntity(entity: entityT) {\n    for (let i = 0, l = World.worlds.length; i < l; i++) {\n      World.worlds[i].removeEntity(entity);\n    }\n    const types = ComponentManager.types();\n    for (let i = 0, l = ComponentManager.typeLen(); i < l; i++) {\n      if (!(World.getMask(entity) & 1 << i)) continue;\n      World.getRemoveFn(i)(entity);\n      const indices = World.getIndices(types[i]);\n      const owners = World.getOwners(types[i]);\n      const backEntity = World.getOwner(owners, owners.size - 1);\n      const entityIdx = World.getIndex(indices, entity);\n      owners.set(entityIdx, backEntity);\n      indices.set(backEntity, entityIdx);\n    }\n    World.getArchetype(World.getMask(entity)).delete(entity);\n    World.maskMap.set(entity, 0);\n    EntityManager.delete(EntityManager.findIndex(entity));\n  }\n\n  private static getRemoveFn(compId: number) {\n    const removeFn = World.removeMap.get(compId);\n    if (removeFn == undefined) throw new Error(\"Component not registered.\");\n    return removeFn;\n  }\n\n  addEntity(entity?: entityT): entityT {\n    entity ??= World.createEntity();\n    this.localEntities.add(entity);\n    return entity;\n  }\n\n  removeEntity(entity: entityT) {\n    this.localEntities.delete(entity);\n  }\n\n  entityExists(entity: entityT): boolean {\n    return this.localEntities.has(entity);\n  }\n\n  static componentExists<T extends object>(component: T) {\n    if (!World.indexMap.has(component)) World.registerComponent(component);\n  }\n\n  static registerComponent<T extends object>(\n    component: T,\n  ): typeof World {\n    ComponentManager.register(component);\n    World.indexMap.set(component, new Map());\n    World.removeMap.set(\n      ComponentManager.getId(component),\n      (e: entityT) =>\n        ComponentManager.delete(\n          component,\n          World.getIndex(World.getIndices(component), e),\n        ),\n    );\n    World.ownerMap.set(component, new Map());\n    return World;\n  }\n\n  static hasComponent<T extends object>(\n    entity: entityT,\n    component: T,\n  ): boolean {\n    return (World.getMask(entity) &\n      1 << ComponentManager.getId(component)) > 0;\n  }\n\n  static addComponent<T extends object>(\n    entity: entityT,\n    component: T,\n  ): T {\n    World.componentExists(component);\n    let mask = World.getMask(entity);\n    const compId = ComponentManager.getId(component);\n    if ((mask & 1 << compId) != 0) {\n      throw new Error(`Entity ${entity} already had that component.`);\n    }\n    World.getArchetype(mask).delete(entity);\n    mask |= 1 << compId;\n    World.maskMap.set(entity, mask);\n    World.getArchetype(mask).add(entity);\n    const idx = ComponentManager.len(component);\n    World.getIndices(component).set(entity, idx);\n    World.getOwners(component).set(idx, entity);\n    return ComponentManager.add(component);\n  }\n\n  private static getIndices<T extends object>(component: T) {\n    const indices = World.indexMap.get(component);\n    if (indices == undefined) throw new Error(\"Component not registered.\");\n    return indices;\n  }\n\n  private static getIndex(\n    indices: Map<number, number>,\n    entity: entityT,\n  ) {\n    const index = indices.get(entity);\n    if (index == undefined) throw new Error(`Entity ${entity} does not exist.`);\n    return index;\n  }\n\n  private static getOwners<T extends object>(component: T) {\n    const owners = World.ownerMap.get(component);\n    if (owners == undefined) throw new Error(\"Component not registered.\");\n    return owners;\n  }\n\n  private static getOwner(owners: Map<number, number>, index: number) {\n    const owner = owners.get(index);\n    if (owner == undefined) throw new Error(\"Owner not found.\");\n    return owner;\n  }\n\n  static removeComponent<T extends object>(\n    entity: entityT,\n    component: T,\n  ): T {\n    World.componentExists(component);\n    let mask = World.getMask(entity);\n    const compId = ComponentManager.getId(component);\n    if ((mask & 1 << compId) == 0) {\n      throw new Error(\n        `Entity ${entity} does not have that component.`,\n      );\n    }\n    World.getArchetype(mask).delete(entity);\n    mask &= ~(1 << compId);\n    World.maskMap.set(entity, mask);\n    World.getArchetype(mask).add(entity);\n    const indices = World.getIndices(component);\n    const owners = World.getOwners(component);\n    const entityIdx = World.getIndex(indices, entity);\n    const removed = ComponentManager.delete(component, entityIdx);\n    const backEntity = World.getOwner(owners, owners.size - 1);\n    owners.set(entityIdx, backEntity);\n    indices.set(backEntity, entityIdx);\n    return removed;\n  }\n\n  private static getMask(e: entityT): number {\n    return World.maskMap.get(e) ?? -1;\n  }\n\n  static getComponent<T extends object>(\n    entity: entityT,\n    component: T,\n  ): T {\n    if (!World.hasComponent(entity, component)) {\n      throw new Error(`Entity ${entity} does not have that component.`);\n    }\n    return ComponentManager.get(\n      component,\n      World.getIndex(World.getIndices(component), entity),\n    );\n  }\n\n  update(...fns: ((world: World) => void)[]) {\n    for (let i = 0, l = fns.length; i < l; i++) fns[i](this);\n    this.dtMilli = performance.now() - this.timeMilli;\n    this.timeMilli += this.dtMilli;\n  }\n\n  query(query: queryT): entityT[] {\n    let andMask = 0, orMask = 0, notMask = 0;\n    if (query.and) {\n      for (let i = 0, l = query.and.length; i < l; i++) {\n        andMask |= 1 << ComponentManager.getId(query.and[i]);\n      }\n    }\n    if (query.or) {\n      for (let i = 0, l = query.or.length; i < l; i++) {\n        orMask |= 1 << ComponentManager.getId(query.or[i]);\n      }\n    }\n    if (query.not) {\n      for (let i = 0, l = query.not.length; i < l; i++) {\n        notMask |= 1 << ComponentManager.getId(query.not[i]);\n      }\n    }\n    const res = [];\n    for (\n      let archetypes = World.archetypeMap.keys().toArray(),\n        l = archetypes.length,\n        i = 0,\n        a = archetypes[i];\n      i < l;\n      i++, a = archetypes[i]\n    ) {\n      if ((a & andMask) == andMask && (a | orMask) > 0 && (a & notMask) == 0) {\n        res.push(...this.localEntities.intersection(World.getArchetype(a)));\n      }\n    }\n    return res;\n  }\n\n  entityCount(): number {\n    return this.localEntities.size;\n  }\n}\n", "{\n\t\"playArea\": {\n\t\t\"width\": 600,\n\t\t\"height\": 400\n\t},\n\t\"paddle\": {\n\t\t\"speed\": 200,\n\t\t\"width\": 10,\n\t\t\"height\": 70,\n\t\t\"padding\": 0.1\n\t},\n\t\"ball\": {\n\t\t\"speed\": 200,\n\t\t\"width\": 10,\n\t\t\"height\": 10\n\t}\n}\n", "import { entityT, World } from \"../../../src/index.ts\";\nimport { default as config } from \"./config.json\" with { type: \"json\" };\n\nconst canvas = document.querySelector(\"canvas\");\nconst ctx = canvas?.getContext(\"2d\");\n\n// components\nconst Rect = {\n  width: 1,\n  height: 1,\n  color: \"white\",\n};\nconst Position = {\n  x: 0,\n  y: 0,\n};\nconst Velocity = {\n  x: 0,\n  y: 0,\n};\nconst Text = {\n  content: \"\",\n  fontSize: 20,\n  padding: 3,\n  color: \"black\",\n  backgroundColor: \"white\",\n};\nconst PlayerControl = {\n  isLeft: true,\n};\n\n// world\nconst w = new World();\n\n// systems\nfunction handlePlayerControl(world: World) {\n  world.query({ and: [Velocity, PlayerControl] }).forEach((e) => {\n    const v = World.getComponent(e, Velocity);\n    const pc = World.getComponent(e, PlayerControl);\n    v.y = 0;\n    if (pc.isLeft) {\n      if (keys[\"w\"]) {\n        v.y -= 1;\n      }\n      if (keys[\"s\"]) {\n        v.y += 1;\n      }\n    } else {\n      if (keys[\"ArrowUp\"]) {\n        v.y -= 1;\n      }\n      if (keys[\"ArrowDown\"]) {\n        v.y += 1;\n      }\n    }\n    for (const pos of Object.values(touches)) {\n      if (ctx) {\n        const old = ctx.fillStyle;\n        ctx.fillStyle = \"green\";\n        ctx.fillRect(pos.x, pos.y, 20, 20);\n        ctx.fillStyle = old;\n      }\n      if (pos.x < config.playArea.width * 0.5) {\n        if (!pc.isLeft) continue;\n      } else {\n        if (pc.isLeft) continue;\n      }\n      if (pos.y < config.playArea.height * 0.5) {\n        v.y -= 1;\n      }\n      if (pos.y > config.playArea.height * 0.5) {\n        v.y += 1;\n      }\n    }\n    v.y = v.y / Math.abs(v.y || 1) * config.paddle.speed;\n  });\n}\n\nfunction drawBackgound() {\n  if (!ctx || !canvas) return;\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n}\n\nfunction move(world: World) {\n  const dt = world.dtMilli / 1000;\n  world.query({ and: [Position, Velocity] }).forEach((e) => {\n    const p = World.getComponent(e, Position);\n    const v = World.getComponent(e, Velocity);\n    p.x += v.x * dt;\n    p.y += v.y * dt;\n  });\n}\n\nfunction drawRects(world: World) {\n  if (!ctx) return;\n  world.query({ and: [Rect, Position] }).forEach((e) => {\n    const p = World.getComponent(e, Position);\n    const r = World.getComponent(e, Rect);\n    const old = ctx.fillStyle;\n    ctx.fillStyle = r.color;\n    ctx.fillRect(\n      Math.floor(p.x - r.width * 0.5),\n      Math.floor(p.y - r.height * 0.5),\n      r.width,\n      r.height,\n    );\n    ctx.fillStyle = old;\n  });\n}\n\nfunction drawTexts(world: World) {\n  if (!ctx) return;\n  world.query({ and: [Text, Position] }).forEach((e) => {\n    const t = World.getComponent(e, Text);\n    const p = World.getComponent(e, Position);\n\n    ctx.font = `${t.fontSize}px serif`;\n    const txtMetric = ctx.measureText(t.content);\n    const old = ctx.fillStyle;\n    ctx.fillStyle = t.backgroundColor;\n    ctx.fillRect(\n      p.x,\n      p.y,\n      t.padding * 2 + txtMetric.width,\n      t.padding * 2 + txtMetric.fontBoundingBoxAscent,\n    );\n    ctx.fillStyle = t.color;\n    ctx.fillText(\n      t.content,\n      p.x + t.padding,\n      p.y + t.padding + txtMetric.fontBoundingBoxAscent,\n    );\n    ctx.fillStyle = old;\n  });\n}\n\nfunction checkCollision(world: World) {\n  const rects = world.query({ and: [Position, Rect] });\n  rects.forEach((e) => {\n    const p = World.getComponent(e, Position);\n    const r = World.getComponent(e, Rect);\n    rects.forEach((other) => {\n      if (other == e) return;\n      const p1 = World.getComponent(other, Position);\n      const r1 = World.getComponent(other, Rect);\n      if (\n        (p.x - p1.x) ** 2 < ((r.width + r1.width) * 0.5) ** 2 &&\n        (p.y - p1.y) ** 2 < ((r.height + r1.height) * 0.5) ** 2\n      ) {\n        onCollision(e, other);\n      }\n    });\n  });\n}\n\nfunction checkGoal() {\n  const p = World.getComponent(ball, Position);\n  const r = World.getComponent(ball, Rect);\n  if (p.x - r.width > config.playArea.width) {\n    scores.left++;\n    onGoal();\n  }\n  if (p.x + r.width < 0) {\n    scores.right++;\n    onGoal();\n  }\n}\n\n// entity\nfunction addPlayerPaddle(\n  x: number,\n  y: number,\n  isLeft: boolean,\n): entityT {\n  const e = addRect(x, y, config.paddle.width, config.paddle.height);\n  const pc = World.addComponent(e, PlayerControl);\n  pc.isLeft = isLeft;\n  return w.addEntity(e);\n}\n\nfunction addRect(\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  color: string = \"white\",\n) {\n  const e = World.createEntity();\n  const p = World.addComponent(e, Position);\n  const v = World.addComponent(e, Velocity);\n  const r = World.addComponent(e, Rect);\n  p.x = x;\n  p.y = y;\n  r.width = width;\n  r.height = height;\n  r.color = color;\n  return w.addEntity(e);\n}\n\nfunction addText(\n  txt: string,\n  x: number = 0,\n  y: number = 0,\n  txtColor: string = \"black\",\n  fontSize: number = 20,\n  backgroundColor: string = \"rgba(0,0,0,0)\",\n): entityT {\n  const e = World.createEntity();\n  const t = World.addComponent(e, Text);\n  const p = World.addComponent(e, Position);\n  t.content = txt;\n  t.color = txtColor;\n  t.fontSize = fontSize;\n  t.backgroundColor = backgroundColor;\n  p.x = x;\n  p.y = y;\n  return w.addEntity(e);\n}\n\nif (canvas) {\n  canvas.width = config.playArea.width;\n  canvas.height = config.playArea.height;\n  //canvas.style.imageRendering = \"pixelated\";\n}\n\nconst keys: Record<KeyboardEvent[\"key\"], boolean> = {};\nglobalThis.onkeydown = (e) => {\n  keys[e.key] = true;\n};\nglobalThis.onkeyup = (e) => {\n  delete keys[e.key];\n};\n\n// multi touch\nconst touches: Record<number, { x: number; y: number }> = {};\nglobalThis.window.ontouchmove = globalThis.window.ontouchstart = (e) => {\n  if (!canvas) return;\n  const rect = canvas.getBoundingClientRect();\n  for (let i = 0, l = e.changedTouches.length; i < l; i++) {\n    const p = touches[e.changedTouches[i].identifier] = {\n      x: e.changedTouches[i].clientX,\n      y: e.changedTouches[i].clientY,\n    };\n    p.x -= rect.left;\n    p.y -= rect.top;\n    if (innerWidth / innerHeight < canvas.width / canvas.height) {\n      p.x *= canvas.width / innerWidth;\n      p.y *= canvas.width / innerWidth;\n    } else {\n      p.x *= canvas.height / innerHeight;\n      p.y *= canvas.height / innerHeight;\n    }\n  }\n};\nglobalThis.window.ontouchend = (e) => {\n  for (let i = 0, l = e.changedTouches.length; i < l; i++) {\n    delete touches[e.changedTouches[i].identifier];\n  }\n};\n\n//bottom wall\naddRect(\n  config.playArea.width * 0.5,\n  config.playArea.height * 0,\n  config.playArea.width,\n  10,\n);\n//top wall\naddRect(\n  config.playArea.width * 0.5,\n  config.playArea.height * 1,\n  config.playArea.width,\n  10,\n);\n\nconst ball = addRect(\n  config.playArea.width * 0.5,\n  config.playArea.height * 0.5,\n  config.ball.width,\n  config.ball.height,\n);\n\nconst playerLeft = addPlayerPaddle(\n  config.playArea.width * config.paddle.padding,\n  config.playArea.height * 0.5,\n  true,\n);\nconst playerRight = addPlayerPaddle(\n  config.playArea.width * (1 - config.paddle.padding),\n  config.playArea.height * 0.5,\n  false,\n);\n\nfunction reset() {\n  const ballV = World.getComponent(ball, Velocity);\n  const ballP = World.getComponent(ball, Position);\n  ballP.x = config.playArea.width * 0.5;\n  ballP.y = config.playArea.height * 0.5;\n  ballV.x = config.ball.speed;\n  ballV.y = 0;\n  let rad = Math.random() * 40 / 180 * Math.PI;\n  rad *= Math.random() > 0.5 ? 1 : -1;\n  rad += Math.random() > 0.5 ? Math.PI : 0;\n  rotate(ballV, rad);\n  const pLP = World.getComponent(playerLeft, Position);\n  const pRP = World.getComponent(playerRight, Position);\n  pLP.y = config.playArea.height * 0.5;\n  pRP.y = config.playArea.height * 0.5;\n}\n\nfunction rotate(vec2: { x: number; y: number }, rad: number) {\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n  const x = vec2.x;\n  const y = vec2.y;\n  vec2.x = c * x - s * y;\n  vec2.y = s * x + c * y;\n}\n\nfunction onGoal() {\n  const t = World.getComponent(goalTexts, Text);\n  t.content = `${scores.left} : ${scores.right}`;\n  reset();\n}\n\nfunction onCollision(e: entityT, other: entityT) {\n  const p = World.getComponent(e, Position);\n  const p1 = World.getComponent(other, Position);\n  const r = World.getComponent(e, Rect);\n  const r1 = World.getComponent(other, Rect);\n  const v = World.getComponent(e, Velocity);\n  const v1 = World.getComponent(other, Velocity);\n\n  const vMag = (v.x ** 2 + v.y ** 2) ** 0.5;\n  const vNx = v.x / vMag, vNy = v.y / vMag;\n  //p.x+vNx*t=someX,t=(someX-p.x)/vNx\n  let t = 0;\n  if (vNx != 0) {\n    t = (p1.x - (r1.width + r.width) * 0.5 - p.x) / vNx;\n    if (\n      p.x < p1.x && t < 0 &&\n      p.y + t * vNy < p1.y + (r1.height + r.height) * 0.5 &&\n      p.y + t * vNy > p1.y - (r1.height + r.height) * 0.5\n    ) {\n      p.x += t * vNx;\n      p.y += t * vNy;\n      v.x > 0 && (v.x *= -1);\n      v.y += v1.y;\n    }\n    t = (p1.x + (r1.width + r.width) * 0.5 - p.x) / vNx;\n    if (\n      p.x > p1.x && t < 0 &&\n      p.y + t * vNy < p1.y + (r1.height + r.height) * 0.5 &&\n      p.y + t * vNy > p1.y - (r1.height + r.height) * 0.5\n    ) {\n      p.x += t * vNx;\n      p.y += t * vNy;\n      v.x < 0 && (v.x *= -1);\n      v.y += v1.y;\n    }\n  }\n  if (vNy != 0) {\n    t = (p1.y - (r1.height + r.height) * 0.5 - p.y) / vNy;\n    if (\n      p.y < p1.y && t < 0 &&\n      p.x + t * vNx < p1.x + (r1.width + r.width) * 0.5 &&\n      p.x + t * vNx > p1.x - (r1.width + r.width) * 0.5\n    ) {\n      p.x += t * vNx;\n      p.y += t * vNy;\n      v.y > 0 && (v.y *= -1);\n    }\n    t = (p1.y + (r1.height + r.height) * 0.5 - p.y) / vNy;\n    if (\n      p.y > p1.y && t < 0 &&\n      p.x + t * vNx < p1.x + (r1.width + r.width) * 0.5 &&\n      p.x + t * vNx > p1.x - (r1.width + r.width) * 0.5\n    ) {\n      p.x += t * vNx;\n      p.y += t * vNy;\n      v.y < 0 && (v.y *= -1);\n    }\n  }\n}\n\nconst scores = { left: 0, right: 0 };\n\nconst goalTexts = addText(`${scores.left} : ${scores.right}`);\nconst t = World.getComponent(goalTexts, Text);\nt.color = \"white\";\nt.fontSize = 40;\n\nreset();\n\n(function update() {\n  w.update(\n    drawBackgound,\n    drawRects,\n    drawTexts,\n    move,\n    handlePlayerControl,\n    checkCollision,\n    checkGoal,\n  );\n  requestAnimationFrame(update);\n})();\n"],
  "mappings": "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",
  "names": ["ObjectPool", "objectConstructor", "obj", "object", "v", "index", "removed", "ComponentManager", "_ComponentManager", "component", "ObjectPool", "index", "EntityManager", "_EntityManager", "ObjectPool", "entity", "index", "World", "_World", "entity", "EntityManager", "mask", "a", "set", "i", "l", "types", "ComponentManager", "indices", "owners", "backEntity", "entityIdx", "compId", "removeFn", "component", "idx", "index", "owner", "removed", "e", "fns", "query", "andMask", "orMask", "notMask", "res", "archetypes", "config_default", "canvas", "ctx", "Rect", "Position", "Velocity", "Text", "PlayerControl", "w", "World", "handlePlayerControl", "world", "e", "v", "pc", "keys", "pos", "touches", "old", "config_default", "drawBackgound", "move", "dt", "p", "drawRects", "r", "drawTexts", "t", "txtMetric", "checkCollision", "rects", "other", "p1", "r1", "onCollision", "checkGoal", "ball", "scores", "onGoal", "addPlayerPaddle", "x", "y", "isLeft", "addRect", "width", "height", "color", "addText", "txt", "txtColor", "fontSize", "backgroundColor", "rect", "i", "l", "playerLeft", "playerRight", "reset", "ballV", "ballP", "rad", "rotate", "pLP", "pRP", "vec2", "s", "c", "goalTexts", "v1", "vMag", "vNx", "vNy", "update"]
}
