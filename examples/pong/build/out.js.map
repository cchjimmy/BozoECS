{
  "version": 3,
  "sources": ["../../../src/pool.ts", "../../../src/component.ts", "../../../src/world.ts", "../src/config.json", "../src/main.ts"],
  "sourcesContent": ["export class ObjectPoolMap<T> {\n  private storage: T[] = [];\n  private indices: Map<unknown, number> = new Map();\n  private objectFactory: () => T;\n  private size = 0;\n\n  constructor(objectFactory: () => T) {\n    this.objectFactory = objectFactory;\n  }\n\n  len() {\n    return this.size;\n  }\n\n  addObj(key: unknown): T {\n    let obj;\n    if (this.size < this.storage.length) {\n      obj = this.storage[this.size];\n    } else {\n      obj = this.objectFactory();\n      this.storage.push(obj);\n    }\n    this.indices.set(key, this.size);\n    this.size++;\n    return obj;\n  }\n\n  removeObj(key: unknown): boolean {\n    const index = this.indices.get(key) ?? -1;\n    if (index < 0 || index >= this.size) return false;\n    const removed = this.storage[index];\n    // swap with last to maintain packed\n    this.storage[index] = this.storage[this.size - 1];\n    this.storage[this.size - 1] = removed;\n    for (const [k, v] of this.indices) {\n      if (v != this.size - 1) continue;\n      this.indices.set(k, index);\n      break;\n    }\n    this.indices.delete(key);\n    this.size--;\n    return true;\n  }\n\n  getObj(key: unknown): T {\n    const index = this.indices.get(key) ?? -1;\n    if (index < 0 || index >= this.size) throw new Error(\"Index out of range.\");\n    return this.storage[index];\n  }\n}\n", "import { ObjectPoolMap } from \"./pool.ts\";\nimport { entityT } from \"./entity.ts\";\n\nexport class ComponentManager {\n  private static pools: Map<object, unknown> = new Map();\n  private static idMap: Map<object, number> = new Map();\n\n  static register<T extends object>(component: T) {\n    if (ComponentManager.pools.has(component)) return;\n    ComponentManager.idMap.set(component, ComponentManager.idMap.size);\n    ComponentManager.pools.set(\n      component,\n      new ObjectPoolMap<T>(() => ({ ...component })),\n    );\n  }\n\n  static getId<T extends object>(component: T): number {\n    return ComponentManager.idMap.get(component) ?? -1;\n  }\n\n  static add<T extends object>(key: entityT, component: T): T {\n    return Object.assign(\n      (ComponentManager.pools.get(component) as ObjectPoolMap<T>).addObj(key),\n      component,\n    );\n  }\n\n  static delete<T extends object>(key: entityT, component: T): boolean {\n    return (\n      ComponentManager.pools.get(component) as ObjectPoolMap<T>\n    ).removeObj(key);\n  }\n\n  static get<T extends object>(key: entityT, component: T): T {\n    return (ComponentManager.pools.get(component) as ObjectPoolMap<T>).getObj(\n      key,\n    );\n  }\n\n  static len<T extends object>(component: T): number {\n    return (ComponentManager.pools.get(component) as ObjectPoolMap<T>).len();\n  }\n\n  static typeLen(): number {\n    return ComponentManager.pools.size;\n  }\n\n  static types(): object[] {\n    return ComponentManager.pools.keys().toArray();\n  }\n}\n", "import { ComponentManager } from \"./component.ts\";\nimport { entityT } from \"./entity.ts\";\n\nexport type queryT = Partial<Record<\"and\" | \"not\", object[]>>;\n\nexport class World {\n  private static maskMap: Map<number, number> = new Map();\n  private static archetypeMap: Map<number, Set<entityT>> = new Map();\n  private static worlds: World[] = [];\n  private static entitiesToDelete: entityT[] = [];\n\n  private localEntities: Set<entityT> = new Set();\n\n  constructor() {\n    World.worlds.push(this);\n  }\n\n  static createEntity(): entityT {\n    const entity = Math.random();\n    World.maskMap.set(entity, 0);\n    World.getArchetype(0).add(entity);\n    return entity;\n  }\n\n  static copyEntity(entity: entityT): entityT {\n    const copy = Math.random();\n    const compTypes = ComponentManager.types();\n    const mask = this.maskMap.get(entity) ?? 0;\n    World.maskMap.set(copy, mask);\n    World.getArchetype(mask).add(copy);\n    for (let i = 0, l = compTypes.length; i < l; i++) {\n      if (!(mask & (1 << i))) continue;\n      Object.assign(\n        ComponentManager.add(copy, compTypes[i]),\n        ComponentManager.get(entity, compTypes[i]),\n      );\n    }\n    return copy;\n  }\n\n  private static getArchetype(mask: number): Set<entityT> {\n    const a = World.archetypeMap.get(mask) ?? new Set();\n    World.archetypeMap.set(mask, a);\n    return a;\n  }\n\n  static deleteEntity(entity: entityT) {\n    World.entitiesToDelete.push(entity);\n  }\n\n  addEntity(entity: entityT = World.createEntity()): entityT {\n    this.localEntities.add(entity);\n    return entity;\n  }\n\n  removeEntity(entity: entityT) {\n    this.localEntities.delete(entity);\n  }\n\n  static registerComponent<T extends object>(component: T): typeof World {\n    ComponentManager.register(component);\n    return World;\n  }\n\n  static hasComponent<T extends object>(\n    entity: entityT,\n    component: T,\n  ): boolean {\n    return (\n      ((World.maskMap.get(entity) ?? 0) &\n        (1 << ComponentManager.getId(component))) >\n      0\n    );\n  }\n\n  static addComponent<T extends object>(\n    entity: entityT,\n    component: T,\n    values: Partial<T> = component,\n  ): T {\n    World.registerComponent(component);\n    let mask = World.maskMap.get(entity) ?? 0;\n    const compId = ComponentManager.getId(component);\n    if ((mask & (1 << compId)) != 0) {\n      return Object.assign(ComponentManager.get(entity, component), values);\n    }\n    World.getArchetype(mask).delete(entity);\n    mask |= 1 << compId;\n    World.maskMap.set(entity, mask);\n    World.getArchetype(mask).add(entity);\n    return Object.assign(ComponentManager.add(entity, component), values);\n  }\n\n  static removeComponent<T extends object>(\n    entity: entityT,\n    component: T,\n  ): boolean {\n    World.registerComponent(component);\n    let mask = World.maskMap.get(entity) ?? 0;\n    const compId = ComponentManager.getId(component);\n    if ((mask & (1 << compId)) == 0) return false;\n    World.getArchetype(mask).delete(entity);\n    mask &= ~(1 << compId);\n    World.maskMap.set(entity, mask);\n    World.getArchetype(mask).add(entity);\n    return ComponentManager.delete(entity, component);\n  }\n\n  static getComponent<T extends object>(entity: entityT, component: T): T {\n    return ComponentManager.get(entity, component);\n  }\n\n  update(...fns: ((world: World) => void)[]) {\n    for (let i = 0, l = fns.length; i < l; i++) fns[i](this);\n    while (World.entitiesToDelete.length) {\n      const entity = World.entitiesToDelete.pop() as entityT;\n      for (let i = 0, l = World.worlds.length; i < l; i++) {\n        World.worlds[i].localEntities.delete(entity);\n      }\n      const types = ComponentManager.types();\n      const mask = World.maskMap.get(entity) ?? 0;\n      World.getArchetype(mask).delete(entity);\n      for (let i = 0, l = types.length; i < l; i++) {\n        if (!(mask & (1 << i))) continue;\n        ComponentManager.delete(entity, types[i]);\n      }\n    }\n  }\n\n  query(query: queryT): entityT[] {\n    let andMask = 0,\n      notMask = 0;\n    if (query.and) {\n      for (let i = 0, l = query.and.length; i < l; i++) {\n        andMask |= 1 << ComponentManager.getId(query.and[i]);\n      }\n    }\n    if (query.not) {\n      for (let i = 0, l = query.not.length; i < l; i++) {\n        notMask |= 1 << ComponentManager.getId(query.not[i]);\n      }\n    }\n    const res = [];\n    for (\n      let archetypes = World.archetypeMap.keys().toArray(),\n        l = archetypes.length,\n        i = 0;\n      i < l;\n      i++\n    ) {\n      const a = archetypes[i];\n      const set = World.getArchetype(a);\n      if (set.size == 0) continue;\n      (a & andMask) == andMask && (a & notMask) == 0 && res.push(...set);\n    }\n    return [...this.localEntities.intersection(new Set(res))];\n  }\n\n  entityCount(): number {\n    return this.localEntities.size;\n  }\n}\n", "{\n\t\"playArea\": {\n\t\t\"width\": 600,\n\t\t\"height\": 400\n\t},\n\t\"paddle\": {\n\t\t\"speed\": 200,\n\t\t\"width\": 10,\n\t\t\"height\": 70,\n\t\t\"padding\": 0.1\n\t},\n\t\"ball\": {\n\t\t\"speed\": 200,\n\t\t\"width\": 10,\n\t\t\"height\": 10\n\t}\n}\n", "import { entityT, World } from \"../../../src/index.ts\";\nimport { default as config } from \"./config.json\" with { type: \"json\" };\n\nconst canvas = document.querySelector(\"canvas\");\nconst ctx = canvas?.getContext(\"2d\");\n\n// components\nconst Rect = {\n  width: 1,\n  height: 1,\n  color: \"white\",\n};\nconst Position = {\n  x: 0,\n  y: 0,\n};\nconst Velocity = {\n  x: 0,\n  y: 0,\n};\nconst Text = {\n  content: \"\",\n  fontSize: 20,\n  padding: 3,\n  color: \"black\",\n  backgroundColor: \"white\",\n};\nconst PlayerControl = {\n  isLeft: true,\n};\n\n// world\nconst w = new World();\n\n// systems\nfunction handlePlayerControl(world: World) {\n  world.query({ and: [Velocity, PlayerControl] }).forEach((e) => {\n    const v = World.getComponent(e, Velocity);\n    const pc = World.getComponent(e, PlayerControl);\n    v.y = 0;\n    if (pc.isLeft) {\n      if (keys[\"w\"]) {\n        v.y -= 1;\n      }\n      if (keys[\"s\"]) {\n        v.y += 1;\n      }\n    } else {\n      if (keys[\"ArrowUp\"]) {\n        v.y -= 1;\n      }\n      if (keys[\"ArrowDown\"]) {\n        v.y += 1;\n      }\n    }\n    for (const pos of Object.values(touches)) {\n      if (ctx) {\n        const old = ctx.fillStyle;\n        ctx.fillStyle = \"green\";\n        ctx.fillRect(pos.x, pos.y, 20, 20);\n        ctx.fillStyle = old;\n      }\n      if (pos.x < config.playArea.width * 0.5) {\n        if (!pc.isLeft) continue;\n      } else {\n        if (pc.isLeft) continue;\n      }\n      if (pos.y < config.playArea.height * 0.5) {\n        v.y -= 1;\n      }\n      if (pos.y > config.playArea.height * 0.5) {\n        v.y += 1;\n      }\n    }\n    v.y = (v.y / Math.abs(v.y || 1)) * config.paddle.speed;\n  });\n}\n\nfunction drawBackgound() {\n  if (!ctx || !canvas) return;\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n}\n\nfunction move(world: World) {\n  const dt = dtMilli / 1000;\n  world.query({ and: [Position, Velocity] }).forEach((e) => {\n    const p = World.getComponent(e, Position);\n    const v = World.getComponent(e, Velocity);\n    p.x += v.x * dt;\n    p.y += v.y * dt;\n  });\n}\n\nfunction drawRects(world: World) {\n  if (!ctx) return;\n  world.query({ and: [Rect, Position] }).forEach((e) => {\n    const p = World.getComponent(e, Position);\n    const r = World.getComponent(e, Rect);\n    const old = ctx.fillStyle;\n    ctx.fillStyle = r.color;\n    ctx.fillRect(\n      Math.floor(p.x - r.width * 0.5),\n      Math.floor(p.y - r.height * 0.5),\n      r.width,\n      r.height,\n    );\n    ctx.fillStyle = old;\n  });\n}\n\nfunction drawTexts(world: World) {\n  if (!ctx) return;\n  world.query({ and: [Text, Position] }).forEach((e) => {\n    const t = World.getComponent(e, Text);\n    const p = World.getComponent(e, Position);\n\n    ctx.font = `${t.fontSize}px serif`;\n    const txtMetric = ctx.measureText(t.content);\n    const old = ctx.fillStyle;\n    ctx.fillStyle = t.backgroundColor;\n    ctx.fillRect(\n      p.x,\n      p.y,\n      t.padding * 2 + txtMetric.width,\n      t.padding * 2 + txtMetric.fontBoundingBoxAscent,\n    );\n    ctx.fillStyle = t.color;\n    ctx.fillText(\n      t.content,\n      p.x + t.padding,\n      p.y + t.padding + txtMetric.fontBoundingBoxAscent,\n    );\n    ctx.fillStyle = old;\n  });\n}\n\nfunction checkCollision(world: World) {\n  const rects = world.query({ and: [Position, Rect] });\n  rects.forEach((e) => {\n    const p = World.getComponent(e, Position);\n    const r = World.getComponent(e, Rect);\n    rects.forEach((other) => {\n      if (other == e) return;\n      const p1 = World.getComponent(other, Position);\n      const r1 = World.getComponent(other, Rect);\n      if (\n        (p.x - p1.x) ** 2 < ((r.width + r1.width) * 0.5) ** 2 &&\n        (p.y - p1.y) ** 2 < ((r.height + r1.height) * 0.5) ** 2\n      ) {\n        onCollision(e, other);\n      }\n    });\n  });\n}\n\nfunction checkGoal() {\n  const p = World.getComponent(ball, Position);\n  const r = World.getComponent(ball, Rect);\n  if (p.x - r.width > config.playArea.width) {\n    scores.left++;\n    onGoal();\n  }\n  if (p.x + r.width < 0) {\n    scores.right++;\n    onGoal();\n  }\n}\n\n// entity\nfunction addPlayerPaddle(x: number, y: number, isLeft: boolean): entityT {\n  const e = addRect(x, y, config.paddle.width, config.paddle.height);\n  const pc = World.addComponent(e, PlayerControl);\n  pc.isLeft = isLeft;\n  return w.addEntity(e);\n}\n\nfunction addRect(\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  color: string = \"white\",\n) {\n  const e = World.createEntity();\n  const p = World.addComponent(e, Position);\n  const v = World.addComponent(e, Velocity);\n  const r = World.addComponent(e, Rect);\n  p.x = x;\n  p.y = y;\n  r.width = width;\n  r.height = height;\n  r.color = color;\n  return w.addEntity(e);\n}\n\nfunction addText(\n  txt: string,\n  x: number = 0,\n  y: number = 0,\n  txtColor: string = \"black\",\n  fontSize: number = 20,\n  backgroundColor: string = \"rgba(0,0,0,0)\",\n): entityT {\n  const e = World.createEntity();\n  const t = World.addComponent(e, Text);\n  const p = World.addComponent(e, Position);\n  t.content = txt;\n  t.color = txtColor;\n  t.fontSize = fontSize;\n  t.backgroundColor = backgroundColor;\n  p.x = x;\n  p.y = y;\n  return w.addEntity(e);\n}\n\nif (canvas) {\n  canvas.width = config.playArea.width;\n  canvas.height = config.playArea.height;\n  //canvas.style.imageRendering = \"pixelated\";\n}\n\nconst keys: Record<KeyboardEvent[\"key\"], boolean> = {};\nglobalThis.onkeydown = (e) => {\n  keys[e.key] = true;\n};\nglobalThis.onkeyup = (e) => {\n  delete keys[e.key];\n};\n\n// multi touch\nconst touches: Record<number, { x: number; y: number }> = {};\nglobalThis.window.ontouchmove = globalThis.window.ontouchstart = (e) => {\n  if (!canvas) return;\n  const rect = canvas.getBoundingClientRect();\n  for (let i = 0, l = e.changedTouches.length; i < l; i++) {\n    const p = (touches[e.changedTouches[i].identifier] = {\n      x: e.changedTouches[i].clientX,\n      y: e.changedTouches[i].clientY,\n    });\n    p.x -= rect.left;\n    p.y -= rect.top;\n    if (innerWidth / innerHeight < canvas.width / canvas.height) {\n      p.x *= canvas.width / innerWidth;\n      p.y *= canvas.width / innerWidth;\n    } else {\n      p.x *= canvas.height / innerHeight;\n      p.y *= canvas.height / innerHeight;\n    }\n  }\n};\nglobalThis.window.ontouchend = (e) => {\n  for (let i = 0, l = e.changedTouches.length; i < l; i++) {\n    delete touches[e.changedTouches[i].identifier];\n  }\n};\n\n//bottom wall\naddRect(\n  config.playArea.width * 0.5,\n  config.playArea.height * 0,\n  config.playArea.width,\n  10,\n);\n//top wall\naddRect(\n  config.playArea.width * 0.5,\n  config.playArea.height * 1,\n  config.playArea.width,\n  10,\n);\n\nconst ball = addRect(\n  config.playArea.width * 0.5,\n  config.playArea.height * 0.5,\n  config.ball.width,\n  config.ball.height,\n);\n\nconst playerLeft = addPlayerPaddle(\n  config.playArea.width * config.paddle.padding,\n  config.playArea.height * 0.5,\n  true,\n);\nconst playerRight = addPlayerPaddle(\n  config.playArea.width * (1 - config.paddle.padding),\n  config.playArea.height * 0.5,\n  false,\n);\n\nfunction reset() {\n  const ballV = World.getComponent(ball, Velocity);\n  const ballP = World.getComponent(ball, Position);\n  ballP.x = config.playArea.width * 0.5;\n  ballP.y = config.playArea.height * 0.5;\n  ballV.x = config.ball.speed;\n  ballV.y = 0;\n  let rad = ((Math.random() * 40) / 180) * Math.PI;\n  rad *= Math.random() > 0.5 ? 1 : -1;\n  rad += Math.random() > 0.5 ? Math.PI : 0;\n  rotate(ballV, rad);\n  const pLP = World.getComponent(playerLeft, Position);\n  const pRP = World.getComponent(playerRight, Position);\n  pLP.y = config.playArea.height * 0.5;\n  pRP.y = config.playArea.height * 0.5;\n}\n\nfunction rotate(vec2: { x: number; y: number }, rad: number) {\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n  const x = vec2.x;\n  const y = vec2.y;\n  vec2.x = c * x - s * y;\n  vec2.y = s * x + c * y;\n}\n\nfunction onGoal() {\n  const t = World.getComponent(goalTexts, Text);\n  t.content = `${scores.left} : ${scores.right}`;\n  reset();\n}\n\nfunction onCollision(e: entityT, other: entityT) {\n  const p = World.getComponent(e, Position);\n  const p1 = World.getComponent(other, Position);\n  const r = World.getComponent(e, Rect);\n  const r1 = World.getComponent(other, Rect);\n  const v = World.getComponent(e, Velocity);\n  const v1 = World.getComponent(other, Velocity);\n\n  const vMag = (v.x ** 2 + v.y ** 2) ** 0.5;\n  const vNx = v.x / vMag,\n    vNy = v.y / vMag;\n  //p.x+vNx*t=someX,t=(someX-p.x)/vNx\n  let t = 0;\n  if (vNx != 0) {\n    t = (p1.x - (r1.width + r.width) * 0.5 - p.x) / vNx;\n    if (\n      p.x < p1.x &&\n      t < 0 &&\n      p.y + t * vNy < p1.y + (r1.height + r.height) * 0.5 &&\n      p.y + t * vNy > p1.y - (r1.height + r.height) * 0.5\n    ) {\n      p.x += t * vNx;\n      p.y += t * vNy;\n      v.x > 0 && (v.x *= -1);\n      v.y += v1.y;\n    }\n    t = (p1.x + (r1.width + r.width) * 0.5 - p.x) / vNx;\n    if (\n      p.x > p1.x &&\n      t < 0 &&\n      p.y + t * vNy < p1.y + (r1.height + r.height) * 0.5 &&\n      p.y + t * vNy > p1.y - (r1.height + r.height) * 0.5\n    ) {\n      p.x += t * vNx;\n      p.y += t * vNy;\n      v.x < 0 && (v.x *= -1);\n      v.y += v1.y;\n    }\n  }\n  if (vNy != 0) {\n    t = (p1.y - (r1.height + r.height) * 0.5 - p.y) / vNy;\n    if (\n      p.y < p1.y &&\n      t < 0 &&\n      p.x + t * vNx < p1.x + (r1.width + r.width) * 0.5 &&\n      p.x + t * vNx > p1.x - (r1.width + r.width) * 0.5\n    ) {\n      p.x += t * vNx;\n      p.y += t * vNy;\n      v.y > 0 && (v.y *= -1);\n    }\n    t = (p1.y + (r1.height + r.height) * 0.5 - p.y) / vNy;\n    if (\n      p.y > p1.y &&\n      t < 0 &&\n      p.x + t * vNx < p1.x + (r1.width + r.width) * 0.5 &&\n      p.x + t * vNx > p1.x - (r1.width + r.width) * 0.5\n    ) {\n      p.x += t * vNx;\n      p.y += t * vNy;\n      v.y < 0 && (v.y *= -1);\n    }\n  }\n}\n\nconst scores = { left: 0, right: 0 };\n\nconst goalTexts = addText(`${scores.left} : ${scores.right}`);\nconst t = World.getComponent(goalTexts, Text);\nt.color = \"white\";\nt.fontSize = 40;\n\nlet dtMilli = 0;\nlet timeMilli = 0;\n\nreset();\n\n(function update() {\n  w.update(\n    drawBackgound,\n    drawRects,\n    drawTexts,\n    move,\n    handlePlayerControl,\n    checkCollision,\n    checkGoal,\n  );\n  dtMilli = performance.now() - timeMilli;\n  timeMilli += dtMilli;\n  requestAnimationFrame(update);\n})();\n"],
  "mappings": "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",
  "names": ["ObjectPoolMap", "objectFactory", "key", "obj", "index", "removed", "k", "v", "ComponentManager", "_ComponentManager", "component", "ObjectPoolMap", "key", "World", "_World", "entity", "copy", "compTypes", "ComponentManager", "mask", "i", "l", "a", "component", "values", "compId", "fns", "types", "query", "andMask", "notMask", "res", "archetypes", "set", "config_default", "canvas", "ctx", "Rect", "Position", "Velocity", "Text", "PlayerControl", "w", "World", "handlePlayerControl", "world", "v", "pc", "keys", "pos", "touches", "old", "config_default", "drawBackgound", "move", "dt", "dtMilli", "e", "p", "drawRects", "r", "drawTexts", "txtMetric", "checkCollision", "rects", "other", "p1", "r1", "onCollision", "checkGoal", "ball", "scores", "onGoal", "addPlayerPaddle", "x", "y", "isLeft", "addRect", "width", "height", "color", "addText", "txt", "txtColor", "fontSize", "backgroundColor", "t", "rect", "i", "l", "playerLeft", "playerRight", "reset", "ballV", "ballP", "rad", "rotate", "pLP", "pRP", "vec2", "s", "c", "goalTexts", "v1", "vMag", "vNx", "vNy", "timeMilli", "update"]
}
