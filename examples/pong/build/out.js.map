{
  "version": 3,
  "sources": ["../../../src/pool.ts", "../../../src/component.ts", "../../../src/entity.ts", "../../../src/world.ts", "../src/config.json", "../src/main.ts"],
  "sourcesContent": ["export class ObjectPool<T> {\n  private storage: T[] = [];\n  private objectFactory: () => T;\n  private size = 0;\n\n  constructor(objectFactory: () => T) {\n    this.objectFactory = objectFactory;\n  }\n\n  len() {\n    return this.size;\n  }\n\n  addObj(): T {\n    let obj;\n    if (this.size < this.storage.length) {\n      obj = this.storage[this.size];\n    } else {\n      obj = this.objectFactory();\n      this.storage.push(obj);\n    }\n    this.size++;\n    return obj;\n  }\n\n  findIndex(object: T): number {\n    return this.storage.findIndex((v) => v == object);\n  }\n\n  removeObj(index: number): T {\n    if (index < 0 || index >= this.size) throw new Error(\"Index out of range.\");\n    const removed = this.storage[index];\n    // swap with last to maintain packed\n    this.storage[index] = this.storage[this.storage.length - 1];\n    this.storage[this.storage.length - 1] = removed;\n    this.size--;\n    return removed;\n  }\n\n  getObj(index: number): T {\n    if (index < 0 || index >= this.size) throw new Error(\"Index out of range.\");\n    return this.storage[index];\n  }\n}\n", "import { ObjectPool } from \"./pool.ts\";\n\nexport class ComponentManager {\n  private static pools: Map<object, unknown> = new Map();\n  private static idMap: Map<object, number> = new Map();\n\n  static register<T extends object>(component: T) {\n    ComponentManager.idMap.set(component, ComponentManager.idMap.size);\n    ComponentManager.pools.set(\n      component,\n      new ObjectPool<T>(() => ({ ...component })),\n    );\n  }\n\n  static getId<T extends object>(component: T): number {\n    return ComponentManager.idMap.get(component) ?? -1;\n  }\n\n  static add<T extends object>(component: T): T {\n    return Object.assign(\n      (ComponentManager.pools.get(component) as ObjectPool<T>).addObj(),\n      component,\n    );\n  }\n\n  static delete<T extends object>(component: T, index: number): T {\n    return (ComponentManager.pools.get(component) as ObjectPool<T>).removeObj(\n      index,\n    );\n  }\n\n  static get<T extends object>(component: T, index: number): T {\n    return (ComponentManager.pools.get(component) as ObjectPool<T>).getObj(\n      index,\n    );\n  }\n\n  static len<T extends object>(component: T): number {\n    return (ComponentManager.pools.get(component) as ObjectPool<T>).len();\n  }\n\n  static typeLen(): number {\n    return ComponentManager.pools.size;\n  }\n\n  static types(): object[] {\n    return ComponentManager.pools.keys().toArray();\n  }\n}\n", "import { ObjectPool } from \"./pool.ts\";\n\nexport type entityT = number;\n\nexport class EntityManager {\n  static nextId = 0;\n  static pool = new ObjectPool<entityT>(() => EntityManager.nextId++);\n\n  static add(): entityT {\n    return EntityManager.pool.addObj();\n  }\n\n  static findIndex(entity: entityT): number {\n    return EntityManager.pool.findIndex(entity);\n  }\n\n  static delete(index: number): entityT {\n    return EntityManager.pool.removeObj(index);\n  }\n}\n", "import { ComponentManager } from \"./component.ts\";\nimport { EntityManager, entityT } from \"./entity.ts\";\n\nexport type queryT = Partial<Record<\"and\" | \"not\", object[]>>;\n\nexport class World {\n  private static indexMap: Map<object, Map<number, number>> = new Map();\n  private static maskMap: Map<number, number> = new Map();\n  private static archetypeMap: Map<number, Set<entityT>> = new Map();\n  private static worlds: World[] = [];\n\n  private localEntities: Set<entityT> = new Set();\n  timeMilli = 0;\n  dtMilli = 0;\n\n  constructor() {\n    World.worlds.push(this);\n  }\n\n  static createEntity(): entityT {\n    const entity = EntityManager.add();\n    World.maskMap.set(entity, 0);\n    World.getArchetype(0).add(entity);\n    return entity;\n  }\n\n  static copyEntity(entity: entityT): entityT {\n    const copy = EntityManager.add();\n    const compTypes = ComponentManager.types();\n    const mask = this.maskMap.get(entity) as number;\n    for (let i = 0, l = compTypes.length; i < l; i++) {\n      if (!(mask & (1 << i))) continue;\n      World.addComponent(\n        copy,\n        compTypes[i],\n        World.getComponent(entity, compTypes[i]),\n      );\n    }\n    return copy;\n  }\n\n  private static getArchetype(mask: number): Set<entityT> {\n    const a = World.archetypeMap.get(mask) ?? new Set();\n    World.archetypeMap.set(mask, a);\n    return a;\n  }\n\n  static deleteEntity(entity: entityT) {\n    for (let i = 0, l = World.worlds.length; i < l; i++) {\n      World.worlds[i].removeEntity(entity);\n    }\n    const types = ComponentManager.types();\n    const mask = World.maskMap.get(entity) as number;\n    for (let i = 0, l = types.length; i < l; i++) {\n      if (!(mask & (1 << i))) continue;\n      World.removeComponent(entity, types[i]);\n    }\n    EntityManager.delete(EntityManager.findIndex(entity));\n  }\n\n  addEntity(entity: entityT = World.createEntity()): entityT {\n    this.localEntities.add(entity);\n    return entity;\n  }\n\n  removeEntity(entity: entityT) {\n    this.localEntities.delete(entity);\n  }\n\n  entityExists(entity: entityT): boolean {\n    return this.localEntities.has(entity);\n  }\n\n  static registerComponent<T extends object>(component: T): typeof World {\n    if (World.indexMap.has(component)) return World;\n    ComponentManager.register(component);\n    World.indexMap.set(component, new Map());\n    return World;\n  }\n\n  static hasComponent<T extends object>(\n    entity: entityT,\n    component: T,\n  ): boolean {\n    return !!(\n      (World.maskMap.get(entity) as number) &\n      (1 << ComponentManager.getId(component))\n    );\n  }\n\n  static addComponent<T extends object>(\n    entity: entityT,\n    component: T,\n    values: Partial<T> = {},\n  ): T {\n    World.registerComponent(component);\n    let mask = World.maskMap.get(entity) as number;\n    const compId = ComponentManager.getId(component);\n    if ((mask & (1 << compId)) != 0) {\n      throw new Error(`Entity ${entity} already had that component.`);\n    }\n    World.getArchetype(mask).delete(entity);\n    mask |= 1 << compId;\n    World.maskMap.set(entity, mask);\n    World.getArchetype(mask).add(entity);\n    const idx = ComponentManager.len(component);\n    (World.indexMap.get(component) as Map<number, number>).set(entity, idx);\n    return Object.assign(ComponentManager.add(component), values);\n  }\n\n  static removeComponent<T extends object>(entity: entityT, component: T): T {\n    World.registerComponent(component);\n    let mask = World.maskMap.get(entity) as number;\n    const compId = ComponentManager.getId(component);\n    if ((mask & (1 << compId)) == 0) {\n      throw new Error(`Entity ${entity} does not have that component.`);\n    }\n    World.getArchetype(mask).delete(entity);\n    mask &= ~(1 << compId);\n    World.maskMap.set(entity, mask);\n    World.getArchetype(mask).add(entity);\n    const indices = World.indexMap.get(component) as Map<number, number>;\n    const entityIdx = indices.get(entity) as number;\n    const removed = ComponentManager.delete(component, entityIdx);\n    const backEntity = indices.keys().toArray().at(-1) ?? -1;\n    indices.set(backEntity, entityIdx);\n    indices.delete(entity);\n    return removed;\n  }\n\n  static getComponent<T extends object>(entity: entityT, component: T): T {\n    return ComponentManager.get(\n      component,\n      (World.indexMap.get(component) as Map<number, number>).get(\n        entity,\n      ) as number,\n    );\n  }\n\n  update(...fns: ((world: World) => void)[]) {\n    for (let i = 0, l = fns.length; i < l; i++) fns[i](this);\n    this.dtMilli = performance.now() - this.timeMilli;\n    this.timeMilli += this.dtMilli;\n  }\n\n  query(query: queryT): entityT[] {\n    let andMask = 0,\n      notMask = 0;\n    if (query.and) {\n      for (let i = 0, l = query.and.length; i < l; i++) {\n        andMask |= 1 << ComponentManager.getId(query.and[i]);\n      }\n    }\n    if (query.not) {\n      for (let i = 0, l = query.not.length; i < l; i++) {\n        notMask |= 1 << ComponentManager.getId(query.not[i]);\n      }\n    }\n    const res = [];\n    for (\n      let archetypes = World.archetypeMap.keys().toArray(),\n        l = archetypes.length,\n        i = 0;\n      i < l;\n      i++\n    ) {\n      const a = archetypes[i];\n      const set = World.getArchetype(a);\n      if (set.size == 0) continue;\n      (a & andMask) == andMask && (a & notMask) == 0 && res.push(...set);\n    }\n    return [...this.localEntities.intersection(new Set(res))];\n  }\n\n  entityCount(): number {\n    return this.localEntities.size;\n  }\n}\n", "{\n\t\"playArea\": {\n\t\t\"width\": 600,\n\t\t\"height\": 400\n\t},\n\t\"paddle\": {\n\t\t\"speed\": 200,\n\t\t\"width\": 10,\n\t\t\"height\": 70,\n\t\t\"padding\": 0.1\n\t},\n\t\"ball\": {\n\t\t\"speed\": 200,\n\t\t\"width\": 10,\n\t\t\"height\": 10\n\t}\n}\n", "import { entityT, World } from \"../../../src/index.ts\";\nimport { default as config } from \"./config.json\" with { type: \"json\" };\n\nconst canvas = document.querySelector(\"canvas\");\nconst ctx = canvas?.getContext(\"2d\");\n\n// components\nconst Rect = {\n  width: 1,\n  height: 1,\n  color: \"white\",\n};\nconst Position = {\n  x: 0,\n  y: 0,\n};\nconst Velocity = {\n  x: 0,\n  y: 0,\n};\nconst Text = {\n  content: \"\",\n  fontSize: 20,\n  padding: 3,\n  color: \"black\",\n  backgroundColor: \"white\",\n};\nconst PlayerControl = {\n  isLeft: true,\n};\n\n// world\nconst w = new World();\n\n// systems\nfunction handlePlayerControl(world: World) {\n  world.query({ and: [Velocity, PlayerControl] }).forEach((e) => {\n    const v = World.getComponent(e, Velocity);\n    const pc = World.getComponent(e, PlayerControl);\n    v.y = 0;\n    if (pc.isLeft) {\n      if (keys[\"w\"]) {\n        v.y -= 1;\n      }\n      if (keys[\"s\"]) {\n        v.y += 1;\n      }\n    } else {\n      if (keys[\"ArrowUp\"]) {\n        v.y -= 1;\n      }\n      if (keys[\"ArrowDown\"]) {\n        v.y += 1;\n      }\n    }\n    for (const pos of Object.values(touches)) {\n      if (ctx) {\n        const old = ctx.fillStyle;\n        ctx.fillStyle = \"green\";\n        ctx.fillRect(pos.x, pos.y, 20, 20);\n        ctx.fillStyle = old;\n      }\n      if (pos.x < config.playArea.width * 0.5) {\n        if (!pc.isLeft) continue;\n      } else {\n        if (pc.isLeft) continue;\n      }\n      if (pos.y < config.playArea.height * 0.5) {\n        v.y -= 1;\n      }\n      if (pos.y > config.playArea.height * 0.5) {\n        v.y += 1;\n      }\n    }\n    v.y = v.y / Math.abs(v.y || 1) * config.paddle.speed;\n  });\n}\n\nfunction drawBackgound() {\n  if (!ctx || !canvas) return;\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n}\n\nfunction move(world: World) {\n  const dt = world.dtMilli / 1000;\n  world.query({ and: [Position, Velocity] }).forEach((e) => {\n    const p = World.getComponent(e, Position);\n    const v = World.getComponent(e, Velocity);\n    p.x += v.x * dt;\n    p.y += v.y * dt;\n  });\n}\n\nfunction drawRects(world: World) {\n  if (!ctx) return;\n  world.query({ and: [Rect, Position] }).forEach((e) => {\n    const p = World.getComponent(e, Position);\n    const r = World.getComponent(e, Rect);\n    const old = ctx.fillStyle;\n    ctx.fillStyle = r.color;\n    ctx.fillRect(\n      Math.floor(p.x - r.width * 0.5),\n      Math.floor(p.y - r.height * 0.5),\n      r.width,\n      r.height,\n    );\n    ctx.fillStyle = old;\n  });\n}\n\nfunction drawTexts(world: World) {\n  if (!ctx) return;\n  world.query({ and: [Text, Position] }).forEach((e) => {\n    const t = World.getComponent(e, Text);\n    const p = World.getComponent(e, Position);\n\n    ctx.font = `${t.fontSize}px serif`;\n    const txtMetric = ctx.measureText(t.content);\n    const old = ctx.fillStyle;\n    ctx.fillStyle = t.backgroundColor;\n    ctx.fillRect(\n      p.x,\n      p.y,\n      t.padding * 2 + txtMetric.width,\n      t.padding * 2 + txtMetric.fontBoundingBoxAscent,\n    );\n    ctx.fillStyle = t.color;\n    ctx.fillText(\n      t.content,\n      p.x + t.padding,\n      p.y + t.padding + txtMetric.fontBoundingBoxAscent,\n    );\n    ctx.fillStyle = old;\n  });\n}\n\nfunction checkCollision(world: World) {\n  const rects = world.query({ and: [Position, Rect] });\n  rects.forEach((e) => {\n    const p = World.getComponent(e, Position);\n    const r = World.getComponent(e, Rect);\n    rects.forEach((other) => {\n      if (other == e) return;\n      const p1 = World.getComponent(other, Position);\n      const r1 = World.getComponent(other, Rect);\n      if (\n        (p.x - p1.x) ** 2 < ((r.width + r1.width) * 0.5) ** 2 &&\n        (p.y - p1.y) ** 2 < ((r.height + r1.height) * 0.5) ** 2\n      ) {\n        onCollision(e, other);\n      }\n    });\n  });\n}\n\nfunction checkGoal() {\n  const p = World.getComponent(ball, Position);\n  const r = World.getComponent(ball, Rect);\n  if (p.x - r.width > config.playArea.width) {\n    scores.left++;\n    onGoal();\n  }\n  if (p.x + r.width < 0) {\n    scores.right++;\n    onGoal();\n  }\n}\n\n// entity\nfunction addPlayerPaddle(\n  x: number,\n  y: number,\n  isLeft: boolean,\n): entityT {\n  const e = addRect(x, y, config.paddle.width, config.paddle.height);\n  const pc = World.addComponent(e, PlayerControl);\n  pc.isLeft = isLeft;\n  return w.addEntity(e);\n}\n\nfunction addRect(\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  color: string = \"white\",\n) {\n  const e = World.createEntity();\n  const p = World.addComponent(e, Position);\n  const v = World.addComponent(e, Velocity);\n  const r = World.addComponent(e, Rect);\n  p.x = x;\n  p.y = y;\n  r.width = width;\n  r.height = height;\n  r.color = color;\n  return w.addEntity(e);\n}\n\nfunction addText(\n  txt: string,\n  x: number = 0,\n  y: number = 0,\n  txtColor: string = \"black\",\n  fontSize: number = 20,\n  backgroundColor: string = \"rgba(0,0,0,0)\",\n): entityT {\n  const e = World.createEntity();\n  const t = World.addComponent(e, Text);\n  const p = World.addComponent(e, Position);\n  t.content = txt;\n  t.color = txtColor;\n  t.fontSize = fontSize;\n  t.backgroundColor = backgroundColor;\n  p.x = x;\n  p.y = y;\n  return w.addEntity(e);\n}\n\nif (canvas) {\n  canvas.width = config.playArea.width;\n  canvas.height = config.playArea.height;\n  //canvas.style.imageRendering = \"pixelated\";\n}\n\nconst keys: Record<KeyboardEvent[\"key\"], boolean> = {};\nglobalThis.onkeydown = (e) => {\n  keys[e.key] = true;\n};\nglobalThis.onkeyup = (e) => {\n  delete keys[e.key];\n};\n\n// multi touch\nconst touches: Record<number, { x: number; y: number }> = {};\nglobalThis.window.ontouchmove = globalThis.window.ontouchstart = (e) => {\n  if (!canvas) return;\n  const rect = canvas.getBoundingClientRect();\n  for (let i = 0, l = e.changedTouches.length; i < l; i++) {\n    const p = touches[e.changedTouches[i].identifier] = {\n      x: e.changedTouches[i].clientX,\n      y: e.changedTouches[i].clientY,\n    };\n    p.x -= rect.left;\n    p.y -= rect.top;\n    if (innerWidth / innerHeight < canvas.width / canvas.height) {\n      p.x *= canvas.width / innerWidth;\n      p.y *= canvas.width / innerWidth;\n    } else {\n      p.x *= canvas.height / innerHeight;\n      p.y *= canvas.height / innerHeight;\n    }\n  }\n};\nglobalThis.window.ontouchend = (e) => {\n  for (let i = 0, l = e.changedTouches.length; i < l; i++) {\n    delete touches[e.changedTouches[i].identifier];\n  }\n};\n\n//bottom wall\naddRect(\n  config.playArea.width * 0.5,\n  config.playArea.height * 0,\n  config.playArea.width,\n  10,\n);\n//top wall\naddRect(\n  config.playArea.width * 0.5,\n  config.playArea.height * 1,\n  config.playArea.width,\n  10,\n);\n\nconst ball = addRect(\n  config.playArea.width * 0.5,\n  config.playArea.height * 0.5,\n  config.ball.width,\n  config.ball.height,\n);\n\nconst playerLeft = addPlayerPaddle(\n  config.playArea.width * config.paddle.padding,\n  config.playArea.height * 0.5,\n  true,\n);\nconst playerRight = addPlayerPaddle(\n  config.playArea.width * (1 - config.paddle.padding),\n  config.playArea.height * 0.5,\n  false,\n);\n\nfunction reset() {\n  const ballV = World.getComponent(ball, Velocity);\n  const ballP = World.getComponent(ball, Position);\n  ballP.x = config.playArea.width * 0.5;\n  ballP.y = config.playArea.height * 0.5;\n  ballV.x = config.ball.speed;\n  ballV.y = 0;\n  let rad = Math.random() * 40 / 180 * Math.PI;\n  rad *= Math.random() > 0.5 ? 1 : -1;\n  rad += Math.random() > 0.5 ? Math.PI : 0;\n  rotate(ballV, rad);\n  const pLP = World.getComponent(playerLeft, Position);\n  const pRP = World.getComponent(playerRight, Position);\n  pLP.y = config.playArea.height * 0.5;\n  pRP.y = config.playArea.height * 0.5;\n}\n\nfunction rotate(vec2: { x: number; y: number }, rad: number) {\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n  const x = vec2.x;\n  const y = vec2.y;\n  vec2.x = c * x - s * y;\n  vec2.y = s * x + c * y;\n}\n\nfunction onGoal() {\n  const t = World.getComponent(goalTexts, Text);\n  t.content = `${scores.left} : ${scores.right}`;\n  reset();\n}\n\nfunction onCollision(e: entityT, other: entityT) {\n  const p = World.getComponent(e, Position);\n  const p1 = World.getComponent(other, Position);\n  const r = World.getComponent(e, Rect);\n  const r1 = World.getComponent(other, Rect);\n  const v = World.getComponent(e, Velocity);\n  const v1 = World.getComponent(other, Velocity);\n\n  const vMag = (v.x ** 2 + v.y ** 2) ** 0.5;\n  const vNx = v.x / vMag, vNy = v.y / vMag;\n  //p.x+vNx*t=someX,t=(someX-p.x)/vNx\n  let t = 0;\n  if (vNx != 0) {\n    t = (p1.x - (r1.width + r.width) * 0.5 - p.x) / vNx;\n    if (\n      p.x < p1.x && t < 0 &&\n      p.y + t * vNy < p1.y + (r1.height + r.height) * 0.5 &&\n      p.y + t * vNy > p1.y - (r1.height + r.height) * 0.5\n    ) {\n      p.x += t * vNx;\n      p.y += t * vNy;\n      v.x > 0 && (v.x *= -1);\n      v.y += v1.y;\n    }\n    t = (p1.x + (r1.width + r.width) * 0.5 - p.x) / vNx;\n    if (\n      p.x > p1.x && t < 0 &&\n      p.y + t * vNy < p1.y + (r1.height + r.height) * 0.5 &&\n      p.y + t * vNy > p1.y - (r1.height + r.height) * 0.5\n    ) {\n      p.x += t * vNx;\n      p.y += t * vNy;\n      v.x < 0 && (v.x *= -1);\n      v.y += v1.y;\n    }\n  }\n  if (vNy != 0) {\n    t = (p1.y - (r1.height + r.height) * 0.5 - p.y) / vNy;\n    if (\n      p.y < p1.y && t < 0 &&\n      p.x + t * vNx < p1.x + (r1.width + r.width) * 0.5 &&\n      p.x + t * vNx > p1.x - (r1.width + r.width) * 0.5\n    ) {\n      p.x += t * vNx;\n      p.y += t * vNy;\n      v.y > 0 && (v.y *= -1);\n    }\n    t = (p1.y + (r1.height + r.height) * 0.5 - p.y) / vNy;\n    if (\n      p.y > p1.y && t < 0 &&\n      p.x + t * vNx < p1.x + (r1.width + r.width) * 0.5 &&\n      p.x + t * vNx > p1.x - (r1.width + r.width) * 0.5\n    ) {\n      p.x += t * vNx;\n      p.y += t * vNy;\n      v.y < 0 && (v.y *= -1);\n    }\n  }\n}\n\nconst scores = { left: 0, right: 0 };\n\nconst goalTexts = addText(`${scores.left} : ${scores.right}`);\nconst t = World.getComponent(goalTexts, Text);\nt.color = \"white\";\nt.fontSize = 40;\n\nreset();\n\n(function update() {\n  w.update(\n    drawBackgound,\n    drawRects,\n    drawTexts,\n    move,\n    handlePlayerControl,\n    checkCollision,\n    checkGoal,\n  );\n  requestAnimationFrame(update);\n})();\n"],
  "mappings": "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",
  "names": ["ObjectPool", "objectFactory", "obj", "object", "v", "index", "removed", "ComponentManager", "_ComponentManager", "component", "ObjectPool", "index", "EntityManager", "_EntityManager", "ObjectPool", "entity", "index", "World", "_World", "entity", "EntityManager", "copy", "compTypes", "ComponentManager", "mask", "i", "l", "a", "types", "component", "values", "compId", "idx", "indices", "entityIdx", "removed", "backEntity", "fns", "query", "andMask", "notMask", "res", "archetypes", "set", "config_default", "canvas", "ctx", "Rect", "Position", "Velocity", "Text", "PlayerControl", "w", "World", "handlePlayerControl", "world", "e", "v", "pc", "keys", "pos", "touches", "old", "config_default", "drawBackgound", "move", "dt", "p", "drawRects", "r", "drawTexts", "t", "txtMetric", "checkCollision", "rects", "other", "p1", "r1", "onCollision", "checkGoal", "ball", "scores", "onGoal", "addPlayerPaddle", "x", "y", "isLeft", "addRect", "width", "height", "color", "addText", "txt", "txtColor", "fontSize", "backgroundColor", "rect", "i", "l", "playerLeft", "playerRight", "reset", "ballV", "ballP", "rad", "rotate", "pLP", "pRP", "vec2", "s", "c", "goalTexts", "v1", "vMag", "vNx", "vNy", "update"]
}
