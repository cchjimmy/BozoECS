{
  "version": 3,
  "sources": ["../../../src/pool.ts", "../../../src/entity.ts", "../../../src/component.ts", "../../../src/world.ts", "../src/main.ts"],
  "sourcesContent": ["export class ObjectPoolMap<K, V> {\n  private storage: V[] = [];\n  private indices: Map<K, number> = new Map();\n  private objectFactory: () => V;\n  private size = 0;\n\n  constructor(objectFactory: () => V) {\n    this.objectFactory = objectFactory;\n  }\n\n  len() {\n    return this.size;\n  }\n\n  add(key: K): V {\n    const index = this.indices.get(key);\n    if (index != undefined) return this.storage[index];\n    if (this.size >= this.storage.length)\n      this.storage.push(this.objectFactory());\n    this.indices.set(key, this.size);\n    this.size++;\n    return this.storage[this.size - 1];\n  }\n\n  remove(key: K): boolean {\n    const index = this.indices.get(key) ?? -1;\n    if (index < 0 || index >= this.size) return false;\n    const removed = this.storage[index];\n    // swap with last to maintain packed\n    this.storage[index] = this.storage[this.size - 1];\n    this.storage[this.size - 1] = removed;\n    for (const [k, v] of this.indices) {\n      if (v != this.size - 1) continue;\n      this.indices.set(k, index);\n      break;\n    }\n    this.indices.delete(key);\n    this.size--;\n    return true;\n  }\n\n  get(key: K): V {\n    const index = this.indices.get(key) ?? -1;\n    if (index < 0 || index >= this.size) throw new Error(\"Index out of range.\");\n    return this.storage[index];\n  }\n\n  has(key: K): boolean {\n    return this.indices.has(key);\n  }\n}\n", "export type entityT = number;\nexport function newEntity(): entityT {\n  return Math.random();\n}\n", "import { ObjectPoolMap } from \"./pool.ts\";\nimport { entityT, newEntity } from \"./entity.ts\";\n\nexport class ComponentManager {\n  private static pools: Map<object, unknown> = new Map();\n  private static idMap: Map<object, number> = new Map();\n\n  static register<T extends object>(component: T) {\n    if (ComponentManager.pools.has(component)) return;\n    ComponentManager.idMap.set(component, ComponentManager.idMap.size);\n    ComponentManager.pools.set(\n      component,\n      new ObjectPoolMap<entityT, T>(() => ({ ...component })),\n    );\n  }\n\n  static getId<T extends object>(component: T): number {\n    return ComponentManager.idMap.get(component) ?? -1;\n  }\n\n  static add<T extends object>(entity: entityT, component: T): T {\n    return Object.assign(\n      (ComponentManager.pools.get(component) as ObjectPoolMap<entityT, T>).add(\n        entity,\n      ),\n      component,\n    );\n  }\n\n  static remove<T extends object>(entity: entityT, component: T): boolean {\n    return (\n      ComponentManager.pools.get(component) as ObjectPoolMap<entityT, T>\n    ).remove(entity);\n  }\n\n  static get<T extends object>(entity: entityT, component: T): T {\n    return (\n      ComponentManager.pools.get(component) as ObjectPoolMap<entityT, T>\n    ).get(entity);\n  }\n\n  static len<T extends object>(component: T): number {\n    return (\n      ComponentManager.pools.get(component) as ObjectPoolMap<entityT, T>\n    ).len();\n  }\n\n  static delete(entity: entityT) {\n    for (const entry of this.pools) {\n      const p = entry[1] as ObjectPoolMap<entityT, object>;\n      p.has(entity) && p.remove(entity);\n    }\n  }\n\n  static copy(entity: entityT): entityT {\n    const copied = newEntity();\n    for (const entry of this.pools) {\n      const p = entry[1] as ObjectPoolMap<entityT, object>;\n      p.has(entity) && Object.assign(p.add(copied), p.get(entity));\n    }\n    return copied;\n  }\n}\n", "import { ComponentManager } from \"./component.ts\";\nimport { newEntity, type entityT } from \"./entity.ts\";\n\nexport type queryT = Partial<Record<\"and\" | \"not\", object[]>>;\n\nexport class World {\n  private static maskMap: Map<number, number> = new Map();\n  private static archetypeMap: Map<number, Set<entityT>> = new Map();\n  private static worlds: World[] = [];\n  private static entitiesToDelete: entityT[] = [];\n\n  private localEntities: Set<entityT> = new Set();\n\n  constructor() {\n    World.worlds.push(this);\n  }\n\n  static createEntity(): entityT {\n    const entity = newEntity();\n    World.maskMap.set(entity, 0);\n    World.getArchetype(0).add(entity);\n    return entity;\n  }\n\n  static copyEntity(entity: entityT): entityT {\n    const copy = ComponentManager.copy(entity);\n    const mask = this.maskMap.get(entity) ?? 0;\n    this.maskMap.set(copy, mask);\n    this.getArchetype(mask).add(copy);\n    return copy;\n  }\n\n  private static getArchetype(mask: number): Set<entityT> {\n    const a = World.archetypeMap.get(mask) ?? new Set();\n    World.archetypeMap.set(mask, a);\n    return a;\n  }\n\n  static deleteEntity(entity: entityT) {\n    World.entitiesToDelete.push(entity);\n  }\n\n  addEntity(entity: entityT = World.createEntity()): entityT {\n    this.localEntities.add(entity);\n    return entity;\n  }\n\n  removeEntity(entity: entityT) {\n    this.localEntities.delete(entity);\n  }\n\n  static registerComponent<T extends object>(component: T): typeof World {\n    ComponentManager.register(component);\n    return World;\n  }\n\n  static hasComponent<T extends object>(\n    entity: entityT,\n    component: T,\n  ): boolean {\n    return (\n      ((World.maskMap.get(entity) ?? 0) &\n        (1 << ComponentManager.getId(component))) >\n      0\n    );\n  }\n\n  static addComponent<T extends object>(\n    entity: entityT,\n    component: T,\n    values: Partial<T> = component,\n  ): T {\n    World.registerComponent(component);\n    let mask = World.maskMap.get(entity) ?? 0;\n    const compId = ComponentManager.getId(component);\n    if ((mask & (1 << compId)) != 0) {\n      return Object.assign(ComponentManager.get(entity, component), values);\n    }\n    World.getArchetype(mask).delete(entity);\n    mask |= 1 << compId;\n    World.maskMap.set(entity, mask);\n    World.getArchetype(mask).add(entity);\n    return Object.assign(ComponentManager.add(entity, component), values);\n  }\n\n  static removeComponent<T extends object>(\n    entity: entityT,\n    component: T,\n  ): boolean {\n    World.registerComponent(component);\n    let mask = World.maskMap.get(entity) ?? 0;\n    const compId = ComponentManager.getId(component);\n    if ((mask & (1 << compId)) == 0) return false;\n    World.getArchetype(mask).delete(entity);\n    mask &= ~(1 << compId);\n    World.maskMap.set(entity, mask);\n    World.getArchetype(mask).add(entity);\n    return ComponentManager.remove(entity, component);\n  }\n\n  static getComponent<T extends object>(entity: entityT, component: T): T {\n    return ComponentManager.get(entity, component);\n  }\n\n  update(...fns: ((world: World) => void)[]) {\n    for (let i = 0, l = fns.length; i < l; i++) fns[i](this);\n    while (World.entitiesToDelete.length) {\n      const entity = World.entitiesToDelete.pop() as entityT;\n      for (let i = 0, l = World.worlds.length; i < l; i++) {\n        World.worlds[i].localEntities.delete(entity);\n      }\n      ComponentManager.delete(entity);\n      const mask = World.maskMap.get(entity) ?? 0;\n      World.maskMap.delete(entity);\n      World.getArchetype(mask).delete(entity);\n    }\n  }\n\n  query(query: queryT): entityT[] {\n    let andMask = 0,\n      notMask = 0;\n    if (query.and) {\n      for (let i = 0, l = query.and.length; i < l; i++) {\n        andMask |= 1 << ComponentManager.getId(query.and[i]);\n      }\n    }\n    if (query.not) {\n      for (let i = 0, l = query.not.length; i < l; i++) {\n        notMask |= 1 << ComponentManager.getId(query.not[i]);\n      }\n    }\n    const res = [];\n    for (\n      let archetypes = World.archetypeMap.keys().toArray(),\n        l = archetypes.length,\n        i = 0;\n      i < l;\n      i++\n    ) {\n      const a = archetypes[i];\n      const set = World.getArchetype(a);\n      if (set.size == 0) continue;\n      (a & andMask) == andMask && (a & notMask) == 0 && res.push(...set);\n    }\n    return [...this.localEntities.intersection(new Set(res))];\n  }\n\n  entityCount(): number {\n    return this.localEntities.size;\n  }\n}\n", "import { World } from \"../../../src/index.ts\";\n\n// components\nconst Transform = { x: 0, y: 0, rad: 0, scaleX: 0, scaleY: 0 };\nconst Velocity = { x: 0, y: 0 };\nconst Rect = { width: 10, height: 10 };\nconst Camera = { zoom: 4 };\nconst PlayerControl = {};\n\n// singletons\nconst Ctx2D = setUpCanvas2D();\nconst Pointer = setUpPointer();\nconst Keys = setUpKeyboard();\nconst Assets: HTMLImageElement[] = [];\nconst Time = setUpTime();\n\nfunction setUpCanvas2D(): {\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n} {\n  const canvas =\n    document.querySelector(\"canvas\") ?? document.createElement(\"canvas\");\n  if (!canvas) throw new Error(\"Cannot create canvas element.\");\n  const ctx = canvas.getContext(\"2d\");\n  if (!ctx) throw new Error(\"Cannot initialize context 2d.\");\n\n  document.body.appendChild(canvas);\n\n  globalThis.onresize = globalThis.onload = () => {\n    if (innerWidth / innerHeight < canvas.width / canvas.height) {\n      canvas.style.width = \"100%\";\n      canvas.style.height = \"\";\n    } else {\n      canvas.style.width = \"\";\n      canvas.style.height = \"100%\";\n    }\n  };\n\n  return { canvas, ctx };\n}\n\nfunction setUpKeyboard(): Record<\n  \"isDown\" | \"justPressed\" | \"justReleased\",\n  Record<string, boolean>\n> {\n  const keys: ReturnType<typeof setUpKeyboard> = {\n    isDown: {},\n    justPressed: {},\n    justReleased: {},\n  };\n\n  globalThis.onkeydown = (e) => {\n    !keys.isDown[e.key] && (keys.justPressed[e.key] = true);\n    keys.isDown[e.key] = true;\n  };\n  globalThis.onkeyup = (e) => {\n    keys.isDown[e.key] = false;\n    keys.justReleased[e.key] = true;\n  };\n\n  return keys;\n}\n\nfunction keysUpdate(\n  keys: Record<\n    \"isDown\" | \"justPressed\" | \"justReleased\",\n    Record<string, boolean>\n  >,\n) {\n  for (const key in keys.justPressed) keys.justPressed[key] = false;\n  for (const key in keys.justReleased) keys.justReleased[key] = false;\n}\n\nfunction setUpPointer() {\n  const pointer = {\n    x: 0,\n    y: 0,\n    isDown: false,\n    justPressed: false,\n    justReleased: false,\n    pressPos: { x: 0, y: 0 },\n    releasePos: { x: 0, y: 0 },\n  };\n\n  globalThis.onpointerdown = (e) => {\n    ((pointer.x = e.x), (pointer.y = e.y));\n    Object.assign(pointer.pressPos, pointer);\n    pointer.isDown = pointer.justPressed = true;\n  };\n\n  globalThis.onpointerup = (e) => {\n    ((pointer.x = e.x), (pointer.y = e.y));\n    Object.assign(pointer.releasePos, pointer);\n    ((pointer.isDown = false), (pointer.justReleased = true));\n  };\n\n  globalThis.onpointermove = (e) => {\n    ((pointer.x = e.x), (pointer.y = e.y));\n  };\n\n  return pointer;\n}\n\nfunction pointerUpdate(\n  pointer: Record<\"isDown\" | \"justPressed\" | \"justReleased\", boolean>,\n) {\n  pointer.justPressed = false;\n  pointer.justReleased = false;\n}\n\nfunction setUpTime() {\n  return { dtMilli: 0, timeMilli: 0 };\n}\n\nfunction timeUpdate(time: { dtMilli: number; timeMilli: number }) {\n  time.dtMilli = performance.now() - time.timeMilli;\n  time.timeMilli += time.dtMilli;\n}\n\n// systems\nfunction handleDrawing(world: World) {\n  const oldF = Ctx2D.ctx.fillStyle;\n\n  Ctx2D.ctx.fillStyle = \"white\";\n  Ctx2D.ctx.beginPath();\n  world.query({ and: [Transform, Rect] }).forEach((e) => {\n    const t = World.getComponent(e, Transform);\n    const r = World.getComponent(e, Rect);\n    Ctx2D.ctx.rect(\n      t.x - r.width * 0.5,\n      t.y - r.height * 0.5,\n      r.width,\n      r.height,\n    );\n  });\n  Ctx2D.ctx.fill();\n\n  Ctx2D.ctx.transform(1, 0, 0, -1, 0, 0);\n  Ctx2D.ctx.drawImage(Assets[0], 0, 0, 10, 10, 0, 0, 10, 10);\n  Ctx2D.ctx.transform(1, 0, 0, -1, 0, 0);\n\n  Ctx2D.ctx.fillStyle = oldF;\n}\n\nfunction handleInput(world: World) {\n  world.query({ and: [Velocity, PlayerControl] }).forEach((e) => {\n    const v = World.getComponent(e, Velocity);\n    v.x = +!!Keys.isDown[\"d\"] - +!!Keys.isDown[\"a\"];\n    v.y = +!!Keys.isDown[\"w\"] - +!!Keys.isDown[\"s\"];\n    const speed = 100;\n    ((v.x *= speed), (v.y *= speed));\n\n    Pointer.justPressed && console.log(\"action\");\n  });\n}\n\nfunction handleMovement(world: World) {\n  world.query({ and: [Transform, Velocity] }).forEach((e) => {\n    const t = World.getComponent(e, Transform);\n    const v = World.getComponent(e, Velocity);\n    t.x += (v.x * Time.dtMilli) / 1000;\n    t.y += (v.y * Time.dtMilli) / 1000;\n  });\n}\n\nfunction handleCamera(world: World) {\n  world.query({ and: [Transform, Camera] }).forEach((e) => {\n    const t = World.getComponent(e, Transform);\n    const c = World.getComponent(e, Camera);\n    Ctx2D.ctx.setTransform(\n      c.zoom,\n      0,\n      0,\n      -c.zoom,\n      -t.x * c.zoom + Ctx2D.canvas.width * 0.5,\n      t.y * c.zoom + Ctx2D.canvas.height * 0.5,\n    );\n  });\n}\n\n// entities\nfunction addRect(\n  world: World,\n  x = 0,\n  y = 0,\n  rad = 0,\n  w = Rect.width,\n  h = Rect.height,\n) {\n  const e = world.addEntity();\n  const t = World.addComponent(e, Transform);\n  ((t.x = x), (t.y = y), (t.rad = rad));\n  const r = World.addComponent(e, Rect);\n  ((r.width = w), (r.height = h));\n  return e;\n}\n\nfunction addPlayer(world: World) {\n  const player = world.addEntity();\n  World.addComponent(player, Transform);\n  World.addComponent(player, Velocity);\n  World.addComponent(player, PlayerControl);\n  World.addComponent(player, Camera);\n  return player;\n}\n\n// initialization\nCtx2D.canvas.style.imageRendering = \"pixelated\";\nCtx2D.ctx.imageSmoothingEnabled = false;\n\nconst atlas = new Image();\natlas.src = \"./assets/roguelike_atlas.png\";\nAssets.push(atlas);\n\nconst game = new World();\naddPlayer(game);\naddRect(game, 10, 10);\naddRect(game, -10, -10);\n\n(function loop() {\n  const oldF = Ctx2D.ctx.fillStyle;\n  Ctx2D.ctx.fillStyle = \"blue\";\n  Ctx2D.ctx.resetTransform();\n  Ctx2D.ctx.fillRect(0, 0, Ctx2D.canvas.width, Ctx2D.canvas.height);\n  Ctx2D.ctx.fillStyle = oldF;\n\n  game.update(handleCamera, handleDrawing, handleInput, handleMovement);\n  pointerUpdate(Pointer);\n  keysUpdate(Keys);\n  timeUpdate(Time);\n  requestAnimationFrame(loop);\n})();\n"],
  "mappings": "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",
  "names": ["ObjectPoolMap", "objectFactory", "key", "index", "removed", "k", "v", "newEntity", "ComponentManager", "_ComponentManager", "component", "ObjectPoolMap", "entity", "entry", "p", "copied", "newEntity", "World", "_World", "entity", "newEntity", "copy", "ComponentManager", "mask", "a", "component", "values", "compId", "fns", "i", "l", "query", "andMask", "notMask", "res", "archetypes", "set", "Transform", "Velocity", "Rect", "Camera", "PlayerControl", "Ctx2D", "setUpCanvas2D", "Pointer", "setUpPointer", "Keys", "setUpKeyboard", "Assets", "Time", "setUpTime", "canvas", "ctx", "keys", "e", "keysUpdate", "key", "pointer", "pointerUpdate", "timeUpdate", "time", "handleDrawing", "world", "oldF", "t", "World", "r", "handleInput", "v", "speed", "handleMovement", "handleCamera", "c", "addRect", "x", "y", "rad", "w", "h", "addPlayer", "player", "atlas", "game", "loop"]
}
